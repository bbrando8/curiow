<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/populate-llm-models.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/populate-llm-models.js" />
              <option name="updatedContent" value="// Script per popolare la collection llm_models con dati di esempio&#10;// Esegui questo script nella console del browser quando sei autenticato come admin&#10;&#10;const createLLMModels = async () =&gt; {&#10;  const models = [&#10;    {&#10;      name: 'gemini-1.5-flash',&#10;      inputCostPerMillion: 0.075,   // $0.075 per milione di token input&#10;      outputCostPerMillion: 0.3,   // $0.30 per milione di token output&#10;      isActive: true&#10;    },&#10;    {&#10;      name: 'gemini-2.5-flash',&#10;      inputCostPerMillion: 0.1,    // $0.10 per milione di token input  &#10;      outputCostPerMillion: 0.4,   // $0.40 per milione di token output&#10;      isActive: true&#10;    },&#10;    {&#10;      name: 'gemini-2.5-flash-lite',&#10;      inputCostPerMillion: 0.05,   // $0.05 per milione di token input&#10;      outputCostPerMillion: 0.2,   // $0.20 per milione di token output&#10;      isActive: true&#10;    },&#10;    {&#10;      name: 'sonar-pro',&#10;      inputCostPerMillion: 3.0,    // $3.00 per milione di token input&#10;      outputCostPerMillion: 15.0,  // $15.00 per milione di token output&#10;      isActive: true&#10;    }&#10;  ];&#10;&#10;  console.log('Creating LLM models...');&#10;  &#10;  for (const model of models) {&#10;    try {&#10;      const docRef = await window.firestoreService.createLLMModel(model);&#10;      console.log(`✅ Created model ${model.name} with ID: ${docRef}`);&#10;    } catch (error) {&#10;      console.error(`❌ Error creating model ${model.name}:`, error);&#10;    }&#10;  }&#10;  &#10;  console.log('Done! Refresh the page to see the costs.');&#10;};&#10;&#10;// Esegui la funzione&#10;createLLMModels();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/TokenCounterManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/TokenCounterManagement.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState, useMemo } from 'react';&#10;import AdminPageLayout from './AdminPageLayout';&#10;import { fetchTokenCounter, fetchLLMModels, TokenCounter, LLMModel } from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;&#10;interface TokenCounterManagementProps {&#10;  currentUser: { role: any; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;const defaultRange = () =&gt; {&#10;  const end = new Date();&#10;  const start = new Date();&#10;  start.setMonth(end.getMonth() - 1);&#10;  return { start, end };&#10;};&#10;&#10;const TokenCounterManagement: React.FC&lt;TokenCounterManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [filters, setFilters] = useState({&#10;    startDate: defaultRange().start,&#10;    endDate: defaultRange().end,&#10;    model: '',&#10;    type: '',&#10;    subtype: '',&#10;    userId: ''&#10;  });&#10;  const [data, setData] = useState&lt;TokenCounter[]&gt;([]);&#10;  const [llmModels, setLlmModels] = useState&lt;LLMModel[]&gt;([]);&#10;  const [loading, setLoading] = useState(false);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [itemsPerPage, setItemsPerPage] = useState(10);&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  // Carica i modelli LLM una volta all'inizio&#10;  useEffect(() =&gt; {&#10;    const loadLLMModels = async () =&gt; {&#10;      if (!currentUser || currentUser.role !== 'admin') return;&#10;      try {&#10;        console.log('[DEBUG] Loading LLM models...');&#10;        const models = await fetchLLMModels();&#10;        console.log('[DEBUG] Raw models from Firestore:', models);&#10;        console.log('[DEBUG] First model details:', models[0]);&#10;        setLlmModels(models);&#10;      } catch (error) {&#10;        console.error('Error loading LLM models:', error);&#10;      }&#10;    };&#10;    loadLLMModels();&#10;  }, [currentUser]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!currentUser || currentUser.role !== 'admin') return;&#10;&#10;    const loadData = async () =&gt; {&#10;      setLoading(true);&#10;      try {&#10;        const result = await fetchTokenCounter(filters);&#10;        setData(result);&#10;      } catch (error) {&#10;        console.error('Error loading token data:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadData();&#10;  }, [filters, currentUser]);&#10;&#10;  // Funzione helper per calcolare i costi&#10;  const calculateCost = (inputTokens: number, outputTokens: number, modelName: string): { inputCost: number; outputCost: number; totalCost: number } =&gt; {&#10;    const model = llmModels.find(m =&gt; m.name === modelName);&#10;&#10;    if (!model) {&#10;      return { inputCost: 0, outputCost: 0, totalCost: 0 };&#10;    }&#10;&#10;    // Gestione sicura dei valori undefined/null&#10;    const inputCostPerMillion = model.inputCostPerMillion || 0;&#10;    const outputCostPerMillion = model.outputCostPerMillion || 0;&#10;&#10;    // Validazione che i valori siano numeri&#10;    if (typeof inputCostPerMillion !== 'number' || typeof outputCostPerMillion !== 'number') {&#10;      console.warn(`[TokenCounter] Invalid cost data for model ${modelName}:`, {&#10;        inputCostPerMillion: model.inputCostPerMillion,&#10;        outputCostPerMillion: model.outputCostPerMillion&#10;      });&#10;      return { inputCost: 0, outputCost: 0, totalCost: 0 };&#10;    }&#10;&#10;    const inputCost = (inputTokens / 1_000_000) * inputCostPerMillion;&#10;    const outputCost = (outputTokens / 1_000_000) * outputCostPerMillion;&#10;    const totalCost = inputCost + outputCost;&#10;&#10;    return { inputCost, outputCost, totalCost };&#10;  };&#10;&#10;  // Calcoli aggregati con costi&#10;  const aggregates = useMemo(() =&gt; {&#10;    const totalInput = data.reduce((sum, d) =&gt; sum + (d.inputToken || 0), 0);&#10;    const totalOutput = data.reduce((sum, d) =&gt; sum + (d.outputToken || 0), 0);&#10;    const totalTokens = totalInput + totalOutput;&#10;&#10;    // Calcolo costi totali&#10;    const totalCosts = data.reduce((acc, d) =&gt; {&#10;      const costs = calculateCost(d.inputToken || 0, d.outputToken || 0, d.model || '');&#10;      return {&#10;        inputCost: acc.inputCost + costs.inputCost,&#10;        outputCost: acc.outputCost + costs.outputCost,&#10;        totalCost: acc.totalCost + costs.totalCost&#10;      };&#10;    }, { inputCost: 0, outputCost: 0, totalCost: 0 });&#10;&#10;    // Grouping by model con costi&#10;    const byModel = data.reduce((acc, d) =&gt; {&#10;      const model = d.model || 'Unknown';&#10;      if (!acc[model]) {&#10;        acc[model] = { input: 0, output: 0, count: 0, inputCost: 0, outputCost: 0, totalCost: 0 };&#10;      }&#10;      const costs = calculateCost(d.inputToken || 0, d.outputToken || 0, d.model || '');&#10;      acc[model].input += d.inputToken || 0;&#10;      acc[model].output += d.outputToken || 0;&#10;      acc[model].count += 1;&#10;      acc[model].inputCost += costs.inputCost;&#10;      acc[model].outputCost += costs.outputCost;&#10;      acc[model].totalCost += costs.totalCost;&#10;      return acc;&#10;    }, {} as Record&lt;string, { input: number; output: number; count: number; inputCost: number; outputCost: number; totalCost: number }&gt;);&#10;&#10;    // Grouping by type con costi&#10;    const byType = data.reduce((acc, d) =&gt; {&#10;      const type = d.type || 'Unknown';&#10;      if (!acc[type]) {&#10;        acc[type] = { input: 0, output: 0, count: 0, inputCost: 0, outputCost: 0, totalCost: 0 };&#10;      }&#10;      const costs = calculateCost(d.inputToken || 0, d.outputToken || 0, d.model || '');&#10;      acc[type].input += d.inputToken || 0;&#10;      acc[type].output += d.outputToken || 0;&#10;      acc[type].count += 1;&#10;      acc[type].inputCost += costs.inputCost;&#10;      acc[type].outputCost += costs.outputCost;&#10;      acc[type].totalCost += costs.totalCost;&#10;      return acc;&#10;    }, {} as Record&lt;string, { input: number; output: number; count: number; inputCost: number; outputCost: number; totalCost: number }&gt;);&#10;&#10;    return {&#10;      totalInput,&#10;      totalOutput,&#10;      totalTokens,&#10;      totalRequests: data.length,&#10;      totalCosts,&#10;      byModel,&#10;      byType&#10;    };&#10;  }, [data, llmModels]);&#10;&#10;  // Gestione form filtri&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLSelectElement&gt;) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFilters(f =&gt; ({ ...f, [name]: value }));&#10;    setCurrentPage(1); // Reset pagination when filters change&#10;  };&#10;&#10;  const handleDateChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFilters(f =&gt; ({ ...f, [name]: new Date(value) }));&#10;    setCurrentPage(1);&#10;  };&#10;&#10;  const resetFilters = () =&gt; {&#10;    setFilters({&#10;      startDate: defaultRange().start,&#10;      endDate: defaultRange().end,&#10;      model: '',&#10;      type: '',&#10;      subtype: '',&#10;      userId: ''&#10;    });&#10;    setCurrentPage(1);&#10;  };&#10;&#10;  // Paginazione&#10;  const indexOfLastItem = currentPage * itemsPerPage;&#10;  const indexOfFirstItem = indexOfLastItem - itemsPerPage;&#10;  const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);&#10;  const totalPages = Math.ceil(data.length / itemsPerPage);&#10;&#10;  // Unique values for filter dropdowns&#10;  const uniqueModels = Array.from(new Set(data.map(d =&gt; d.model).filter(Boolean)));&#10;  const uniqueTypes = Array.from(new Set(data.map(d =&gt; d.type).filter(Boolean)));&#10;  const uniqueSubtypes = Array.from(new Set(data.map(d =&gt; d.subtype).filter(Boolean)));&#10;&#10;  const formatNumber = (num: number) =&gt; {&#10;    return num.toLocaleString('it-IT');&#10;  };&#10;&#10;  const formatDate = (date: any) =&gt; {&#10;    if (!date) return 'N/A';&#10;    if (date.toDate) return date.toDate().toLocaleDateString('it-IT');&#10;    if (date instanceof Date) return date.toLocaleDateString('it-IT');&#10;    return String(date);&#10;  };&#10;&#10;  const formatDateTime = (date: any) =&gt; {&#10;    if (!date) return 'N/A';&#10;    if (date.toDate) return date.toDate().toLocaleString('it-IT');&#10;    if (date instanceof Date) return date.toLocaleString('it-IT');&#10;    return String(date);&#10;  };&#10;&#10;  const formatCurrency = (amount: number) =&gt; {&#10;    return new Intl.NumberFormat('en-US', {&#10;      style: 'currency',&#10;      currency: 'USD',&#10;      minimumFractionDigits: 4,&#10;      maximumFractionDigits: 6&#10;    }).format(amount);&#10;  };&#10;&#10;  return (&#10;    &lt;AdminPageLayout&#10;      title=&quot;Gestione Token LLM&quot;&#10;      onBack={onBack}&#10;      actions={&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600&quot;&gt;&#10;            {data.length} record trovati&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      }&#10;    &gt;&#10;      {/* Filtri */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Filtri&lt;/h3&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-4&quot;&gt;&#10;          {/* Date Range */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Data inizio&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;date&quot;&#10;              name=&quot;startDate&quot;&#10;              value={filters.startDate.toISOString().slice(0, 10)}&#10;              onChange={handleDateChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Data fine&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;date&quot;&#10;              name=&quot;endDate&quot;&#10;              value={filters.endDate.toISOString().slice(0, 10)}&#10;              onChange={handleDateChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Model Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Modello&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              name=&quot;model&quot;&#10;              value={filters.model}&#10;              onChange={handleChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Tutti i modelli&lt;/option&gt;&#10;              {uniqueModels.map(model =&gt; (&#10;                &lt;option key={model} value={model}&gt;{model}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Type Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Tipo&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              name=&quot;type&quot;&#10;              value={filters.type}&#10;              onChange={handleChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Tutti i tipi&lt;/option&gt;&#10;              {uniqueTypes.map(type =&gt; (&#10;                &lt;option key={type} value={type}&gt;{type}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Subtype Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Sottotipo&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              name=&quot;subtype&quot;&#10;              value={filters.subtype}&#10;              onChange={handleChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Tutti i sottotipi&lt;/option&gt;&#10;              {uniqueSubtypes.map(subtype =&gt; (&#10;                &lt;option key={subtype} value={subtype}&gt;{subtype}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* User ID Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              User ID&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              name=&quot;userId&quot;&#10;              value={filters.userId}&#10;              onChange={handleChange}&#10;              placeholder=&quot;ID utente...&quot;&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;button&#10;            onClick={resetFilters}&#10;            className=&quot;px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;          &gt;&#10;             Reset filtri&#10;          &lt;/button&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Record per pagina:&lt;/span&gt;&#10;            &lt;select&#10;              value={itemsPerPage}&#10;              onChange={(e) =&gt; {&#10;                setItemsPerPage(Number(e.target.value));&#10;                setCurrentPage(1);&#10;              }}&#10;              className=&quot;px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;            &gt;&#10;              &lt;option value={10}&gt;10&lt;/option&gt;&#10;              &lt;option value={25}&gt;25&lt;/option&gt;&#10;              &lt;option value={50}&gt;50&lt;/option&gt;&#10;              &lt;option value={100}&gt;100&lt;/option&gt;&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Statistics Cards */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-6&quot;&gt;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-blue-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Totale Richieste&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalRequests)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-green-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Token Input&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalInput)}&lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-green-600 font-medium&quot;&gt;{formatCurrency(aggregates.totalCosts.inputCost)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-purple-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Token Output&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalOutput)}&lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-purple-600 font-medium&quot;&gt;{formatCurrency(aggregates.totalCosts.outputCost)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-orange-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Token Totali&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalTokens)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-red-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Costo Totale&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatCurrency(aggregates.totalCosts.totalCost)}&lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                In: {formatCurrency(aggregates.totalCosts.inputCost)} | Out: {formatCurrency(aggregates.totalCosts.outputCost)}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Summary by Model and Type */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;        {/* By Model */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Riepilogo per Modello&lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {Object.entries(aggregates.byModel).map(([model, stats]) =&gt; (&#10;              &lt;div key={model} className=&quot;flex justify-between items-center p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{model}&lt;/div&gt;&#10;                  &lt;div className=&quot;text-sm text-gray-500&quot;&gt;{stats.count} richieste&lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs font-medium text-green-600&quot;&gt;{formatCurrency(stats.totalCost)}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-right&quot;&gt;&#10;                  &lt;div className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                    {formatNumber(stats.input + stats.output)} token&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    In: {formatNumber(stats.input)} | Out: {formatNumber(stats.output)}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    {formatCurrency(stats.inputCost)} | {formatCurrency(stats.outputCost)}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* By Type */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Riepilogo per Tipo&lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {Object.entries(aggregates.byType).map(([type, stats]) =&gt; (&#10;              &lt;div key={type} className=&quot;flex justify-between items-center p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{type}&lt;/div&gt;&#10;                  &lt;div className=&quot;text-sm text-gray-500&quot;&gt;{stats.count} richieste&lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs font-medium text-green-600&quot;&gt;{formatCurrency(stats.totalCost)}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-right&quot;&gt;&#10;                  &lt;div className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                    {formatNumber(stats.input + stats.output)} token&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    In: {formatNumber(stats.input)} | Out: {formatNumber(stats.output)}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    {formatCurrency(stats.inputCost)} | {formatCurrency(stats.outputCost)}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Data Table */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;px-6 py-4 border-b border-gray-200&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;Dettaglio Utilizzo Token&lt;/h3&gt;&#10;        &lt;/div&gt;&#10;&#10;        {loading ? (&#10;          &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Caricamento dati...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : currentItems.length === 0 ? (&#10;          &lt;div className=&quot;p-8 text-center text-gray-500&quot;&gt;&#10;            &lt;p&gt;Nessun dato trovato per i filtri selezionati.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full&quot;&gt;&#10;                &lt;thead className=&quot;bg-gray-50 border-b border-gray-200&quot;&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Data&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Gem ID&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Modello&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Tipo&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Sottotipo&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      User ID&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Token Input&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Token Output&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Totale&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;                  {currentItems.map((item) =&gt; (&#10;                    &lt;tr key={item.id} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        {formatDateTime(item.createdAt)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        &lt;span className=&quot;font-mono text-xs bg-gray-100 px-2 py-1 rounded&quot;&gt;&#10;                          {item.gemId ? item.gemId.substring(0, 8) + '...' : 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800&quot;&gt;&#10;                          {item.model || 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800&quot;&gt;&#10;                          {item.type || 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        {item.subtype || 'N/A'}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        &lt;span className=&quot;font-mono text-xs&quot;&gt;&#10;                          {item.userId ? item.userId.substring(0, 8) + '...' : 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right font-mono&quot;&gt;&#10;                        {formatNumber(item.inputToken || 0)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right font-mono&quot;&gt;&#10;                        {formatNumber(item.outputToken || 0)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right font-mono&quot;&gt;&#10;                        {formatNumber((item.inputToken || 0) + (item.outputToken || 0))}&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Pagination */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;px-6 py-3 border-t border-gray-200 flex justify-between items-center&quot;&gt;&#10;                &lt;div className=&quot;text-sm text-gray-700&quot;&gt;&#10;                  Mostrando {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, data.length)} di {data.length} record&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage - 1)}&#10;                    disabled={currentPage === 1}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Precedente&#10;                  &lt;/button&gt;&#10;                  &lt;span className=&quot;px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md&quot;&gt;&#10;                    {currentPage} di {totalPages}&#10;                  &lt;/span&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage + 1)}&#10;                    disabled={currentPage === totalPages}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Successiva&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/AdminPageLayout&gt;&#10;  );&#10;};&#10;&#10;export default TokenCounterManagement;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState, useMemo } from 'react';&#10;import AdminPageLayout from './AdminPageLayout';&#10;import { fetchTokenCounter, fetchLLMModels, TokenCounter, LLMModel } from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;&#10;interface TokenCounterManagementProps {&#10;  currentUser: { role: any; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;const defaultRange = () =&gt; {&#10;  const end = new Date();&#10;  const start = new Date();&#10;  start.setMonth(end.getMonth() - 1);&#10;  return { start, end };&#10;};&#10;&#10;const TokenCounterManagement: React.FC&lt;TokenCounterManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [filters, setFilters] = useState({&#10;    startDate: defaultRange().start,&#10;    endDate: defaultRange().end,&#10;    model: '',&#10;    type: '',&#10;    subtype: '',&#10;    userId: ''&#10;  });&#10;  const [data, setData] = useState&lt;TokenCounter[]&gt;([]);&#10;  const [llmModels, setLlmModels] = useState&lt;LLMModel[]&gt;([]);&#10;  const [loading, setLoading] = useState(false);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [itemsPerPage, setItemsPerPage] = useState(10);&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  // Cache per i modelli LLM - evita di ricaricarli ad ogni calcolo&#10;  const modelsMapRef = React.useRef&lt;Map&lt;string, LLMModel&gt;&gt;(new Map());&#10;&#10;  // Carica i modelli LLM una volta all'inizio&#10;  useEffect(() =&gt; {&#10;    const loadLLMModels = async () =&gt; {&#10;      if (!currentUser || currentUser.role !== 'admin') return;&#10;      try {&#10;        console.log('[DEBUG] Loading LLM models...');&#10;        const models = await fetchLLMModels();&#10;        console.log('[DEBUG] Raw models from Firestore:', models);&#10;        &#10;        // Log aggiuntivo per debugging dei campi corretti&#10;        models.forEach((model, index) =&gt; {&#10;          console.log(`[DEBUG] Model ${index}:`, {&#10;            name: model.name,&#10;            inputCostPerMilion: model.inputCostPerMilion,&#10;            outputCostPerMilion: model.outputCostPerMilion,&#10;            allFields: Object.keys(model)&#10;          });&#10;        });&#10;        &#10;        // Popola la cache&#10;        const modelsMap = new Map&lt;string, LLMModel&gt;();&#10;        models.forEach(model =&gt; {&#10;          modelsMap.set(model.name, model);&#10;        });&#10;        modelsMapRef.current = modelsMap;&#10;        &#10;        setLlmModels(models);&#10;        console.log('[DEBUG] Models cache populated with', models.length, 'models');&#10;      } catch (error) {&#10;        console.error('Error loading LLM models:', error);&#10;      }&#10;    };&#10;    loadLLMModels();&#10;  }, [currentUser]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!currentUser || currentUser.role !== 'admin') return;&#10;&#10;    const loadData = async () =&gt; {&#10;      setLoading(true);&#10;      try {&#10;        const result = await fetchTokenCounter(filters);&#10;        setData(result);&#10;      } catch (error) {&#10;        console.error('Error loading token data:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    loadData();&#10;  }, [filters, currentUser]);&#10;&#10;  // Funzione helper per calcolare i costi con cache&#10;  const calculateCost = (inputTokens: number, outputTokens: number, modelName: string): { inputCost: number; outputCost: number; totalCost: number } =&gt; {&#10;    // Usa la cache per ottenere il modello&#10;    const model = modelsMapRef.current.get(modelName);&#10;&#10;    if (!model) {&#10;      console.warn(`[TokenCounter] Model not found in cache: ${modelName}`);&#10;      return { inputCost: 0, outputCost: 0, totalCost: 0 };&#10;    }&#10;&#10;    // Usa i nomi corretti dei campi dal database&#10;    const inputCostPerMillion = model.inputCostPerMilion;  // Nota: &quot;Milion&quot; non &quot;Million&quot;&#10;    const outputCostPerMillion = model.outputCostPerMilion; // Nota: &quot;Milion&quot; non &quot;Million&quot;&#10;&#10;    // Validazione che i valori siano numeri&#10;    if (typeof inputCostPerMillion !== 'number' || typeof outputCostPerMillion !== 'number') {&#10;      console.warn(`[TokenCounter] Invalid cost data for model ${modelName}:`, {&#10;        inputCostPerMilion: model.inputCostPerMilion,&#10;        outputCostPerMilion: model.outputCostPerMilion&#10;      });&#10;      return { inputCost: 0, outputCost: 0, totalCost: 0 };&#10;    }&#10;&#10;    const inputCost = (inputTokens / 1_000_000) * inputCostPerMillion;&#10;    const outputCost = (outputTokens / 1_000_000) * outputCostPerMillion;&#10;    const totalCost = inputCost + outputCost;&#10;&#10;    console.log(`[TokenCounter] Cost calculation for ${modelName}:`, {&#10;      inputTokens,&#10;      outputTokens,&#10;      inputCostPerMillion,&#10;      outputCostPerMillion,&#10;      inputCost,&#10;      outputCost,&#10;      totalCost&#10;    });&#10;&#10;    return { inputCost, outputCost, totalCost };&#10;  };&#10;&#10;  // Calcoli aggregati con costi&#10;  const aggregates = useMemo(() =&gt; {&#10;    const totalInput = data.reduce((sum, d) =&gt; sum + (d.inputToken || 0), 0);&#10;    const totalOutput = data.reduce((sum, d) =&gt; sum + (d.outputToken || 0), 0);&#10;    const totalTokens = totalInput + totalOutput;&#10;&#10;    // Calcolo costi totali&#10;    const totalCosts = data.reduce((acc, d) =&gt; {&#10;      const costs = calculateCost(d.inputToken || 0, d.outputToken || 0, d.model || '');&#10;      return {&#10;        inputCost: acc.inputCost + costs.inputCost,&#10;        outputCost: acc.outputCost + costs.outputCost,&#10;        totalCost: acc.totalCost + costs.totalCost&#10;      };&#10;    }, { inputCost: 0, outputCost: 0, totalCost: 0 });&#10;&#10;    // Grouping by model con costi&#10;    const byModel = data.reduce((acc, d) =&gt; {&#10;      const model = d.model || 'Unknown';&#10;      if (!acc[model]) {&#10;        acc[model] = { input: 0, output: 0, count: 0, inputCost: 0, outputCost: 0, totalCost: 0 };&#10;      }&#10;      const costs = calculateCost(d.inputToken || 0, d.outputToken || 0, d.model || '');&#10;      acc[model].input += d.inputToken || 0;&#10;      acc[model].output += d.outputToken || 0;&#10;      acc[model].count += 1;&#10;      acc[model].inputCost += costs.inputCost;&#10;      acc[model].outputCost += costs.outputCost;&#10;      acc[model].totalCost += costs.totalCost;&#10;      return acc;&#10;    }, {} as Record&lt;string, { input: number; output: number; count: number; inputCost: number; outputCost: number; totalCost: number }&gt;);&#10;&#10;    // Grouping by type con costi&#10;    const byType = data.reduce((acc, d) =&gt; {&#10;      const type = d.type || 'Unknown';&#10;      if (!acc[type]) {&#10;        acc[type] = { input: 0, output: 0, count: 0, inputCost: 0, outputCost: 0, totalCost: 0 };&#10;      }&#10;      const costs = calculateCost(d.inputToken || 0, d.outputToken || 0, d.model || '');&#10;      acc[type].input += d.inputToken || 0;&#10;      acc[type].output += d.outputToken || 0;&#10;      acc[type].count += 1;&#10;      acc[type].inputCost += costs.inputCost;&#10;      acc[type].outputCost += costs.outputCost;&#10;      acc[type].totalCost += costs.totalCost;&#10;      return acc;&#10;    }, {} as Record&lt;string, { input: number; output: number; count: number; inputCost: number; outputCost: number; totalCost: number }&gt;);&#10;&#10;    return {&#10;      totalInput,&#10;      totalOutput,&#10;      totalTokens,&#10;      totalRequests: data.length,&#10;      totalCosts,&#10;      byModel,&#10;      byType&#10;    };&#10;  }, [data, llmModels]);&#10;&#10;  // Gestione form filtri&#10;  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement | HTMLSelectElement&gt;) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFilters(f =&gt; ({ ...f, [name]: value }));&#10;    setCurrentPage(1); // Reset pagination when filters change&#10;  };&#10;&#10;  const handleDateChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const { name, value } = e.target;&#10;    setFilters(f =&gt; ({ ...f, [name]: new Date(value) }));&#10;    setCurrentPage(1);&#10;  };&#10;&#10;  const resetFilters = () =&gt; {&#10;    setFilters({&#10;      startDate: defaultRange().start,&#10;      endDate: defaultRange().end,&#10;      model: '',&#10;      type: '',&#10;      subtype: '',&#10;      userId: ''&#10;    });&#10;    setCurrentPage(1);&#10;  };&#10;&#10;  // Paginazione&#10;  const indexOfLastItem = currentPage * itemsPerPage;&#10;  const indexOfFirstItem = indexOfLastItem - itemsPerPage;&#10;  const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);&#10;  const totalPages = Math.ceil(data.length / itemsPerPage);&#10;&#10;  // Unique values for filter dropdowns&#10;  const uniqueModels = Array.from(new Set(data.map(d =&gt; d.model).filter(Boolean)));&#10;  const uniqueTypes = Array.from(new Set(data.map(d =&gt; d.type).filter(Boolean)));&#10;  const uniqueSubtypes = Array.from(new Set(data.map(d =&gt; d.subtype).filter(Boolean)));&#10;&#10;  const formatNumber = (num: number) =&gt; {&#10;    return num.toLocaleString('it-IT');&#10;  };&#10;&#10;  const formatDate = (date: any) =&gt; {&#10;    if (!date) return 'N/A';&#10;    if (date.toDate) return date.toDate().toLocaleDateString('it-IT');&#10;    if (date instanceof Date) return date.toLocaleDateString('it-IT');&#10;    return String(date);&#10;  };&#10;&#10;  const formatDateTime = (date: any) =&gt; {&#10;    if (!date) return 'N/A';&#10;    if (date.toDate) return date.toDate().toLocaleString('it-IT');&#10;    if (date instanceof Date) return date.toLocaleString('it-IT');&#10;    return String(date);&#10;  };&#10;&#10;  const formatCurrency = (amount: number) =&gt; {&#10;    return new Intl.NumberFormat('en-US', {&#10;      style: 'currency',&#10;      currency: 'USD',&#10;      minimumFractionDigits: 4,&#10;      maximumFractionDigits: 6&#10;    }).format(amount);&#10;  };&#10;&#10;  return (&#10;    &lt;AdminPageLayout&#10;      title=&quot;Gestione Token LLM&quot;&#10;      onBack={onBack}&#10;      actions={&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;span className=&quot;text-sm text-gray-600&quot;&gt;&#10;            {data.length} record trovati&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      }&#10;    &gt;&#10;      {/* Filtri */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Filtri&lt;/h3&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-4&quot;&gt;&#10;          {/* Date Range */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Data inizio&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;date&quot;&#10;              name=&quot;startDate&quot;&#10;              value={filters.startDate.toISOString().slice(0, 10)}&#10;              onChange={handleDateChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Data fine&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;date&quot;&#10;              name=&quot;endDate&quot;&#10;              value={filters.endDate.toISOString().slice(0, 10)}&#10;              onChange={handleDateChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Model Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Modello&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              name=&quot;model&quot;&#10;              value={filters.model}&#10;              onChange={handleChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Tutti i modelli&lt;/option&gt;&#10;              {uniqueModels.map(model =&gt; (&#10;                &lt;option key={model} value={model}&gt;{model}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Type Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Tipo&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              name=&quot;type&quot;&#10;              value={filters.type}&#10;              onChange={handleChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Tutti i tipi&lt;/option&gt;&#10;              {uniqueTypes.map(type =&gt; (&#10;                &lt;option key={type} value={type}&gt;{type}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Subtype Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Sottotipo&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              name=&quot;subtype&quot;&#10;              value={filters.subtype}&#10;              onChange={handleChange}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;&quot;&gt;Tutti i sottotipi&lt;/option&gt;&#10;              {uniqueSubtypes.map(subtype =&gt; (&#10;                &lt;option key={subtype} value={subtype}&gt;{subtype}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* User ID Filter */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              User ID&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              name=&quot;userId&quot;&#10;              value={filters.userId}&#10;              onChange={handleChange}&#10;              placeholder=&quot;ID utente...&quot;&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;button&#10;            onClick={resetFilters}&#10;            className=&quot;px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;          &gt;&#10;             Reset filtri&#10;          &lt;/button&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Record per pagina:&lt;/span&gt;&#10;            &lt;select&#10;              value={itemsPerPage}&#10;              onChange={(e) =&gt; {&#10;                setItemsPerPage(Number(e.target.value));&#10;                setCurrentPage(1);&#10;              }}&#10;              className=&quot;px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;            &gt;&#10;              &lt;option value={10}&gt;10&lt;/option&gt;&#10;              &lt;option value={25}&gt;25&lt;/option&gt;&#10;              &lt;option value={50}&gt;50&lt;/option&gt;&#10;              &lt;option value={100}&gt;100&lt;/option&gt;&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Statistics Cards */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-6&quot;&gt;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-blue-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Totale Richieste&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalRequests)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-green-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Token Input&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalInput)}&lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-green-600 font-medium&quot;&gt;{formatCurrency(aggregates.totalCosts.inputCost)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-purple-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Token Output&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalOutput)}&lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-purple-600 font-medium&quot;&gt;{formatCurrency(aggregates.totalCosts.outputCost)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-orange-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Token Totali&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatNumber(aggregates.totalTokens)}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center&quot;&gt;&#10;                &lt;span className=&quot;text-red-600 font-semibold&quot;&gt;&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;ml-4&quot;&gt;&#10;              &lt;div className=&quot;text-sm font-medium text-gray-500&quot;&gt;Costo Totale&lt;/div&gt;&#10;              &lt;div className=&quot;text-2xl font-bold text-gray-900&quot;&gt;{formatCurrency(aggregates.totalCosts.totalCost)}&lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                In: {formatCurrency(aggregates.totalCosts.inputCost)} | Out: {formatCurrency(aggregates.totalCosts.outputCost)}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Summary by Model and Type */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6&quot;&gt;&#10;        {/* By Model */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Riepilogo per Modello&lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {Object.entries(aggregates.byModel).map(([model, stats]) =&gt; (&#10;              &lt;div key={model} className=&quot;flex justify-between items-center p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{model}&lt;/div&gt;&#10;                  &lt;div className=&quot;text-sm text-gray-500&quot;&gt;{stats.count} richieste&lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs font-medium text-green-600&quot;&gt;{formatCurrency(stats.totalCost)}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-right&quot;&gt;&#10;                  &lt;div className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                    {formatNumber(stats.input + stats.output)} token&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    In: {formatNumber(stats.input)} | Out: {formatNumber(stats.output)}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    {formatCurrency(stats.inputCost)} | {formatCurrency(stats.outputCost)}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* By Type */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-4&quot;&gt;Riepilogo per Tipo&lt;/h3&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {Object.entries(aggregates.byType).map(([type, stats]) =&gt; (&#10;              &lt;div key={type} className=&quot;flex justify-between items-center p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;div className=&quot;font-medium text-gray-900&quot;&gt;{type}&lt;/div&gt;&#10;                  &lt;div className=&quot;text-sm text-gray-500&quot;&gt;{stats.count} richieste&lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs font-medium text-green-600&quot;&gt;{formatCurrency(stats.totalCost)}&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-right&quot;&gt;&#10;                  &lt;div className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                    {formatNumber(stats.input + stats.output)} token&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    In: {formatNumber(stats.input)} | Out: {formatNumber(stats.output)}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                    {formatCurrency(stats.inputCost)} | {formatCurrency(stats.outputCost)}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Data Table */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200&quot;&gt;&#10;        &lt;div className=&quot;px-6 py-4 border-b border-gray-200&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;Dettaglio Utilizzo Token&lt;/h3&gt;&#10;        &lt;/div&gt;&#10;&#10;        {loading ? (&#10;          &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Caricamento dati...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : currentItems.length === 0 ? (&#10;          &lt;div className=&quot;p-8 text-center text-gray-500&quot;&gt;&#10;            &lt;p&gt;Nessun dato trovato per i filtri selezionati.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full&quot;&gt;&#10;                &lt;thead className=&quot;bg-gray-50 border-b border-gray-200&quot;&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Data&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Gem ID&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Modello&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Tipo&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Sottotipo&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      User ID&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Token Input&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Token Output&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Totale&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;                  {currentItems.map((item) =&gt; (&#10;                    &lt;tr key={item.id} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        {formatDateTime(item.createdAt)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        &lt;span className=&quot;font-mono text-xs bg-gray-100 px-2 py-1 rounded&quot;&gt;&#10;                          {item.gemId ? item.gemId.substring(0, 8) + '...' : 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800&quot;&gt;&#10;                          {item.model || 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800&quot;&gt;&#10;                          {item.type || 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        {item.subtype || 'N/A'}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                        &lt;span className=&quot;font-mono text-xs&quot;&gt;&#10;                          {item.userId ? item.userId.substring(0, 8) + '...' : 'N/A'}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right font-mono&quot;&gt;&#10;                        {formatNumber(item.inputToken || 0)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right font-mono&quot;&gt;&#10;                        {formatNumber(item.outputToken || 0)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right font-mono&quot;&gt;&#10;                        {formatNumber((item.inputToken || 0) + (item.outputToken || 0))}&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Pagination */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;px-6 py-3 border-t border-gray-200 flex justify-between items-center&quot;&gt;&#10;                &lt;div className=&quot;text-sm text-gray-700&quot;&gt;&#10;                  Mostrando {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, data.length)} di {data.length} record&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage - 1)}&#10;                    disabled={currentPage === 1}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Precedente&#10;                  &lt;/button&gt;&#10;                  &lt;span className=&quot;px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md&quot;&gt;&#10;                    {currentPage} di {totalPages}&#10;                  &lt;/span&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage + 1)}&#10;                    disabled={currentPage === totalPages}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Successiva&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/AdminPageLayout&gt;&#10;  );&#10;};&#10;&#10;export default TokenCounterManagement;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.cjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.cjs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const { initializeApp } = require('firebase/app');&#10;const { getFirestore, collection, getDocs, updateDoc, doc } = require('firebase/firestore');&#10;const { firebaseConfig } = require('../services/firebase.cjs');&#10;&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.js" />
              <option name="updatedContent" value="const { initializeApp } = require('firebase/app');&#10;const { getFirestore, collection, getDocs, updateDoc, doc } = require('firebase/firestore');&#10;const { firebaseConfig } = require('../services/firebase');&#10;&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.ts" />
              <option name="updatedContent" value="import { initializeApp } from 'firebase/app';&#10;import { getFirestore, collection, getDocs, updateDoc, doc } from 'firebase/firestore';&#10;import { firebaseConfig } from '../services/firebase';&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;// Esegui solo se chiamato direttamente&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}&#10;&#10;export default normalizeStepQuestions;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firebase.cjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firebase.cjs" />
              <option name="updatedContent" value="module.exports = {&#10;  firebaseConfig: {&#10;    apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;    authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;    projectId: &quot;curiow-432ed&quot;,&#10;    storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;    messagingSenderId: &quot;115136967854&quot;,&#10;    appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;    measurementId: &quot;G-LF4YY7HHR3&quot;&#10;  }&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types.ts" />
              <option name="originalContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;  canManageChannels: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;// ---- Nuovi tipi contenuto Gem ----&#10;export interface MiniThreadContentStep {&#10;  title: string;&#10;  body: string;&#10;}&#10;export interface MiniThreadContent {&#10;  template: 'mini_thread';&#10;  steps: MiniThreadContentStep[];&#10;  payoff: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface MythVsRealityContent {&#10;  template: 'myth_vs_reality';&#10;  myth: string;&#10;  reality: string;&#10;  evidence: string;&#10;  why_it_matters: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface FactCardContent {&#10;  template: 'fact_card';&#10;  hook: string;&#10;  facts: string[];&#10;  implication: string;&#10;  action: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface ProsConsContent {&#10;  template: 'pros_cons';&#10;  scenario: string;&#10;  pros: string[];&#10;  cons: string[];&#10;  advice: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface QuickExplainerContent {&#10;  template: 'quick_explainer';&#10;  analogy: string;&#10;  definition: string;&#10;  example: string;&#10;  anti_example: string;&#10;  takeaway: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export type GemContent =&#10;  MiniThreadContent |&#10;  MythVsRealityContent |&#10;  FactCardContent |&#10;  ProsConsContent |&#10;  QuickExplainerContent |&#10;  { template: string; summary?: string; [key: string]: any };&#10;// ---- fine nuovi tipi ----&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  /** @deprecated Spostato in content.description */&#10;  description?: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[]; // legacy / backdoor&#10;  search_results?: Source[]; // nuovo campo principale per le fonti&#10;  content?: GemContent; // nuovo campo opzionale per template strutturati (incluso description a livello content)&#10;  channelId?: string; // opzionale: riferimento al canale&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;    emoji?: string; // opzionale: emoji per visualizzazione UI&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}&#10;&#10;// Tipo per i modelli LLM e i loro costi&#10;export interface LLMModel {&#10;  id: string;&#10;  name: string; // Nome del modello (es. &quot;gpt-4&quot;, &quot;claude-3-opus&quot;)&#10;  inputCostPerMillion: number; // Costo per milione di token di input in dollari&#10;  outputCostPerMillion: number; // Costo per milione di token di output in dollari&#10;  createdAt?: Date;&#10;  updatedAt?: Date;&#10;  isActive?: boolean; // Per disabilitare modelli obsoleti&#10;}&#10;" />
              <option name="updatedContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;  canManageChannels: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;// ---- Nuovi tipi contenuto Gem ----&#10;export interface MiniThreadContentStep {&#10;  title: string;&#10;  body: string;&#10;}&#10;export interface MiniThreadContent {&#10;  template: 'mini_thread';&#10;  steps: MiniThreadContentStep[];&#10;  payoff: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface MythVsRealityContent {&#10;  template: 'myth_vs_reality';&#10;  myth: string;&#10;  reality: string;&#10;  evidence: string;&#10;  why_it_matters: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface FactCardContent {&#10;  template: 'fact_card';&#10;  hook: string;&#10;  facts: string[];&#10;  implication: string;&#10;  action: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface ProsConsContent {&#10;  template: 'pros_cons';&#10;  scenario: string;&#10;  pros: string[];&#10;  cons: string[];&#10;  advice: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface QuickExplainerContent {&#10;  template: 'quick_explainer';&#10;  analogy: string;&#10;  definition: string;&#10;  example: string;&#10;  anti_example: string;&#10;  takeaway: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export type GemContent =&#10;  MiniThreadContent |&#10;  MythVsRealityContent |&#10;  FactCardContent |&#10;  ProsConsContent |&#10;  QuickExplainerContent |&#10;  { template: string; summary?: string; [key: string]: any };&#10;// ---- fine nuovi tipi ----&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  /** @deprecated Spostato in content.description */&#10;  description?: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[]; // legacy / backdoor&#10;  search_results?: Source[]; // nuovo campo principale per le fonti&#10;  content?: GemContent; // nuovo campo opzionale per template strutturati (incluso description a livello content)&#10;  channelId?: string; // opzionale: riferimento al canale&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;    emoji?: string; // opzionale: emoji per visualizzazione UI&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}&#10;&#10;// Tipo per i modelli LLM e i loro costi&#10;export interface LLMModel {&#10;  id: string;&#10;  name: string; // Nome del modello (es. &quot;gpt-4&quot;, &quot;claude-3-opus&quot;)&#10;  inputCostPerMilion: number; // Costo per milione di token di input in dollari (nome corretto dal DB)&#10;  outputCostPerMilion: number; // Costo per milione di token di output in dollari (nome corretto dal DB)&#10;  createdAt?: Date;&#10;  updatedAt?: Date;&#10;  isActive?: boolean; // Per disabilitare modelli obsoleti&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>