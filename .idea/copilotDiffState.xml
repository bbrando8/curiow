<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemDetailView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemDetailView.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon } from './icons';&#10;import Header from './Header';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;}&#10;&#10;const UserQuestionItem: React.FC&lt;{ userQuestion: UserQuestion }&gt; = ({ userQuestion }) =&gt; (&#10;    &lt;div className=&quot;mt-4 p-4 bg-slate-100 dark:bg-slate-800 rounded-lg&quot;&gt;&#10;        &lt;p className=&quot;font-semibold text-sm text-slate-600 dark:text-slate-300&quot;&gt;Domanda: &lt;span className=&quot;font-normal&quot;&gt;{userQuestion.question}&lt;/span&gt;&lt;/p&gt;&#10;        &lt;div className=&quot;mt-2 text-sm text-slate-800 dark:text-slate-200&quot;&gt;&#10;            {userQuestion.isGenerating ? (&#10;                 &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4 animate-pulse text-indigo-400&quot; /&gt;&#10;                    &lt;span&gt;Generazione risposta...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{userQuestion.answer}&lt;/p&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  // --- Rendering contenuti template ---&#10;  const renderMiniThread = (content: any) =&gt; {&#10;    const steps = Array.isArray(content.steps) ? content.steps : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {steps.map((s: any, idx: number) =&gt; (&#10;            &lt;div key={idx} className=&quot;relative pl-10&quot;&gt;&#10;              &lt;div className=&quot;absolute left-0 top-0 flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 rounded-full bg-indigo-600 text-white flex items-center justify-center text-sm font-semibold shadow&quot;&gt;{idx+1}&lt;/div&gt;&#10;                {idx &lt; steps.length -1 &amp;&amp; &lt;div className=&quot;flex-1 w-px bg-gradient-to-b from-indigo-400 via-indigo-300 to-transparent mt-1&quot;/&gt;}&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-slate-900 dark:text-white&quot;&gt;{s.title}&lt;/h3&gt;&#10;              &lt;p className=&quot;mt-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{s.body}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        {content.payoff &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-emerald-500/10 via-emerald-500/5 to-indigo-500/10 border border-emerald-400/30 dark:border-emerald-400/20&quot;&gt;&#10;            &lt;div className=&quot;flex items-start&quot;&gt;&#10;              &lt;SparklesIcon className=&quot;w-6 h-6 text-emerald-500 mr-3 mt-0.5&quot;/&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-sm uppercase tracking-wide font-semibold text-emerald-600 dark:text-emerald-400&quot;&gt;Payoff&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1 font-medium text-slate-900 dark:text-slate-100 leading-relaxed&quot;&gt;{content.payoff}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderMythVsReality = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-600 dark:text-rose-300&quot;&gt;Mito&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-rose-800 dark:text-rose-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.myth}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 relative overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;absolute inset-0 pointer-events-none bg-[radial-gradient(circle_at_80%_20%,rgba(16,185,129,0.15),transparent_60%)]&quot;/&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-600 dark:text-emerald-300&quot;&gt;Realtà&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-emerald-800 dark:text-emerald-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.reality}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.evidence &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Evidenze&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.evidence}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.why_it_matters &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-violet-500/10 to-fuchsia-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Perché conta&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 leading-relaxed whitespace-pre-wrap&quot;&gt;{content.why_it_matters}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderFactCard = (content: any) =&gt; {&#10;    const facts: string[] = Array.isArray(content.facts) ? content.facts : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-5&quot;&gt;&#10;        {content.hook &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-br from-indigo-600 to-violet-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-semibold tracking-wide uppercase opacity-90&quot;&gt;Dato Chiave&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-lg leading-snug font-bold whitespace-pre-wrap&quot;&gt;{content.hook}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {facts.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;grid gap-3&quot;&gt;&#10;            {facts.map((f, i) =&gt; (&#10;              &lt;div key={i} className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex&quot;&gt;&#10;                &lt;div className=&quot;mr-3 mt-0.5 text-indigo-500 font-semibold text-xs&quot;&gt;FACT {i+1}&lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{f}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.implication &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-amber-700 dark:text-amber-300&quot;&gt;Implicazione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-amber-900 dark:text-amber-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.implication}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.action &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Azione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm font-medium text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.action}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderProsCons = (content: any) =&gt; {&#10;    const pros: string[] = Array.isArray(content.pros) ? content.pros : [];&#10;    const cons: string[] = Array.isArray(content.cons) ? content.cons : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.scenario &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Scenario&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.scenario}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Pro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-emerald-900 dark:text-emerald-100&quot;&gt;&#10;              {pros.map((p,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-emerald-500 font-semibold&quot;&gt;+&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{p}&lt;/span&gt;&lt;/li&gt;))}&#10;              {pros.length===0 &amp;&amp; &lt;li className=&quot;text-emerald-700/70 dark:text-emerald-300/60 italic&quot;&gt;Nessun pro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Contro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-rose-900 dark:text-rose-100&quot;&gt;&#10;              {cons.map((c,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-rose-500 font-semibold&quot;&gt;-&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{c}&lt;/span&gt;&lt;/li&gt;))}&#10;              {cons.length===0 &amp;&amp; &lt;li className=&quot;text-rose-700/70 dark:text-rose-300/60 italic&quot;&gt;Nessun contro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.advice &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-sky-500/10 to-emerald-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Sintesi / Consiglio&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.advice}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderQuickExplainer = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.analogy &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-indigo-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide opacity-80&quot;&gt;Analogia Guida&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-lg font-bold leading-snug whitespace-pre-wrap&quot;&gt;{content.analogy}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.definition &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Definizione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.definition}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          {content.example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Esempio&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {content.anti_example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Non È Questo&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-rose-900 dark:text-rose-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.anti_example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        {content.takeaway &amp;&amp; (&#10;            &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10 border border-fuchsia-300/30 dark:border-fuchsia-300/20&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-fuchsia-600 dark:text-fuchsia-300&quot;&gt;Takeaway&lt;/p&gt;&#10;              &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.takeaway}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return renderMiniThread(content);&#10;      case 'myth_vs_reality':&#10;        return renderMythVsReality(content);&#10;      case 'fact_card':&#10;        return renderFactCard(content);&#10;      case 'pros_cons':&#10;        return renderProsCons(content);&#10;      case 'quick_explainer':&#10;        return renderQuickExplainer(content);&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  // --- fine rendering contenuti template ---&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={onSelectFilter}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;        /&gt;&#10;        {/* Barra di navigazione locale sostituita: non sticky per evitare overlay */}&#10;        &lt;div className=&quot;flex items-center p-2 sm:p-4 bg-slate-50 dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;button&#10;                onClick={onBack}&#10;                className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                aria-label=&quot;Torna indietro&quot;&#10;            &gt;&#10;                &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;            &lt;/button&gt;&#10;            &lt;span className=&quot;ml-4 font-semibold text-slate-800 dark:text-slate-200 truncate&quot;&gt;{gem.topic}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;article&gt;&#10;            &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover md:rounded-b-lg&quot; /&gt;&#10;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                &lt;h1 className=&quot;text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;                &#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={handleShare}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Contenuto descrizione o template */}&#10;                {(() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                  &lt;p className=&quot;mt-6 text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{gem.description}&lt;/p&gt;&#10;                ); })()}&#10;&#10;                {/* Fonti: usa search_results con fallback a sources */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-8 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon } from './icons';&#10;import Header from './Header';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;}&#10;&#10;const UserQuestionItem: React.FC&lt;{ userQuestion: UserQuestion }&gt; = ({ userQuestion }) =&gt; (&#10;    &lt;div className=&quot;mt-4 p-4 bg-slate-100 dark:bg-slate-800 rounded-lg&quot;&gt;&#10;        &lt;p className=&quot;font-semibold text-sm text-slate-600 dark:text-slate-300&quot;&gt;Domanda: &lt;span className=&quot;font-normal&quot;&gt;{userQuestion.question}&lt;/span&gt;&lt;/p&gt;&#10;        &lt;div className=&quot;mt-2 text-sm text-slate-800 dark:text-slate-200&quot;&gt;&#10;            {userQuestion.isGenerating ? (&#10;                 &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4 animate-pulse text-indigo-400&quot; /&gt;&#10;                    &lt;span&gt;Generazione risposta...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{userQuestion.answer}&lt;/p&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  // --- Rendering contenuti template ---&#10;  const renderMiniThread = (content: any) =&gt; {&#10;    const steps = Array.isArray(content.steps) ? content.steps : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {steps.map((s: any, idx: number) =&gt; (&#10;            &lt;div key={idx} className=&quot;relative pl-10&quot;&gt;&#10;              &lt;div className=&quot;absolute left-0 top-0 flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 rounded-full bg-indigo-600 text-white flex items-center justify-center text-sm font-semibold shadow&quot;&gt;{idx+1}&lt;/div&gt;&#10;                {idx &lt; steps.length -1 &amp;&amp; &lt;div className=&quot;flex-1 w-px bg-gradient-to-b from-indigo-400 via-indigo-300 to-transparent mt-1&quot;/&gt;}&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-slate-900 dark:text-white&quot;&gt;{s.title}&lt;/h3&gt;&#10;              &lt;p className=&quot;mt-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{s.body}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        {content.payoff &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-emerald-500/10 via-emerald-500/5 to-indigo-500/10 border border-emerald-400/30 dark:border-emerald-400/20&quot;&gt;&#10;            &lt;div className=&quot;flex items-start&quot;&gt;&#10;              &lt;SparklesIcon className=&quot;w-6 h-6 text-emerald-500 mr-3 mt-0.5&quot;/&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-sm uppercase tracking-wide font-semibold text-emerald-600 dark:text-emerald-400&quot;&gt;Payoff&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1 font-medium text-slate-900 dark:text-slate-100 leading-relaxed&quot;&gt;{content.payoff}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderMythVsReality = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-600 dark:text-rose-300&quot;&gt;Mito&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-rose-800 dark:text-rose-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.myth}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 relative overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;absolute inset-0 pointer-events-none bg-[radial-gradient(circle_at_80%_20%,rgba(16,185,129,0.15),transparent_60%)]&quot;/&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-600 dark:text-emerald-300&quot;&gt;Realtà&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-emerald-800 dark:text-emerald-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.reality}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.evidence &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Evidenze&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.evidence}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.why_it_matters &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-violet-500/10 to-fuchsia-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Perché conta&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 leading-relaxed whitespace-pre-wrap&quot;&gt;{content.why_it_matters}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderFactCard = (content: any) =&gt; {&#10;    const facts: string[] = Array.isArray(content.facts) ? content.facts : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-5&quot;&gt;&#10;        {content.hook &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-br from-indigo-600 to-violet-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-semibold tracking-wide uppercase opacity-90&quot;&gt;Dato Chiave&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-lg leading-snug font-bold whitespace-pre-wrap&quot;&gt;{content.hook}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {facts.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;grid gap-3&quot;&gt;&#10;            {facts.map((f, i) =&gt; (&#10;              &lt;div key={i} className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex&quot;&gt;&#10;                &lt;div className=&quot;mr-3 mt-0.5 text-indigo-500 font-semibold text-xs&quot;&gt;FACT {i+1}&lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{f}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.implication &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-amber-700 dark:text-amber-300&quot;&gt;Implicazione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-amber-900 dark:text-amber-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.implication}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.action &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Azione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm font-medium text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.action}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderProsCons = (content: any) =&gt; {&#10;    const pros: string[] = Array.isArray(content.pros) ? content.pros : [];&#10;    const cons: string[] = Array.isArray(content.cons) ? content.cons : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.scenario &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Scenario&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.scenario}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Pro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-emerald-900 dark:text-emerald-100&quot;&gt;&#10;              {pros.map((p,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-emerald-500 font-semibold&quot;&gt;+&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{p}&lt;/span&gt;&lt;/li&gt;))}&#10;              {pros.length===0 &amp;&amp; &lt;li className=&quot;text-emerald-700/70 dark:text-emerald-300/60 italic&quot;&gt;Nessun pro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Contro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-rose-900 dark:text-rose-100&quot;&gt;&#10;              {cons.map((c,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-rose-500 font-semibold&quot;&gt;-&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{c}&lt;/span&gt;&lt;/li&gt;))}&#10;              {cons.length===0 &amp;&amp; &lt;li className=&quot;text-rose-700/70 dark:text-rose-300/60 italic&quot;&gt;Nessun contro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.advice &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-sky-500/10 to-emerald-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Sintesi / Consiglio&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.advice}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderQuickExplainer = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.analogy &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-indigo-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide opacity-80&quot;&gt;Analogia Guida&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-lg font-bold leading-snug whitespace-pre-wrap&quot;&gt;{content.analogy}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.definition &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Definizione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.definition}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          {content.example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Esempio&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {content.anti_example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Non È Questo&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-rose-900 dark:text-rose-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.anti_example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        {content.takeaway &amp;&amp; (&#10;            &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10 border border-fuchsia-300/30 dark:border-fuchsia-300/20&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-fuchsia-600 dark:text-fuchsia-300&quot;&gt;Takeaway&lt;/p&gt;&#10;              &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.takeaway}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return renderMiniThread(content);&#10;      case 'myth_vs_reality':&#10;        return renderMythVsReality(content);&#10;      case 'fact_card':&#10;        return renderFactCard(content);&#10;      case 'pros_cons':&#10;        return renderProsCons(content);&#10;      case 'quick_explainer':&#10;        return renderQuickExplainer(content);&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  // --- fine rendering contenuti template ---&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={onBack}&#10;        /&gt;&#10;        {/* Rimossa barra di navigazione locale */}&#10;        &lt;article&gt;&#10;            &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover md:rounded-b-lg&quot; /&gt;&#10;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                &lt;h1 className=&quot;text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;                &#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={handleShare}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Contenuto descrizione o template */}&#10;                {(() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                  &lt;p className=&quot;mt-6 text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{gem.description}&lt;/p&gt;&#10;                ); })()}&#10;&#10;                {/* Fonti: usa search_results con fallback a sources */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-8 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header.tsx" />
              <option name="originalContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { User, Filter, Channel } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, ChevronDownIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate?: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  showFilters?: boolean;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;  initialFiltersOpen?: boolean; // ignorato: menu parte sempre chiuso ora&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({&#10;  isLoggedIn,&#10;  user,&#10;  onLogin,&#10;  onLogout,&#10;  onNavigate,&#10;  showFilters = false,&#10;  selectedFilter,&#10;  onSelectFilter,&#10;  channels,&#10;  // initialFiltersOpen // non usato&#10;}) =&gt; {&#10;  const [showProfileMenu, setShowProfileMenu] = useState(false);&#10;  const [filtersOpen, setFiltersOpen] = useState(false);&#10;  const [fadeState, setFadeState] = useState&lt;'closed' | 'opening' | 'open' | 'closing'&gt;('closed');&#10;  const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const dropdownRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const permissions = useUserPermissions(user);&#10;&#10;  const openFilters = () =&gt; {&#10;    if (fadeState === 'open' || fadeState === 'opening') return;&#10;    setFiltersOpen(true);&#10;    setFadeState('opening');&#10;    requestAnimationFrame(() =&gt; setFadeState('open'));&#10;  };&#10;  const startCloseFilters = () =&gt; {&#10;    if (fadeState === 'closing' || fadeState === 'closed') return;&#10;    setFadeState('closing');&#10;    setTimeout(() =&gt; {&#10;      setFadeState('closed');&#10;      setFiltersOpen(false);&#10;    }, 160); // durata animazione leggermente &gt; 150ms&#10;  };&#10;  const toggleFilters = () =&gt; {&#10;    if (fadeState === 'closed') openFilters(); else startCloseFilters();&#10;  };&#10;  const closeFilters = () =&gt; startCloseFilters();&#10;&#10;  // Gestione click fuori per menu profilo&#10;  useEffect(() =&gt; {&#10;    const handleClickOutside = (event: MouseEvent) =&gt; {&#10;      if (menuRef.current &amp;&amp; !menuRef.current.contains(event.target as Node)) {&#10;        setShowProfileMenu(false);&#10;      }&#10;      if (fadeState !== 'closed' &amp;&amp; dropdownRef.current &amp;&amp; !dropdownRef.current.contains(event.target as Node)) {&#10;        // se clic fuori dal pannello e non sul bottone toggle, chiudi&#10;        const toggleBtn = document.getElementById('toggle-canali-btn');&#10;        if (toggleBtn &amp;&amp; toggleBtn.contains(event.target as Node)) return;&#10;        closeFilters();&#10;      }&#10;    };&#10;    document.addEventListener('mousedown', handleClickOutside);&#10;    return () =&gt; document.removeEventListener('mousedown', handleClickOutside);&#10;  }, [fadeState]);&#10;&#10;  // Chiudi con ESC&#10;  useEffect(() =&gt; {&#10;    const handleKey = (e: KeyboardEvent) =&gt; { if (e.key === 'Escape') { setShowProfileMenu(false); closeFilters(); } };&#10;    window.addEventListener('keydown', handleKey);&#10;    return () =&gt; window.removeEventListener('keydown', handleKey);&#10;  }, []);&#10;&#10;  const handleMenuItemClick = (view: 'profile' | 'dashboard' | 'saved' | 'feed') =&gt; {&#10;    setShowProfileMenu(false);&#10;    if (onNavigate) onNavigate(view);&#10;  };&#10;&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;&#10;    const isActive = selectedFilter &amp;&amp; (&#10;      (filter.type === 'all' &amp;&amp; selectedFilter.type === 'all') ||&#10;      (filter.type === 'favorites' &amp;&amp; selectedFilter.type === 'favorites') ||&#10;      (filter.type === 'channel' &amp;&amp; selectedFilter.type === 'channel' &amp;&amp; filter.value === selectedFilter.value) ||&#10;      (filter.type === 'topic' &amp;&amp; selectedFilter.type === 'topic' &amp;&amp; filter.value === selectedFilter.value)&#10;    );&#10;&#10;    if (isActive) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-sm`;&#10;    }&#10;    return `${baseClass} bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600`;&#10;  };&#10;&#10;  const selectedFilterLabel = (() =&gt; {&#10;    if (!selectedFilter) return '';&#10;    switch (selectedFilter.type) {&#10;      case 'all': return 'Tutti';&#10;      case 'favorites': return '♥ Preferiti';&#10;      case 'channel': {&#10;        const ch = channels?.find(c =&gt; c.id === selectedFilter.value);&#10;        return ch ? ch.name : 'Channel';&#10;      }&#10;      case 'topic': return selectedFilter.value || 'Topic';&#10;      case 'tag': return selectedFilter.value || 'Tag';&#10;      default: return '';&#10;    }&#10;  })();&#10;&#10;  const handleSelectAndClose = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    closeFilters();&#10;  };&#10;&#10;  const isPanelVisible = fadeState !== 'closed';&#10;  const panelAnimationClasses =&#10;    fadeState === 'opening' ? 'opacity-0 -translate-y-1 scale-95' :&#10;    fadeState === 'open' ? 'opacity-100 translate-y-0 scale-100' :&#10;    fadeState === 'closing' ? 'opacity-0 -translate-y-1 scale-95' : '';&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;header className=&quot;sticky top-0 z-30 bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700&quot;&gt;&#10;        &lt;div className=&quot;max-w-xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;            {/* Logo */}&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; onNavigate &amp;&amp; onNavigate('feed')}&#10;                className=&quot;flex items-center space-x-2 text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 transition-colors&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-8 h-8&quot; /&gt;&#10;                &lt;span className=&quot;text-xl font-bold&quot;&gt;Curiow&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            {/* Azioni utente */}&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              {isLoggedIn ? (&#10;                &lt;div className=&quot;relative&quot; ref={menuRef}&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowProfileMenu(p =&gt; !p)}&#10;                    className=&quot;flex items-center space-x-2 p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors&quot;&#10;                    aria-label=&quot;Menu profilo&quot;&#10;                  &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-8 h-8&quot; /&gt;&#10;                    &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${showProfileMenu ? 'rotate-180' : ''}`} /&gt;&#10;                  &lt;/button&gt;&#10;                  {showProfileMenu &amp;&amp; (&#10;                    &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700 py-1 z-40&quot;&gt;&#10;                      &lt;div className=&quot;px-4 py-2 border-b border-slate-200 dark:border-slate-700&quot;&gt;&#10;                        &lt;p className=&quot;text-sm font-medium text-slate-900 dark:text-white truncate max-w-full&quot;&gt;{user?.name || user?.email || 'Utente'}&lt;/p&gt;&#10;                        &lt;p className=&quot;text-xs text-slate-500 dark:text-slate-400 truncate max-w-full&quot;&gt;{user?.email}&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;button onClick={() =&gt; handleMenuItemClick('saved')} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-4 h-4 mr-3&quot; /&gt; Salvati&#10;                      &lt;/button&gt;&#10;                      &lt;button onClick={() =&gt; handleMenuItemClick('profile')} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                        &lt;UserCircleIcon className=&quot;w-4 h-4 mr-3&quot; /&gt; Profilo&#10;                      &lt;/button&gt;&#10;                      {permissions.canManageContent &amp;&amp; (&#10;                        &lt;button onClick={() =&gt; handleMenuItemClick('dashboard')} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                          &lt;Cog6ToothIcon className=&quot;w-4 h-4 mr-3&quot; /&gt; Admin&#10;                        &lt;/button&gt;&#10;                      )}&#10;                      &lt;div className=&quot;border-t border-slate-200 dark:border-slate-700 mt-1 pt-1&quot;&gt;&#10;                        &lt;button onClick={onLogout} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                          Logout&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;button onClick={onLogin} className=&quot;px-4 py-2 bg-indigo-600 text-white text-sm font-semibold rounded-lg hover:bg-indigo-700 transition-colors&quot;&gt;Accedi&lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          {showFilters &amp;&amp; onSelectFilter &amp;&amp; (&#10;            &lt;div className=&quot;relative py-2&quot;&gt;&#10;              &lt;button&#10;                id=&quot;toggle-canali-btn&quot;&#10;                onClick={toggleFilters}&#10;                aria-expanded={fadeState === 'open' || fadeState === 'opening'}&#10;                aria-controls=&quot;canali-panel&quot;&#10;                className=&quot;w-full px-4 py-2 text-slate-600 dark:text-slate-300 rounded-lg flex items-center justify-center gap-2 text-sm font-medium hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500/40&quot;&#10;              &gt;&#10;                &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${(fadeState === 'open' || fadeState === 'opening') ? 'rotate-180' : ''}`} /&gt; Canali{(fadeState === 'closed') &amp;&amp; selectedFilterLabel ? ` · ${selectedFilterLabel}` : ''}&#10;              &lt;/button&gt;&#10;              {isPanelVisible &amp;&amp; (&#10;                &lt;div&#10;                  id=&quot;canali-panel&quot;&#10;                  ref={dropdownRef}&#10;                  className=&quot;absolute left-0 right-0 mt-2 z-40&quot;&#10;                &gt;&#10;                  &lt;div className={`rounded-xl border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 shadow-xl p-4 transition-all duration-150 ease-out origin-top ${panelAnimationClasses}`}&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-3&quot;&gt;&#10;                      &lt;h3 className=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Canali&lt;/h3&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex flex-wrap gap-2 max-h-56 overflow-auto pr-1&quot;&gt;&#10;                      &lt;button onClick={() =&gt; handleSelectAndClose({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                      {isLoggedIn &amp;&amp; (&#10;                        &lt;button onClick={() =&gt; handleSelectAndClose({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;♥ Preferiti&lt;/button&gt;&#10;                      )}&#10;                      {channels &amp;&amp; channels.map(channel =&gt; (&#10;                        &lt;button&#10;                          key={channel.id}&#10;                          onClick={() =&gt; handleSelectAndClose({ type: 'channel', value: channel.id })}&#10;                          className={getButtonClass({ type: 'channel', value: channel.id })}&#10;                        &gt;&#10;                          {channel.name}&#10;                        &lt;/button&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/header&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default Header;&#10;" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { User, Filter, Channel } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, ChevronDownIcon, ChevronLeftIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate?: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  showFilters?: boolean;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;  initialFiltersOpen?: boolean; // ignorato: menu parte sempre chiuso ora&#10;  onBack?: () =&gt; void; // nuovo per GemDetailView&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({&#10;  isLoggedIn,&#10;  user,&#10;  onLogin,&#10;  onLogout,&#10;  onNavigate,&#10;  showFilters = false,&#10;  selectedFilter,&#10;  onSelectFilter,&#10;  channels,&#10;  onBack,&#10;  // initialFiltersOpen // non usato&#10;}) =&gt; {&#10;  const [showProfileMenu, setShowProfileMenu] = useState(false);&#10;  const [filtersOpen, setFiltersOpen] = useState(false);&#10;  const [fadeState, setFadeState] = useState&lt;'closed' | 'opening' | 'open' | 'closing'&gt;('closed');&#10;  const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const dropdownRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const permissions = useUserPermissions(user);&#10;&#10;  const openFilters = () =&gt; {&#10;    if (fadeState === 'open' || fadeState === 'opening') return;&#10;    setFiltersOpen(true);&#10;    setFadeState('opening');&#10;    requestAnimationFrame(() =&gt; setFadeState('open'));&#10;  };&#10;  const startCloseFilters = () =&gt; {&#10;    if (fadeState === 'closing' || fadeState === 'closed') return;&#10;    setFadeState('closing');&#10;    setTimeout(() =&gt; {&#10;      setFadeState('closed');&#10;      setFiltersOpen(false);&#10;    }, 160); // durata animazione leggermente &gt; 150ms&#10;  };&#10;  const toggleFilters = () =&gt; {&#10;    if (fadeState === 'closed') openFilters(); else startCloseFilters();&#10;  };&#10;  const closeFilters = () =&gt; startCloseFilters();&#10;&#10;  // Gestione click fuori per menu profilo&#10;  useEffect(() =&gt; {&#10;    const handleClickOutside = (event: MouseEvent) =&gt; {&#10;      if (menuRef.current &amp;&amp; !menuRef.current.contains(event.target as Node)) {&#10;        setShowProfileMenu(false);&#10;      }&#10;      if (fadeState !== 'closed' &amp;&amp; dropdownRef.current &amp;&amp; !dropdownRef.current.contains(event.target as Node)) {&#10;        // se clic fuori dal pannello e non sul bottone toggle, chiudi&#10;        const toggleBtn = document.getElementById('toggle-canali-btn');&#10;        if (toggleBtn &amp;&amp; toggleBtn.contains(event.target as Node)) return;&#10;        closeFilters();&#10;      }&#10;    };&#10;    document.addEventListener('mousedown', handleClickOutside);&#10;    return () =&gt; document.removeEventListener('mousedown', handleClickOutside);&#10;  }, [fadeState]);&#10;&#10;  // Chiudi con ESC&#10;  useEffect(() =&gt; {&#10;    const handleKey = (e: KeyboardEvent) =&gt; { if (e.key === 'Escape') { setShowProfileMenu(false); closeFilters(); } };&#10;    window.addEventListener('keydown', handleKey);&#10;    return () =&gt; window.removeEventListener('keydown', handleKey);&#10;  }, []);&#10;&#10;  const handleMenuItemClick = (view: 'profile' | 'dashboard' | 'saved' | 'feed') =&gt; {&#10;    setShowProfileMenu(false);&#10;    if (onNavigate) onNavigate(view);&#10;  };&#10;&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;&#10;    const isActive = selectedFilter &amp;&amp; (&#10;      (filter.type === 'all' &amp;&amp; selectedFilter.type === 'all') ||&#10;      (filter.type === 'favorites' &amp;&amp; selectedFilter.type === 'favorites') ||&#10;      (filter.type === 'channel' &amp;&amp; selectedFilter.type === 'channel' &amp;&amp; filter.value === selectedFilter.value) ||&#10;      (filter.type === 'topic' &amp;&amp; selectedFilter.type === 'topic' &amp;&amp; filter.value === selectedFilter.value)&#10;    );&#10;&#10;    if (isActive) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-sm`;&#10;    }&#10;    return `${baseClass} bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600`;&#10;  };&#10;&#10;  const selectedFilterLabel = (() =&gt; {&#10;    if (!selectedFilter) return '';&#10;    switch (selectedFilter.type) {&#10;      case 'all': return 'Tutti';&#10;      case 'favorites': return '♥ Preferiti';&#10;      case 'channel': {&#10;        const ch = channels?.find(c =&gt; c.id === selectedFilter.value);&#10;        return ch ? ch.name : 'Channel';&#10;      }&#10;      case 'topic': return selectedFilter.value || 'Topic';&#10;      case 'tag': return selectedFilter.value || 'Tag';&#10;      default: return '';&#10;    }&#10;  })();&#10;&#10;  const handleSelectAndClose = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    closeFilters();&#10;  };&#10;&#10;  const isPanelVisible = fadeState !== 'closed';&#10;  const panelAnimationClasses =&#10;    fadeState === 'opening' ? 'opacity-0 -translate-y-1 scale-95' :&#10;    fadeState === 'open' ? 'opacity-100 translate-y-0 scale-100' :&#10;    fadeState === 'closing' ? 'opacity-0 -translate-y-1 scale-95' : '';&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;header className=&quot;sticky top-0 z-30 bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700&quot;&gt;&#10;        &lt;div className=&quot;max-w-xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;            {/* Logo */}&#10;            &lt;div className=&quot;flex items-center&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; onNavigate &amp;&amp; onNavigate('feed')}&#10;                className=&quot;flex items-center space-x-2 text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 transition-colors&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-8 h-8&quot; /&gt;&#10;                &lt;span className=&quot;text-xl font-bold&quot;&gt;Curiow&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;            {/* Azioni utente */}&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              {isLoggedIn ? (&#10;                &lt;div className=&quot;relative&quot; ref={menuRef}&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowProfileMenu(p =&gt; !p)}&#10;                    className=&quot;flex items-center space-x-2 p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors&quot;&#10;                    aria-label=&quot;Menu profilo&quot;&#10;                  &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-8 h-8&quot; /&gt;&#10;                    &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${showProfileMenu ? 'rotate-180' : ''}`} /&gt;&#10;                  &lt;/button&gt;&#10;                  {showProfileMenu &amp;&amp; (&#10;                    &lt;div className=&quot;absolute right-0 mt-2 w-48 bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700 py-1 z-40&quot;&gt;&#10;                      &lt;div className=&quot;px-4 py-2 border-b border-slate-200 dark:border-slate-700&quot;&gt;&#10;                        &lt;p className=&quot;text-sm font-medium text-slate-900 dark:text-white truncate max-w-full&quot;&gt;{user?.name || user?.email || 'Utente'}&lt;/p&gt;&#10;                        &lt;p className=&quot;text-xs text-slate-500 dark:text-slate-400 truncate max-w-full&quot;&gt;{user?.email}&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;button onClick={() =&gt; handleMenuItemClick('saved')} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-4 h-4 mr-3&quot; /&gt; Salvati&#10;                      &lt;/button&gt;&#10;                      &lt;button onClick={() =&gt; handleMenuItemClick('profile')} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                        &lt;UserCircleIcon className=&quot;w-4 h-4 mr-3&quot; /&gt; Profilo&#10;                      &lt;/button&gt;&#10;                      {permissions.canManageContent &amp;&amp; (&#10;                        &lt;button onClick={() =&gt; handleMenuItemClick('dashboard')} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                          &lt;Cog6ToothIcon className=&quot;w-4 h-4 mr-3&quot; /&gt; Admin&#10;                        &lt;/button&gt;&#10;                      )}&#10;                      &lt;div className=&quot;border-t border-slate-200 dark:border-slate-700 mt-1 pt-1&quot;&gt;&#10;                        &lt;button onClick={onLogout} className=&quot;flex items-center w-full px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&gt;&#10;                          Logout&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;button onClick={onLogin} className=&quot;px-4 py-2 bg-indigo-600 text-white text-sm font-semibold rounded-lg hover:bg-indigo-700 transition-colors&quot;&gt;Accedi&lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          {showFilters &amp;&amp; onSelectFilter &amp;&amp; (&#10;            &lt;div className=&quot;relative py-2&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                {onBack &amp;&amp; (&#10;                  &lt;button&#10;                    onClick={onBack}&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                    className=&quot;shrink-0 w-11 h-11 md:w-10 md:h-10 flex items-center justify-center rounded-xl md:rounded-lg text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500/40&quot;&#10;                  &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                  &lt;/button&gt;&#10;                )}&#10;                &lt;button&#10;                  id=&quot;toggle-canali-btn&quot;&#10;                  onClick={toggleFilters}&#10;                  aria-expanded={fadeState === 'open' || fadeState === 'opening'}&#10;                  aria-controls=&quot;canali-panel&quot;&#10;                  className=&quot;w-full px-4 py-2 text-slate-600 dark:text-slate-300 rounded-lg flex items-center justify-center gap-2 text-sm font-medium hover:bg-slate-100 dark:hover:bg-slate-800 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500/40&quot;&#10;                &gt;&#10;                  &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${(fadeState === 'open' || fadeState === 'opening') ? 'rotate-180' : ''}`} /&gt;&#10;                  &lt;span&gt;Canali&lt;/span&gt;&#10;                  {fadeState === 'closed' &amp;&amp; selectedFilterLabel &amp;&amp; (&#10;                    &lt;span className=&quot;inline-flex items-center px-2 py-0.5 rounded-full text-xs font-semibold bg-indigo-100 text-indigo-700 dark:bg-indigo-800 dark:text-indigo-200 shadow-sm&quot;&gt;&#10;                      {selectedFilterLabel}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;              {isPanelVisible &amp;&amp; (&#10;                &lt;div&#10;                  id=&quot;canali-panel&quot;&#10;                  ref={dropdownRef}&#10;                  className=&quot;absolute left-0 right-0 mt-2 z-40&quot;&#10;                &gt;&#10;                  &lt;div className={`rounded-xl border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 shadow-xl p-4 transition-all duration-150 ease-out origin-top ${panelAnimationClasses}`}&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-3&quot;&gt;&#10;                      &lt;h3 className=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Canali&lt;/h3&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex flex-wrap gap-2 max-h-56 overflow-auto pr-1&quot;&gt;&#10;                      &lt;button onClick={() =&gt; handleSelectAndClose({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                      {isLoggedIn &amp;&amp; (&#10;                        &lt;button onClick={() =&gt; handleSelectAndClose({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;♥ Preferiti&lt;/button&gt;&#10;                      )}&#10;                      {channels &amp;&amp; channels.map(channel =&gt; (&#10;                        &lt;button&#10;                          key={channel.id}&#10;                          onClick={() =&gt; handleSelectAndClose({ type: 'channel', value: channel.id })}&#10;                          className={getButtonClass({ type: 'channel', value: channel.id })}&#10;                        &gt;&#10;                          {channel.name}&#10;                        &lt;/button&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/header&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default Header;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>