<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SectionQuestionsChat.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SectionQuestionsChat.css" />
              <option name="originalContent" value=".curiow-section-questions-chat {&#10;  position: fixed;&#10;  bottom: 1rem;&#10;  right: 1rem;&#10;  z-index: 9999;&#10;  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif;&#10;}&#10;&#10;.curiow-section-questions-chat .curiow-trigger {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: .5rem;&#10;  background: linear-gradient(135deg,#6366f1,#8b5cf6);&#10;  color: #fff;&#10;  padding: .75rem 1rem;&#10;  border-radius: 999px;&#10;  cursor: pointer;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,.18);&#10;  font-weight: 600;&#10;  transition: transform .15s ease, box-shadow .2s ease, background .3s ease;&#10;}&#10;.curiow-section-questions-chat .curiow-trigger:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 16px rgba(0,0,0,.25);&#10;}&#10;&#10;/* Overlay */&#10;.curiow-overlay {&#10;  position: fixed;&#10;  inset: 0;&#10;  background: rgba(15,23,42,0.35);&#10;  backdrop-filter: blur(2px);&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  padding: 0;&#10;  z-index: 9998;&#10;}&#10;&#10;/* Chat Container */&#10;.curiow-chat-container {&#10;  background: #ffffff;&#10;  width: 380px;&#10;  max-width: 100%;&#10;  height: 100%;&#10;  max-height: 100vh;&#10;  display: flex;&#10;  flex-direction: column;&#10;  box-shadow: -4px 0 16px -2px rgba(0,0,0,.25);&#10;  border-left: 1px solid #e2e8f0;&#10;  animation: slideIn .28s cubic-bezier(.4,0,.2,1);&#10;  position: relative;&#10;}&#10;@media (max-width: 640px) {&#10;  .curiow-chat-container { width: 100%; }&#10;}&#10;@keyframes slideIn {&#10;  from { transform: translateX(20px); opacity: 0; }&#10;  to { transform: translateX(0); opacity: 1; }&#10;}&#10;&#10;.curiow-header {&#10;  padding: .9rem 1rem .75rem;&#10;  border-bottom: 1px solid #e2e8f0;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  background: linear-gradient(90deg,#f8fafc,#f1f5f9);&#10;}&#10;.curiow-title { font-size: .95rem; font-weight: 600; color:#1e293b; }&#10;.curiow-close {&#10;  background: none;&#10;  border: none;&#10;  font-size: 1.25rem;&#10;  line-height: 1;&#10;  cursor: pointer;&#10;  color: #64748b;&#10;  padding: .25rem .4rem;&#10;  border-radius: .5rem;&#10;  transition: background .15s ease, color .2s;&#10;}&#10;.curiow-close:hover { background:#e2e8f0; color:#334155; }&#10;&#10;.curiow-content { flex: 1; display:flex; flex-direction:column; overflow:hidden; }&#10;.curiow-messages { flex:1; overflow-y:auto; padding: 1rem .9rem 1rem 1rem; display:flex; flex-direction:column; gap:.9rem; }&#10;.curiow-messages::-webkit-scrollbar { width:6px; }&#10;.curiow-messages::-webkit-scrollbar-track { background: transparent; }&#10;.curiow-messages::-webkit-scrollbar-thumb { background:#cbd5e1; border-radius:3px; }&#10;&#10;.curiow-message { background:#f1f5f9; border-radius: .85rem; padding:.75rem .85rem; font-size:.85rem; line-height:1.35; color:#334155; position:relative; }&#10;.curiow-message.loading { opacity:.7; }&#10;.curiow-message-question { font-weight:600; margin-bottom:.45rem; color:#1e293b; }&#10;.curiow-message-answer { white-space:pre-wrap; font-weight:400; }&#10;.curiow-message-loading { font-style:italic; margin-top:.4rem; font-size:.75rem; color:#475569; }&#10;.curiow-message-error { margin-top:.4rem; font-size:.75rem; color:#dc2626; font-weight:600; }&#10;&#10;.curiow-followups { margin-top:.7rem; padding-top:.6rem; border-top:1px solid #e2e8f0; display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-followups-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; }&#10;.curiow-followup { font-size:.7rem; background:#ffffff; padding:.45rem .55rem; border-radius:.65rem; border:1px solid #e2e8f0; cursor:pointer; line-height:1.2; color:#334155; transition: background .15s, border-color .2s; }&#10;.curiow-followup:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;&#10;.curiow-input-container { display:flex; gap:.6rem; padding:.65rem .85rem .75rem; border-top:1px solid #e2e8f0; background:#ffffff; }&#10;.curiow-input { flex:1; border:1px solid #cbd5e1; border-radius: .75rem; padding:.6rem .8rem; font-size:.8rem; outline:none; transition:border-color .2s, box-shadow .2s; }&#10;.curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.25); }&#10;.curiow-send { background:linear-gradient(135deg,#6366f1,#8b5cf6); color:#fff; border:none; border-radius:.75rem; padding:.55rem .85rem; cursor:pointer; display:flex; align-items:center; justify-content:center; transition:filter .2s ease, transform .15s ease; }&#10;.curiow-send:hover { filter:brightness(1.08); transform:translateY(-2px); }&#10;&#10;.curiow-initial-suggestions { padding: .4rem 1rem 1rem; display:flex; flex-direction:column; gap:1rem; overflow-y:auto; max-height:220px; }&#10;.curiow-suggestions-container { display:flex; flex-direction:column; gap:.55rem; }&#10;.curiow-suggestions-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; margin-bottom:.1rem; }&#10;.curiow-suggestion { display:flex; align-items:flex-start; gap:.55rem; background:#ffffff; border:1px solid #e2e8f0; padding:.55rem .65rem; border-radius:.8rem; cursor:pointer; transition: background .15s, border-color .2s; font-size:.75rem; line-height:1.2; color:#334155; }&#10;.curiow-suggestion:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;.curiow-suggestion-index { width:1.1rem; height:1.1rem; background:#6366f1; color:#fff; font-size:.6rem; display:flex; align-items:center; justify-content:center; border-radius:50%; font-weight:600; flex-shrink:0; margin-top:.1rem; }&#10;.curiow-suggestion-text { flex:1; }&#10;&#10;/* Small helper state when closed (just button) */&#10;.curiow-section-questions-chat:not(.open) .curiow-overlay { display:none; }&#10;&#10;/* Dark mode (usa media prefers-color-scheme) */&#10;@media (prefers-color-scheme: dark) {&#10;  .curiow-chat-container { background:#0f172a; border-left-color:#1e293b; }&#10;  .curiow-header { background:linear-gradient(90deg,#0f172a,#1e293b); border-bottom-color:#1e293b; }&#10;  .curiow-title { color:#e2e8f0; }&#10;  .curiow-close { color:#94a3b8; }&#10;  .curiow-close:hover { background:#1e293b; color:#f1f5f9; }&#10;  .curiow-message { background:#1e293b; color:#cbd5e1; }&#10;  .curiow-message-question { color:#f1f5f9; }&#10;  .curiow-message-loading { color:#94a3b8; }&#10;  .curiow-followup { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-followup:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-input-container { background:#0f172a; border-top-color:#1e293b; }&#10;  .curiow-input { background:#0f172a; border-color:#334155; color:#e2e8f0; }&#10;  .curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.35); }&#10;  .curiow-suggestion { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-suggestion:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-initial-suggestions { scrollbar-color:#334155 transparent; }&#10;  .curiow-messages::-webkit-scrollbar-thumb { background:#334155; }&#10;}&#10;&#10;" />
              <option name="updatedContent" value=".curiow-section-questions-chat {&#10;  position: fixed;&#10;  bottom: 1rem;&#10;  right: 1rem;&#10;  z-index: 9999;&#10;  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif;&#10;}&#10;&#10;.curiow-section-questions-chat .curiow-trigger {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: .5rem;&#10;  background: linear-gradient(135deg,#6366f1,#8b5cf6);&#10;  color: #fff;&#10;  padding: .75rem 1rem;&#10;  border-radius: 999px;&#10;  cursor: pointer;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,.18);&#10;  font-weight: 600;&#10;  transition: transform .15s ease, box-shadow .2s ease, background .3s ease;&#10;}&#10;.curiow-section-questions-chat .curiow-trigger:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 16px rgba(0,0,0,.25);&#10;}&#10;&#10;/* Overlay */&#10;.curiow-overlay {&#10;  position: fixed;&#10;  inset: 0;&#10;  background: rgba(15,23,42,0.35);&#10;  backdrop-filter: blur(2px);&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  padding: 0;&#10;  z-index: 9998;&#10;}&#10;&#10;/* Chat Container */&#10;.curiow-chat-container {&#10;  background: #ffffff;&#10;  width: 380px;&#10;  max-width: 100%;&#10;  height: 100%;&#10;  max-height: 100vh;&#10;  display: flex;&#10;  flex-direction: column;&#10;  box-shadow: -4px 0 16px -2px rgba(0,0,0,.25);&#10;  border-left: 1px solid #e2e8f0;&#10;  animation: slideIn .28s cubic-bezier(.4,0,.2,1);&#10;  position: relative;&#10;}&#10;@media (max-width: 640px) {&#10;  .curiow-chat-container { width: 100%; }&#10;}&#10;@keyframes slideIn {&#10;  from { transform: translateX(20px); opacity: 0; }&#10;  to { transform: translateX(0); opacity: 1; }&#10;}&#10;&#10;.curiow-header {&#10;  padding: .9rem 1rem .75rem;&#10;  border-bottom: 1px solid #e2e8f0;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  background: linear-gradient(90deg,#f8fafc,#f1f5f9);&#10;}&#10;.curiow-title { font-size: .95rem; font-weight: 600; color:#1e293b; }&#10;.curiow-close {&#10;  background: none;&#10;  border: none;&#10;  font-size: 1.25rem;&#10;  line-height: 1;&#10;  cursor: pointer;&#10;  color: #64748b;&#10;  padding: .25rem .4rem;&#10;  border-radius: .5rem;&#10;  transition: background .15s ease, color .2s;&#10;}&#10;.curiow-close:hover { background:#e2e8f0; color:#334155; }&#10;&#10;.curiow-content { flex: 1; display:flex; flex-direction:column; overflow:hidden; }&#10;.curiow-messages { flex:1; overflow-y:auto; padding: 1rem .9rem 1rem 1rem; display:flex; flex-direction:column; gap:.9rem; }&#10;.curiow-messages::-webkit-scrollbar { width:6px; }&#10;.curiow-messages::-webkit-scrollbar-track { background: transparent; }&#10;.curiow-messages::-webkit-scrollbar-thumb { background:#cbd5e1; border-radius:3px; }&#10;&#10;.curiow-message { background:#f1f5f9; border-radius: .85rem; padding:.75rem .85rem; font-size:.85rem; line-height:1.35; color:#334155; position:relative; }&#10;.curiow-message.loading { opacity:.7; }&#10;.curiow-message-question { font-weight:600; margin-bottom:.45rem; color:#1e293b; }&#10;.curiow-message-answer { white-space:pre-wrap; font-weight:400; }&#10;.curiow-message-loading { font-style:italic; margin-top:.4rem; font-size:.75rem; color:#475569; }&#10;.curiow-message-error { margin-top:.4rem; font-size:.75rem; color:#dc2626; font-weight:600; }&#10;&#10;.curiow-followups { margin-top:.7rem; padding-top:.6rem; border-top:1px solid #e2e8f0; display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-followups-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; }&#10;.curiow-followup { font-size:.7rem; background:#ffffff; padding:.45rem .55rem; border-radius:.65rem; border:1px solid #e2e8f0; cursor:pointer; line-height:1.2; color:#334155; transition: background .15s, border-color .2s; }&#10;.curiow-followup:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;&#10;.curiow-input-container { display:flex; gap:.6rem; padding:.65rem .85rem .75rem; border-top:1px solid #e2e8f0; background:#ffffff; }&#10;.curiow-input { flex:1; border:1px solid #cbd5e1; border-radius: .75rem; padding:.6rem .8rem; font-size:.8rem; outline:none; transition:border-color .2s, box-shadow .2s; }&#10;.curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.25); }&#10;.curiow-send { background:linear-gradient(135deg,#6366f1,#8b5cf6); color:#fff; border:none; border-radius:.75rem; padding:.55rem .85rem; cursor:pointer; display:flex; align-items:center; justify-content:center; transition:filter .2s ease, transform .15s ease; }&#10;.curiow-send:hover { filter:brightness(1.08); transform:translateY(-2px); }&#10;.curiow-send-icon { width:18px; height:18px; stroke: currentColor; }&#10;.curiow-send:disabled { opacity:.45; cursor:not-allowed; transform:none; filter:none; }&#10;.curiow-send:disabled .curiow-send-icon { opacity:.8; }&#10;&#10;.curiow-initial-suggestions { padding: .4rem 1rem 1rem; display:flex; flex-direction:column; gap:1rem; overflow-y:auto; max-height:220px; }&#10;.curiow-suggestions-container { display:flex; flex-direction:column; gap:.55rem; }&#10;.curiow-suggestions-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; margin-bottom:.1rem; }&#10;.curiow-suggestion { display:flex; align-items:flex-start; gap:.55rem; background:#ffffff; border:1px solid #e2e8f0; padding:.55rem .65rem; border-radius:.8rem; cursor:pointer; transition: background .15s, border-color .2s; font-size:.75rem; line-height:1.2; color:#334155; }&#10;.curiow-suggestion:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;.curiow-suggestion-index { width:1.1rem; height:1.1rem; background:#6366f1; color:#fff; font-size:.6rem; display:flex; align-items:center; justify-content:center; border-radius:50%; font-weight:600; flex-shrink:0; margin-top:.1rem; }&#10;.curiow-suggestion-text { flex:1; }&#10;&#10;.curiow-top-suggestions { padding: .65rem 1rem .4rem; border-bottom:1px solid #e2e8f0; max-height: 40%; overflow-y:auto; display:flex; flex-direction:column; gap:.9rem; background:#ffffff; }&#10;.curiow-suggestions-group { display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-suggestions-group-title { font-size:.6rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; padding-left:.2rem; }&#10;&#10;/* Small helper state when closed (just button) */&#10;.curiow-section-questions-chat:not(.open) .curiow-overlay { display:none; }&#10;&#10;/* Dark mode (usa media prefers-color-scheme) */&#10;@media (prefers-color-scheme: dark) {&#10;  .curiow-chat-container { background:#0f172a; border-left-color:#1e293b; }&#10;  .curiow-header { background:linear-gradient(90deg,#0f172a,#1e293b); border-bottom-color:#1e293b; }&#10;  .curiow-title { color:#e2e8f0; }&#10;  .curiow-close { color:#94a3b8; }&#10;  .curiow-close:hover { background:#1e293b; color:#f1f5f9; }&#10;  .curiow-message { background:#1e293b; color:#cbd5e1; }&#10;  .curiow-message-question { color:#f1f5f9; }&#10;  .curiow-message-loading { color:#94a3b8; }&#10;  .curiow-followup { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-followup:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-input-container { background:#0f172a; border-top-color:#1e293b; }&#10;  .curiow-input { background:#0f172a; border-color:#334155; color:#e2e8f0; }&#10;  .curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.35); }&#10;  .curiow-suggestion { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-suggestion:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-initial-suggestions { scrollbar-color:#334155 transparent; }&#10;  .curiow-messages::-webkit-scrollbar-thumb { background:#334155; }&#10;  .curiow-top-suggestions { background:#0f172a; border-bottom-color:#1e293b; }&#10;  .curiow-suggestions-group-title { color:#94a3b8; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SectionQuestionsChat.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SectionQuestionsChat.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { callCuriowApi } from '../services/apiService';&#10;import { SparklesIcon } from './icons';&#10;import { createDeepTopicSession, touchDeepTopicSession, fetchDeepTopicHistory } from '../services/firestoreService';&#10;import './SectionQuestionsChat.css'; // aggiunto&#10;&#10;export interface SectionQuestionData {&#10;  id: string;&#10;  testo: string;&#10;  tipologia?: string;&#10;  element?: { name: string; index?: number; title?: string|null; test?: string|null }; // arricchito con title/test&#10;}&#10;&#10;interface SectionQuestionsChatProps {&#10;  gemId: string;&#10;  elementName: string; // 'general'&#10;  questions: SectionQuestionData[];&#10;  autoQuestionId?: string;&#10;  autoCustomQuestionText?: string;&#10;  hideTrigger?: boolean;&#10;  gemTitle?: string;&#10;  gemDescription?: string; // nuovo: per body description&#10;  userId?: string; // nuovo per creare sessione su Firestore&#10;}&#10;&#10;interface ChatMessage { id: string; question: string; answer?: string; loading: boolean; error?: string; origin: 'suggested' | 'custom'; element?: { name: string; index?: number; title?: string|null; test?: string|null }; followUps?: string[]; historyId?: string; createdAt?: Date; }&#10;&#10;// Utility: sessionId giornaliero persistente&#10;const getDailySessionId = (): string =&gt; {&#10;  if (typeof window === 'undefined') return 'session-server';&#10;  const todayKey = new Date().toISOString().slice(0,10); // YYYY-MM-DD&#10;  const storageKey = 'curiowChatSession:' + todayKey;&#10;  let sid = localStorage.getItem(storageKey);&#10;  if (!sid) {&#10;    sid = (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)) + '-d';&#10;    localStorage.setItem(storageKey, sid);&#10;  }&#10;  return sid;&#10;};&#10;&#10;const SectionQuestionsChat: React.FC&lt;SectionQuestionsChatProps&gt; = ({&#10;  gemId,&#10;  elementName,&#10;  questions,&#10;  autoQuestionId,&#10;  autoCustomQuestionText,&#10;  hideTrigger,&#10;  gemTitle,&#10;  gemDescription,&#10;  userId&#10;}) =&gt; {&#10;  const [open, setOpen] = useState(false);&#10;  const [messages, setMessages] = useState&lt;ChatMessage[]&gt;([]);&#10;  const [customInput, setCustomInput] = useState('');&#10;  const [dynamicSuggestions, setDynamicSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [baseSuggestions, setBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [sectionBaseSuggestions, setSectionBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [hideInitialSuggestions, setHideInitialSuggestions] = useState(false);&#10;  const [sessionCreated, setSessionCreated] = useState(false);&#10;  const [firstQuestionSet, setFirstQuestionSet] = useState(false);&#10;  const messagesEndRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const autoFiredRef = useRef&lt;string | null&gt;(null);&#10;  const sessionIdRef = useRef&lt;string&gt;('');&#10;  const messagesRef = useRef&lt;ChatMessage[]&gt;([]);&#10;&#10;  useEffect(() =&gt; { messagesRef.current = messages; }, [messages]);&#10;&#10;  const ensureSession = async (forcedId?: string) =&gt; {&#10;    const makeId = () =&gt; (forcedId ? forcedId : (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)));&#10;    if (!sessionIdRef.current || forcedId) {&#10;      sessionIdRef.current = makeId();&#10;      console.log('[chat][ensureSession] sessionId set', sessionIdRef.current, { forcedId });&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId: sessionIdRef.current } }));&#10;    } else {&#10;      console.log('[chat][ensureSession] reuse existing sessionId', sessionIdRef.current);&#10;    }&#10;  };&#10;&#10;  const buildBody = (testo: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    return {&#10;      apitype: 'deep-question',&#10;      gemId,&#10;      description: gemDescription || '',&#10;      questionText: testo,&#10;      element: {&#10;        name: elementCtx?.name || elementName,&#10;        title: (elementCtx?.title ?? null) || null,&#10;        test: (elementCtx?.test ?? null) || null&#10;      },&#10;      sessionId: sessionIdRef.current&#10;    };&#10;  };&#10;&#10;  const callApi = async (id: string, testo: string, origin: 'suggested'|'custom', elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    try {&#10;      await ensureSession();&#10;      const body = buildBody(testo, elementCtx);&#10;      const resp = await callCuriowApi(body);&#10;      const answer = resp.response || resp.answer || resp.result || resp.text || JSON.stringify(resp);&#10;      const followUps: string[] | undefined = Array.isArray(resp.questions) ? resp.questions : undefined;&#10;      setMessages(m =&gt; m.map(msg =&gt; msg.id === id ? { ...msg, loading: false, answer, followUps } : msg));&#10;      touchDeepTopicSession(sessionIdRef.current).then(() =&gt; {&#10;        window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: sessionIdRef.current } }));&#10;      });&#10;      // RIMOSSO: nessun salvataggio history - viene gestito altrove&#10;    } catch (e: any) {&#10;      const msg = e.message || 'Errore';&#10;      setMessages(m =&gt; m.map(ms =&gt; ms.id === id ? { ...ms, loading: false, error: msg } : ms));&#10;    }&#10;  };&#10;&#10;  const ask = async (testo: string, origin: 'suggested'|'custom', presetId?: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    await ensureSession();&#10;    if (!sessionCreated &amp;&amp; userId) {&#10;      const sid = sessionIdRef.current;&#10;      console.log('[chat][ask] creating session if needed', sid);&#10;      if (sid) {&#10;        try {&#10;          const createdId = await createDeepTopicSession(sid, gemId, userId);&#10;          console.log('[chat][ask] session created', createdId);&#10;          setSessionCreated(true);&#10;          window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: createdId } }));&#10;        } catch(e) {&#10;          console.error('[chat][ask] error creating session', e);&#10;        }&#10;      }&#10;    }&#10;&#10;    const id = crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2);&#10;    const newMsg: ChatMessage = {&#10;      id,&#10;      question: testo,&#10;      loading: true,&#10;      origin,&#10;      element: elementCtx,&#10;      createdAt: new Date()&#10;    };&#10;&#10;    setMessages(m =&gt; [...m, newMsg]);&#10;    setHideInitialSuggestions(true);&#10;&#10;    // RIMOSSO: nessuna creazione di history entry - il salvataggio viene gestito altrove&#10;    await callApi(id, testo, origin, elementCtx);&#10;  };&#10;&#10;  const showFollowUp = (followUp: string) =&gt; {&#10;    ask(followUp, 'custom');&#10;  };&#10;&#10;  // Genera solo l'ID sessione quando cambia la gemma o l'utente&#10;  useEffect(() =&gt; {&#10;    sessionIdRef.current = '';&#10;    setSessionCreated(false);&#10;    setFirstQuestionSet(false);&#10;    if (userId) {&#10;      ensureSession();&#10;    }&#10;  }, [userId, gemId]);&#10;&#10;  // Scroll verso il fondo quando nuovi messaggi&#10;  useEffect(() =&gt; {&#10;    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });&#10;  }, [messages]);&#10;&#10;  // Ascolta eventi globali di apertura dal resto dell'app&#10;  useEffect(() =&gt; {&#10;    const handler = (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const sug: SectionQuestionData[] = (detail.questions || []).filter(q =&gt; q.element?.name !== 'general');&#10;      setDynamicSuggestions(sug);&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;    window.addEventListener('curiow-chat-open', handler as EventListener);&#10;    return () =&gt; window.removeEventListener('curiow-chat-open', handler as EventListener);&#10;  }, []);&#10;&#10;  // Aggiorna sessionId se cambia giorno&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(() =&gt; {&#10;      const current = sessionIdRef.current.split(':')[0];&#10;      const today = new Date().toISOString().slice(0,10);&#10;      if (!sessionIdRef.current.includes(today)) {&#10;        sessionIdRef.current = getDailySessionId();&#10;      }&#10;    }, 1000 * 60 * 60);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  // Listener per cambiare sessione&#10;  useEffect(() =&gt; {&#10;    const useSessionHandler = async (ev: Event) =&gt; {&#10;      const { sessionId } = (ev as CustomEvent).detail || {};&#10;      if (!sessionId) return;&#10;      console.log('[chat] use-session event received', sessionId);&#10;      sessionIdRef.current = sessionId;&#10;      setMessages([]);&#10;      setOpen(true);&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId } }));&#10;&#10;      if (userId) {&#10;        try {&#10;          const hist = await fetchDeepTopicHistory(sessionId, userId, gemId);&#10;          console.log('[chat] history loaded entries', hist.length, 'for', sessionId);&#10;          const ordered = hist;&#10;          setMessages(ordered.map(h =&gt; ({&#10;            id: h.id,&#10;            question: h.question,&#10;            answer: h.answer,&#10;            followUps: h.followUps,&#10;            origin: 'custom',&#10;            loading: false,&#10;            element: h.element || undefined,&#10;            historyId: h.id,&#10;            createdAt: (h as any).createdAt instanceof Date ? (h as any).createdAt : new Date((h as any).createdAt?.seconds ? (h as any).createdAt.seconds*1000 : Date.now())&#10;          })));&#10;          setFirstQuestionSet(ordered.length &gt; 0);&#10;        } catch(e) { /* ignore */ }&#10;      }&#10;    };&#10;&#10;    const newSessionHandler = async (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const questions: SectionQuestionData[] = detail.questions || [];&#10;&#10;      sessionIdRef.current = '';&#10;      await ensureSession();&#10;      setMessages([]);&#10;&#10;      if (questions.length &gt; 0 &amp;&amp; questions[0]?.element?.name === 'general') {&#10;        setBaseSuggestions(questions.filter(q =&gt; q.element?.name === 'general'));&#10;        setDynamicSuggestions([]);&#10;      } else {&#10;        setDynamicSuggestions(questions.filter(q =&gt; q.element?.name !== 'general'));&#10;      }&#10;      setHideInitialSuggestions(false);&#10;&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;&#10;    window.addEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;    window.addEventListener('curiow-chat-new-session', newSessionHandler);&#10;    return () =&gt; {&#10;      window.removeEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;      window.removeEventListener('curiow-chat-new-session', newSessionHandler);&#10;    };&#10;  }, [userId, gemId]);&#10;&#10;  // Split tra generali e sezione dalle props originarie&#10;  useEffect(() =&gt; {&#10;    const generals = questions.filter(q =&gt; q.element?.name === 'general');&#10;    const sectionQs = questions.filter(q =&gt; q.element?.name !== 'general');&#10;    setBaseSuggestions(generals);&#10;    setSectionBaseSuggestions(sectionQs);&#10;  }, [questions]);&#10;&#10;  // Auto-fire domanda se specificata&#10;  useEffect(() =&gt; {&#10;    if (autoQuestionId &amp;&amp; autoQuestionId !== autoFiredRef.current) {&#10;      const q = questions.find(q =&gt; q.id === autoQuestionId);&#10;      if (q) {&#10;        console.log('[chat] auto-firing question', q.testo);&#10;        ask(q.testo, 'suggested', q.id, q.element);&#10;        autoFiredRef.current = autoQuestionId;&#10;        setOpen(true);&#10;      }&#10;    }&#10;  }, [autoQuestionId, questions]);&#10;&#10;  // Auto-fire custom text se specificato&#10;  useEffect(() =&gt; {&#10;    if (autoCustomQuestionText &amp;&amp; autoCustomQuestionText !== autoFiredRef.current) {&#10;      console.log('[chat] auto-firing custom text', autoCustomQuestionText);&#10;      ask(autoCustomQuestionText, 'custom');&#10;      autoFiredRef.current = autoCustomQuestionText;&#10;      setOpen(true);&#10;    }&#10;  }, [autoCustomQuestionText]);&#10;&#10;  // Renderizza i suggerimenti dinamici (esclusi i generali)&#10;  const renderDynamicSuggestions = () =&gt; {&#10;    if (dynamicSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;        {dynamicSuggestions.map((q, idx) =&gt; (&#10;          &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;            &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;            &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di base (solo generali)&#10;  const renderBaseSuggestions = () =&gt; {&#10;    if (baseSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;        {baseSuggestions.map((q, idx) =&gt; (&#10;          &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;            &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;            &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di sezione (dalle props)&#10;  const renderSectionSuggestions = () =&gt; {&#10;    if (sectionBaseSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-title&quot;&gt;Domande per questa sezione:&lt;/div&gt;&#10;        {sectionBaseSuggestions.map((q, idx) =&gt; (&#10;          &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;            &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;            &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`curiow-section-questions-chat ${open ? 'open' : ''}`}&gt;&#10;      {!hideTrigger &amp;&amp; (&#10;        &lt;div className=&quot;curiow-trigger&quot; onClick={() =&gt; setOpen(true)}&gt;&#10;          &lt;SparklesIcon /&gt;&#10;          &lt;span&gt;Fai una domanda&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {open &amp;&amp; (&#10;        &lt;div className=&quot;curiow-overlay&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;          &lt;div className=&quot;curiow-chat-container&quot; onClick={e =&gt; e.stopPropagation()}&gt;&#10;            &lt;div className=&quot;curiow-header&quot;&gt;&#10;              &lt;div className=&quot;curiow-title&quot;&gt;{gemTitle || 'Chat'}&lt;/div&gt;&#10;              &lt;button className=&quot;curiow-close&quot; onClick={() =&gt; setOpen(false)}&gt;×&lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;curiow-content&quot;&gt;&#10;              &lt;div className=&quot;curiow-messages&quot;&gt;&#10;                {messages.map(msg =&gt; (&#10;                  &lt;div key={msg.id} className={`curiow-message ${msg.loading ? 'loading' : ''}`}&gt;&#10;                    &lt;div className=&quot;curiow-message-question&quot;&gt;{msg.question}&lt;/div&gt;&#10;                    {msg.answer &amp;&amp; (&#10;                      &lt;div className=&quot;curiow-message-answer&quot;&gt;&#10;                        {msg.answer}&#10;                        {msg.followUps &amp;&amp; msg.followUps.length &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;curiow-followups&quot;&gt;&#10;                            &lt;div className=&quot;curiow-followups-title&quot;&gt;Domande correlate:&lt;/div&gt;&#10;                            {msg.followUps.map((fu, idx) =&gt; (&#10;                              &lt;div key={idx} className=&quot;curiow-followup&quot; onClick={() =&gt; showFollowUp(fu)}&gt;&#10;                                {fu}&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    {msg.loading &amp;&amp; &lt;div className=&quot;curiow-message-loading&quot;&gt;Pensando...&lt;/div&gt;}&#10;                    {msg.error &amp;&amp; &lt;div className=&quot;curiow-message-error&quot;&gt;{msg.error}&lt;/div&gt;}&#10;                  &lt;/div&gt;&#10;                ))}&#10;                &lt;div ref={messagesEndRef} /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;curiow-input-container&quot;&gt;&#10;                &lt;input&#10;                  id=&quot;curiow-chat-input&quot;&#10;                  className=&quot;curiow-input&quot;&#10;                  type=&quot;text&quot;&#10;                  placeholder=&quot;Fai una domanda...&quot;&#10;                  value={customInput}&#10;                  onChange={e =&gt; setCustomInput(e.target.value)}&#10;                  onKeyDown={e =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; customInput.trim() !== '') {&#10;                      ask(customInput.trim(), 'custom');&#10;                      setCustomInput('');&#10;                    }&#10;                  }}&#10;                /&gt;&#10;                &lt;button className=&quot;curiow-send&quot; onClick={() =&gt; {&#10;                  if (customInput.trim() !== '') {&#10;                    ask(customInput.trim(), 'custom');&#10;                    setCustomInput('');&#10;                  }&#10;                }}&gt;&#10;                  &lt;SparklesIcon /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;              {!hideInitialSuggestions &amp;&amp; (&#10;                &lt;div className=&quot;curiow-initial-suggestions&quot;&gt;&#10;                  {renderBaseSuggestions()}&#10;                  {renderDynamicSuggestions()}&#10;                  {renderSectionSuggestions()}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SectionQuestionsChat;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { callCuriowApi } from '../services/apiService';&#10;import { SparklesIcon } from './icons';&#10;import { PaperAirplaneIcon } from './icons';&#10;import { createDeepTopicSession, touchDeepTopicSession, fetchDeepTopicHistory } from '../services/firestoreService';&#10;import './SectionQuestionsChat.css'; // aggiunto&#10;&#10;export interface SectionQuestionData {&#10;  id: string;&#10;  testo: string;&#10;  tipologia?: string;&#10;  element?: { name: string; index?: number; title?: string|null; test?: string|null }; // arricchito con title/test&#10;}&#10;&#10;interface SectionQuestionsChatProps {&#10;  gemId: string;&#10;  elementName: string; // 'general'&#10;  questions: SectionQuestionData[];&#10;  autoQuestionId?: string;&#10;  autoCustomQuestionText?: string;&#10;  hideTrigger?: boolean;&#10;  gemTitle?: string;&#10;  gemDescription?: string; // nuovo: per body description&#10;  userId?: string; // nuovo per creare sessione su Firestore&#10;}&#10;&#10;interface ChatMessage { id: string; question: string; answer?: string; loading: boolean; error?: string; origin: 'suggested' | 'custom'; element?: { name: string; index?: number; title?: string|null; test?: string|null }; followUps?: string[]; historyId?: string; createdAt?: Date; }&#10;&#10;// Utility: sessionId giornaliero persistente&#10;const getDailySessionId = (): string =&gt; {&#10;  if (typeof window === 'undefined') return 'session-server';&#10;  const todayKey = new Date().toISOString().slice(0,10); // YYYY-MM-DD&#10;  const storageKey = 'curiowChatSession:' + todayKey;&#10;  let sid = localStorage.getItem(storageKey);&#10;  if (!sid) {&#10;    sid = (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)) + '-d';&#10;    localStorage.setItem(storageKey, sid);&#10;  }&#10;  return sid;&#10;};&#10;&#10;const SectionQuestionsChat: React.FC&lt;SectionQuestionsChatProps&gt; = ({&#10;  gemId,&#10;  elementName,&#10;  questions,&#10;  autoQuestionId,&#10;  autoCustomQuestionText,&#10;  hideTrigger,&#10;  gemTitle,&#10;  gemDescription,&#10;  userId&#10;}) =&gt; {&#10;  const [open, setOpen] = useState(false);&#10;  const [messages, setMessages] = useState&lt;ChatMessage[]&gt;([]);&#10;  const [customInput, setCustomInput] = useState('');&#10;  const [dynamicSuggestions, setDynamicSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [baseSuggestions, setBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [sectionBaseSuggestions, setSectionBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [hideInitialSuggestions, setHideInitialSuggestions] = useState(false);&#10;  const [sessionCreated, setSessionCreated] = useState(false);&#10;  const [firstQuestionSet, setFirstQuestionSet] = useState(false);&#10;  const messagesEndRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const autoFiredRef = useRef&lt;string | null&gt;(null);&#10;  const sessionIdRef = useRef&lt;string&gt;('');&#10;  const messagesRef = useRef&lt;ChatMessage[]&gt;([]);&#10;&#10;  useEffect(() =&gt; { messagesRef.current = messages; }, [messages]);&#10;&#10;  const ensureSession = async (forcedId?: string) =&gt; {&#10;    const makeId = () =&gt; (forcedId ? forcedId : (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)));&#10;    if (!sessionIdRef.current || forcedId) {&#10;      sessionIdRef.current = makeId();&#10;      console.log('[chat][ensureSession] sessionId set', sessionIdRef.current, { forcedId });&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId: sessionIdRef.current } }));&#10;    } else {&#10;      console.log('[chat][ensureSession] reuse existing sessionId', sessionIdRef.current);&#10;    }&#10;  };&#10;&#10;  const buildBody = (testo: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    return {&#10;      apitype: 'deep-question',&#10;      gemId,&#10;      description: gemDescription || '',&#10;      questionText: testo,&#10;      element: {&#10;        name: elementCtx?.name || elementName,&#10;        title: (elementCtx?.title ?? null) || null,&#10;        test: (elementCtx?.test ?? null) || null&#10;      },&#10;      sessionId: sessionIdRef.current&#10;    };&#10;  };&#10;&#10;  const callApi = async (id: string, testo: string, origin: 'suggested'|'custom', elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    try {&#10;      await ensureSession();&#10;      const body = buildBody(testo, elementCtx);&#10;      const resp = await callCuriowApi(body);&#10;      const answer = resp.response || resp.answer || resp.result || resp.text || JSON.stringify(resp);&#10;      const followUps: string[] | undefined = Array.isArray(resp.questions) ? resp.questions : undefined;&#10;      setMessages(m =&gt; m.map(msg =&gt; msg.id === id ? { ...msg, loading: false, answer, followUps } : msg));&#10;      touchDeepTopicSession(sessionIdRef.current).then(() =&gt; {&#10;        window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: sessionIdRef.current } }));&#10;      });&#10;      // RIMOSSO: nessun salvataggio history - viene gestito altrove&#10;    } catch (e: any) {&#10;      const msg = e.message || 'Errore';&#10;      setMessages(m =&gt; m.map(ms =&gt; ms.id === id ? { ...ms, loading: false, error: msg } : ms));&#10;    }&#10;  };&#10;&#10;  const ask = async (testo: string, origin: 'suggested'|'custom', presetId?: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    await ensureSession();&#10;    if (!sessionCreated &amp;&amp; userId) {&#10;      const sid = sessionIdRef.current;&#10;      console.log('[chat][ask] creating session if needed', sid);&#10;      if (sid) {&#10;        try {&#10;          const createdId = await createDeepTopicSession(sid, gemId, userId);&#10;          console.log('[chat][ask] session created', createdId);&#10;          setSessionCreated(true);&#10;          window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: createdId } }));&#10;        } catch(e) {&#10;          console.error('[chat][ask] error creating session', e);&#10;        }&#10;      }&#10;    }&#10;&#10;    const id = crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2);&#10;    const newMsg: ChatMessage = {&#10;      id,&#10;      question: testo,&#10;      loading: true,&#10;      origin,&#10;      element: elementCtx,&#10;      createdAt: new Date()&#10;    };&#10;&#10;    setMessages(m =&gt; [...m, newMsg]);&#10;    setHideInitialSuggestions(true);&#10;&#10;    // RIMOSSO: nessuna creazione di history entry - il salvataggio viene gestito altrove&#10;    await callApi(id, testo, origin, elementCtx);&#10;  };&#10;&#10;  const showFollowUp = (followUp: string) =&gt; {&#10;    ask(followUp, 'custom');&#10;  };&#10;&#10;  // Genera solo l'ID sessione quando cambia la gemma o l'utente&#10;  useEffect(() =&gt; {&#10;    sessionIdRef.current = '';&#10;    setSessionCreated(false);&#10;    setFirstQuestionSet(false);&#10;    if (userId) {&#10;      ensureSession();&#10;    }&#10;  }, [userId, gemId]);&#10;&#10;  // Scroll verso il fondo quando nuovi messaggi&#10;  useEffect(() =&gt; {&#10;    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });&#10;  }, [messages]);&#10;&#10;  // Ascolta eventi globali di apertura dal resto dell'app&#10;  useEffect(() =&gt; {&#10;    const handler = (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const sug: SectionQuestionData[] = (detail.questions || []).filter(q =&gt; q.element?.name !== 'general');&#10;      setDynamicSuggestions(sug);&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;    window.addEventListener('curiow-chat-open', handler as EventListener);&#10;    return () =&gt; window.removeEventListener('curiow-chat-open', handler as EventListener);&#10;  }, []);&#10;&#10;  // Aggiorna sessionId se cambia giorno&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(() =&gt; {&#10;      const current = sessionIdRef.current.split(':')[0];&#10;      const today = new Date().toISOString().slice(0,10);&#10;      if (!sessionIdRef.current.includes(today)) {&#10;        sessionIdRef.current = getDailySessionId();&#10;      }&#10;    }, 1000 * 60 * 60);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  // Listener per cambiare sessione&#10;  useEffect(() =&gt; {&#10;    const useSessionHandler = async (ev: Event) =&gt; {&#10;      const { sessionId } = (ev as CustomEvent).detail || {};&#10;      if (!sessionId) return;&#10;      console.log('[chat] use-session event received', sessionId);&#10;      sessionIdRef.current = sessionId;&#10;      setMessages([]);&#10;      setOpen(true);&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId } }));&#10;&#10;      if (userId) {&#10;        try {&#10;          const hist = await fetchDeepTopicHistory(sessionId, userId, gemId);&#10;          console.log('[chat] history loaded entries', hist.length, 'for', sessionId);&#10;          const ordered = hist;&#10;          setMessages(ordered.map(h =&gt; ({&#10;            id: h.id,&#10;            question: h.question,&#10;            answer: h.answer,&#10;            followUps: h.followUps,&#10;            origin: 'custom',&#10;            loading: false,&#10;            element: h.element || undefined,&#10;            historyId: h.id,&#10;            createdAt: (h as any).createdAt instanceof Date ? (h as any).createdAt : new Date((h as any).createdAt?.seconds ? (h as any).createdAt.seconds*1000 : Date.now())&#10;          })));&#10;          setFirstQuestionSet(ordered.length &gt; 0);&#10;        } catch(e) { /* ignore */ }&#10;      }&#10;    };&#10;&#10;    const newSessionHandler = async (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const questions: SectionQuestionData[] = detail.questions || [];&#10;&#10;      sessionIdRef.current = '';&#10;      await ensureSession();&#10;      setMessages([]);&#10;&#10;      if (questions.length &gt; 0 &amp;&amp; questions[0]?.element?.name === 'general') {&#10;        setBaseSuggestions(questions.filter(q =&gt; q.element?.name === 'general'));&#10;        setDynamicSuggestions([]);&#10;      } else {&#10;        setDynamicSuggestions(questions.filter(q =&gt; q.element?.name !== 'general'));&#10;      }&#10;      setHideInitialSuggestions(false);&#10;&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;&#10;    window.addEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;    window.addEventListener('curiow-chat-new-session', newSessionHandler);&#10;    return () =&gt; {&#10;      window.removeEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;      window.removeEventListener('curiow-chat-new-session', newSessionHandler);&#10;    };&#10;  }, [userId, gemId]);&#10;&#10;  // Split tra generali e sezione dalle props originarie&#10;  useEffect(() =&gt; {&#10;    const generals = questions.filter(q =&gt; q.element?.name === 'general');&#10;    const sectionQs = questions.filter(q =&gt; q.element?.name !== 'general');&#10;    setBaseSuggestions(generals);&#10;    setSectionBaseSuggestions(sectionQs);&#10;  }, [questions]);&#10;&#10;  // Auto-fire domanda se specificata&#10;  useEffect(() =&gt; {&#10;    if (autoQuestionId &amp;&amp; autoQuestionId !== autoFiredRef.current) {&#10;      const q = questions.find(q =&gt; q.id === autoQuestionId);&#10;      if (q) {&#10;        console.log('[chat] auto-firing question', q.testo);&#10;        ask(q.testo, 'suggested', q.id, q.element);&#10;        autoFiredRef.current = autoQuestionId;&#10;        setOpen(true);&#10;      }&#10;    }&#10;  }, [autoQuestionId, questions]);&#10;&#10;  // Auto-fire custom text se specificato&#10;  useEffect(() =&gt; {&#10;    if (autoCustomQuestionText &amp;&amp; autoCustomQuestionText !== autoFiredRef.current) {&#10;      console.log('[chat] auto-firing custom text', autoCustomQuestionText);&#10;      ask(autoCustomQuestionText, 'custom');&#10;      autoFiredRef.current = autoCustomQuestionText;&#10;      setOpen(true);&#10;    }&#10;  }, [autoCustomQuestionText]);&#10;&#10;  // Renderizza i suggerimenti dinamici (esclusi i generali)&#10;  const renderDynamicSuggestions = () =&gt; {&#10;    if (dynamicSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Suggerite per questa sessione&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {dynamicSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di base (solo generali)&#10;  const renderBaseSuggestions = () =&gt; {&#10;    if (baseSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Domande generali&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {baseSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di sezione (dalle props)&#10;  const renderSectionSuggestions = () =&gt; {&#10;    if (sectionBaseSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Domande per questa sezione&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {sectionBaseSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`curiow-section-questions-chat ${open ? 'open' : ''}`}&gt;&#10;      {!hideTrigger &amp;&amp; (&#10;        &lt;div className=&quot;curiow-trigger&quot; onClick={() =&gt; setOpen(true)}&gt;&#10;          &lt;SparklesIcon /&gt;&#10;          &lt;span&gt;Fai una domanda&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {open &amp;&amp; (&#10;        &lt;div className=&quot;curiow-overlay&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;          &lt;div className=&quot;curiow-chat-container&quot; onClick={e =&gt; e.stopPropagation()}&gt;&#10;            &lt;div className=&quot;curiow-header&quot;&gt;&#10;              &lt;div className=&quot;curiow-title&quot;&gt;{gemTitle || 'Chat'}&lt;/div&gt;&#10;              &lt;button className=&quot;curiow-close&quot; onClick={() =&gt; setOpen(false)}&gt;×&lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;curiow-content&quot;&gt;&#10;              {!hideInitialSuggestions &amp;&amp; (&#10;                &lt;div className=&quot;curiow-top-suggestions&quot;&gt;&#10;                  {renderDynamicSuggestions()}&#10;                  {renderSectionSuggestions()}&#10;                  {renderBaseSuggestions()}&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;curiow-messages&quot;&gt;&#10;                {messages.map(msg =&gt; (&#10;                  &lt;div key={msg.id} className={`curiow-message ${msg.loading ? 'loading' : ''}`}&gt;&#10;                    &lt;div className=&quot;curiow-message-question&quot;&gt;{msg.question}&lt;/div&gt;&#10;                    {msg.answer &amp;&amp; (&#10;                      &lt;div className=&quot;curiow-message-answer&quot;&gt;&#10;                        {msg.answer}&#10;                        {msg.followUps &amp;&amp; msg.followUps.length &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;curiow-followups&quot;&gt;&#10;                            &lt;div className=&quot;curiow-followups-title&quot;&gt;Domande correlate:&lt;/div&gt;&#10;                            {msg.followUps.map((fu, idx) =&gt; (&#10;                              &lt;div key={idx} className=&quot;curiow-followup&quot; onClick={() =&gt; showFollowUp(fu)}&gt;&#10;                                {fu}&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    {msg.loading &amp;&amp; &lt;div className=&quot;curiow-message-loading&quot;&gt;Pensando...&lt;/div&gt;}&#10;                    {msg.error &amp;&amp; &lt;div className=&quot;curiow-message-error&quot;&gt;{msg.error}&lt;/div&gt;}&#10;                  &lt;/div&gt;&#10;                ))}&#10;                &lt;div ref={messagesEndRef} /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;curiow-input-container&quot;&gt;&#10;                &lt;input&#10;                  id=&quot;curiow-chat-input&quot;&#10;                  className=&quot;curiow-input&quot;&#10;                  type=&quot;text&quot;&#10;                  placeholder=&quot;Fai una domanda...&quot;&#10;                  value={customInput}&#10;                  onChange={e =&gt; setCustomInput(e.target.value)}&#10;                  onKeyDown={e =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; customInput.trim() !== '') {&#10;                      ask(customInput.trim(), 'custom');&#10;                      setCustomInput('');&#10;                    }&#10;                  }}&#10;                /&gt;&#10;                &lt;button className=&quot;curiow-send&quot; type=&quot;button&quot; aria-label=&quot;Invia domanda&quot; disabled={customInput.trim()===''} onClick={() =&gt; {&#10;                  if (customInput.trim() !== '') {&#10;                    ask(customInput.trim(), 'custom');&#10;                    setCustomInput('');&#10;                  }&#10;                }}&gt;&#10;                  &lt;PaperAirplaneIcon className=&quot;curiow-send-icon&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SectionQuestionsChat;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>