<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/populate-llm-models.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/populate-llm-models.js" />
              <option name="updatedContent" value="// Script per popolare la collection llm_models con dati di esempio&#10;// Esegui questo script nella console del browser quando sei autenticato come admin&#10;&#10;const createLLMModels = async () =&gt; {&#10;  const models = [&#10;    {&#10;      name: 'gemini-1.5-flash',&#10;      inputCostPerMillion: 0.075,   // $0.075 per milione di token input&#10;      outputCostPerMillion: 0.3,   // $0.30 per milione di token output&#10;      isActive: true&#10;    },&#10;    {&#10;      name: 'gemini-2.5-flash',&#10;      inputCostPerMillion: 0.1,    // $0.10 per milione di token input  &#10;      outputCostPerMillion: 0.4,   // $0.40 per milione di token output&#10;      isActive: true&#10;    },&#10;    {&#10;      name: 'gemini-2.5-flash-lite',&#10;      inputCostPerMillion: 0.05,   // $0.05 per milione di token input&#10;      outputCostPerMillion: 0.2,   // $0.20 per milione di token output&#10;      isActive: true&#10;    },&#10;    {&#10;      name: 'sonar-pro',&#10;      inputCostPerMillion: 3.0,    // $3.00 per milione di token input&#10;      outputCostPerMillion: 15.0,  // $15.00 per milione di token output&#10;      isActive: true&#10;    }&#10;  ];&#10;&#10;  console.log('Creating LLM models...');&#10;  &#10;  for (const model of models) {&#10;    try {&#10;      const docRef = await window.firestoreService.createLLMModel(model);&#10;      console.log(`✅ Created model ${model.name} with ID: ${docRef}`);&#10;    } catch (error) {&#10;      console.error(`❌ Error creating model ${model.name}:`, error);&#10;    }&#10;  }&#10;  &#10;  console.log('Done! Refresh the page to see the costs.');&#10;};&#10;&#10;// Esegui la funzione&#10;createLLMModels();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemCard.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon, ChevronDownIcon, SparklesIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon } from './icons';&#10;import { trackEvent } from '../services/firebase';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;  onTagClick?: (tag: string) =&gt; void; // opzionale: click su tag per filtrare/ricercare&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onRemoveRequest, onSelect, onLoginRequest, onView, onTagClick }) =&gt; {&#10;&#10;  const [showShareBar, setShowShareBar] = React.useState(false);&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        if (isFavorite) {&#10;          onRemoveRequest(gem.id);&#10;        } else {&#10;          onSaveRequest(gem.id);&#10;        }&#10;    }&#10;  };&#10;&#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    setShowShareBar(v =&gt; { const nv = !v; trackEvent('share_bar_toggle', { open: nv, gem_id: gem.id, context: 'card' }); return nv; });&#10;  };&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;&#10;  const handleCopyLink = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    navigator.clipboard.writeText(currentUrl).catch(()=&gt;{});&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id, context: 'card' });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleInstagram = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    navigator.clipboard.writeText(currentUrl).catch(()=&gt;{});&#10;    trackEvent('share', { channel: 'instagram_copy', gem_id: gem.id, context: 'card' });&#10;    alert('Link copiato! Apri Instagram e incolla nella tua story/post.');&#10;  };&#10;&#10;  const [showSummary, setShowSummary] = React.useState(false); // controllo manuale (click)&#10;  const [isHovering, setIsHovering] = React.useState(false); // stato hover&#10;  const [canHover, setCanHover] = React.useState(false);&#10;  React.useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const mq = window.matchMedia('(hover: hover) and (pointer: fine)');&#10;      const update = () =&gt; setCanHover(mq.matches);&#10;      update();&#10;      mq.addEventListener('change', update);&#10;      return () =&gt; mq.removeEventListener('change', update);&#10;    }&#10;  }, []);&#10;  const actualOpen = showSummary || (canHover &amp;&amp; isHovering);&#10;  const summary = (gem.content as any)?.summary as string | undefined;&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  const [showShareSummary, setShowShareSummary] = React.useState(false); // (non usato, placeholder eventuale)&#10;  const shareWrapperRef = React.useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (!showShareBar) return;&#10;    const handleOutside = (e: MouseEvent | TouchEvent) =&gt; {&#10;      if (!shareWrapperRef.current) return;&#10;      if (shareWrapperRef.current.contains(e.target as Node)) return; // click interno =&gt; ignora&#10;      setShowShareBar(false);&#10;    };&#10;    document.addEventListener('mousedown', handleOutside);&#10;    document.addEventListener('touchstart', handleOutside, { passive: true });&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleOutside);&#10;      document.removeEventListener('touchstart', handleOutside);&#10;    };&#10;  }, [showShareBar]);&#10;&#10;  return (&#10;    &lt;div&#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;div className=&quot;relative overflow-hidden rounded-t-xl&quot;&gt;&#10;        &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;        {summary &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-x-0 bottom-0&quot; onMouseEnter={() =&gt; setIsHovering(true)} onMouseLeave={() =&gt; setIsHovering(false)}&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={(e) =&gt; { e.stopPropagation(); setShowSummary(s =&gt; !s); }}&#10;              className={`w-full text-left group/summary focus:outline-none`}&#10;              aria-expanded={actualOpen}&#10;              aria-controls={`summary-${gem.id}`}&#10;              aria-label={actualOpen ? 'Chiudi sintesi' : 'Apri sintesi'}&#10;            &gt;&#10;              &lt;div className={`relative overflow-hidden transition-all duration-300 ease-out bg-gradient-to-t from-slate-900/90 via-slate-900/70 to-slate-900/20 backdrop-blur-sm text-white ${actualOpen ? 'max-h-60 sm:max-h-72' : 'max-h-16'}`}&gt;&#10;                &lt;div className=&quot;p-3 pr-10&quot;&gt;&#10;                  &lt;p id={`summary-${gem.id}`} className={`text-xs leading-snug whitespace-pre-line ${actualOpen ? '' : 'line-clamp-2'}`}&gt;{summary}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute right-2 top-2 flex items-center gap-1 text-[10px] uppercase font-semibold opacity-80&quot;&gt;&#10;                  &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${actualOpen ? 'rotate-180' : ''}`} /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute inset-0 ring-1 ring-white/10 rounded-t&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;div className=&quot;relative&quot; ref={shareWrapperRef}&gt;&#10;                &lt;button&#10;                  onClick={handleShareClick}&#10;                  className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                  title=&quot;Condividi&quot;&#10;                  aria-label=&quot;Condividi gemma&quot;&#10;                &gt;&#10;                    &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute -top-2 right-0 -translate-y-full z-30 flex gap-1 p-2 rounded-xl bg-white dark:bg-slate-800 shadow-xl ring-1 ring-slate-200 dark:ring-slate-700&quot;&#10;                    onClick={e=&gt;e.stopPropagation()}&#10;                  &gt;&#10;                    &lt;a&#10;                      href={facebookUrl}&#10;                      target=&quot;_blank&quot;&#10;                      rel=&quot;noopener noreferrer&quot;&#10;                      onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;Facebook&quot;&#10;                      title=&quot;Facebook&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot;&#10;                    &gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button&#10;                      onClick={handleInstagram}&#10;                      aria-label=&quot;Instagram (copia link)&quot;&#10;                      title=&quot;Instagram (copia link)&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a&#10;                      href={whatsappUrl}&#10;                      target=&quot;_blank&quot;&#10;                      rel=&quot;noopener noreferrer&quot;&#10;                      onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;WhatsApp&quot;&#10;                      title=&quot;WhatsApp&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a&#10;                      href={emailUrl}&#10;                      onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;Email&quot;&#10;                      title=&quot;Email&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button&#10;                      onClick={handleCopyLink}&#10;                      aria-label=&quot;Copia link&quot;&#10;                      title=&quot;Copia link&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-300 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    onTagClick ? (&#10;                      &lt;button&#10;                        key={tag}&#10;                        type=&quot;button&quot;&#10;                        onClick={(e)=&gt;{ e.stopPropagation(); onTagClick(tag); }}&#10;                        className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-slate-600 dark:text-slate-300 hover:text-indigo-700 dark:hover:text-indigo-200 rounded-full text-xs font-medium transition-colors&quot;&#10;                        aria-label={`Filtra per tag ${tag}`}&#10;                      &gt;{tag}&lt;/button&gt;&#10;                    ) : (&#10;                      &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                      &lt;/span&gt;&#10;                    )&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon, ChevronDownIcon, SparklesIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon } from './icons';&#10;import { trackEvent } from '../services/firebase';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;  onTagClick?: (tag: string) =&gt; void; // opzionale: click su tag per filtrare/ricercare&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onRemoveRequest, onSelect, onLoginRequest, onView, onTagClick }) =&gt; {&#10;&#10;  const [showShareBar, setShowShareBar] = React.useState(false);&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        if (isFavorite) {&#10;          onRemoveRequest(gem.id);&#10;        } else {&#10;          onSaveRequest(gem.id);&#10;        }&#10;    }&#10;  };&#10;&#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    setShowShareBar(v =&gt; { const nv = !v; trackEvent('share_bar_toggle', { open: nv, gem_id: gem.id, context: 'card' }); return nv; });&#10;  };&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;&#10;  const handleCopyLink = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    navigator.clipboard.writeText(currentUrl).catch(()=&gt;{});&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id, context: 'card' });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleInstagram = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    navigator.clipboard.writeText(currentUrl).catch(()=&gt;{});&#10;    trackEvent('share', { channel: 'instagram_copy', gem_id: gem.id, context: 'card' });&#10;    alert('Link copiato! Apri Instagram e incolla nella tua story/post.');&#10;  };&#10;&#10;  const [showSummary, setShowSummary] = React.useState(false); // controllo manuale (click)&#10;  const [isHovering, setIsHovering] = React.useState(false); // stato hover&#10;  const [canHover, setCanHover] = React.useState(false);&#10;  React.useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const mq = window.matchMedia('(hover: hover) and (pointer: fine)');&#10;      const update = () =&gt; setCanHover(mq.matches);&#10;      update();&#10;      mq.addEventListener('change', update);&#10;      return () =&gt; mq.removeEventListener('change', update);&#10;    }&#10;  }, []);&#10;  const actualOpen = showSummary || (canHover &amp;&amp; isHovering);&#10;  const summary = (gem.content as any)?.summary as string | undefined;&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  const [showShareSummary, setShowShareSummary] = React.useState(false); // (non usato, placeholder eventuale)&#10;  const shareWrapperRef = React.useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (!showShareBar) return;&#10;    const handleOutside = (e: MouseEvent | TouchEvent) =&gt; {&#10;      if (!shareWrapperRef.current) return;&#10;      if (shareWrapperRef.current.contains(e.target as Node)) return; // click interno =&gt; ignora&#10;      setShowShareBar(false);&#10;    };&#10;    document.addEventListener('mousedown', handleOutside);&#10;    document.addEventListener('touchstart', handleOutside, { passive: true });&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleOutside);&#10;      document.removeEventListener('touchstart', handleOutside);&#10;    };&#10;  }, [showShareBar]);&#10;&#10;  return (&#10;    &lt;div&#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;div className=&quot;relative overflow-hidden rounded-t-xl&quot;&gt;&#10;        {gem.videoUrl ? (&#10;          &lt;video&#10;            src={gem.videoUrl}&#10;            className=&quot;w-full h-auto object-cover aspect-[3/4]&quot;&#10;            muted&#10;            loop&#10;            playsInline&#10;            onMouseEnter={(e) =&gt; {&#10;              const video = e.target as HTMLVideoElement;&#10;              video.play().catch(() =&gt; {});&#10;            }}&#10;            onMouseLeave={(e) =&gt; {&#10;              const video = e.target as HTMLVideoElement;&#10;              video.pause();&#10;              video.currentTime = 0;&#10;            }}&#10;          /&gt;&#10;        ) : (&#10;          &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;        )}&#10;        {summary &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-x-0 bottom-0&quot; onMouseEnter={() =&gt; setIsHovering(true)} onMouseLeave={() =&gt; setIsHovering(false)}&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={(e) =&gt; { e.stopPropagation(); setShowSummary(s =&gt; !s); }}&#10;              className={`w-full text-left group/summary focus:outline-none`}&#10;              aria-expanded={actualOpen}&#10;              aria-controls={`summary-${gem.id}`}&#10;              aria-label={actualOpen ? 'Chiudi sintesi' : 'Apri sintesi'}&#10;            &gt;&#10;              &lt;div className={`relative overflow-hidden transition-all duration-300 ease-out bg-gradient-to-t from-slate-900/90 via-slate-900/70 to-slate-900/20 backdrop-blur-sm text-white ${actualOpen ? 'max-h-60 sm:max-h-72' : 'max-h-16'}`}&gt;&#10;                &lt;div className=&quot;p-3 pr-10&quot;&gt;&#10;                  &lt;p id={`summary-${gem.id}`} className={`text-xs leading-snug whitespace-pre-line ${actualOpen ? '' : 'line-clamp-2'}`}&gt;{summary}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute right-2 top-2 flex items-center gap-1 text-[10px] uppercase font-semibold opacity-80&quot;&gt;&#10;                  &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${actualOpen ? 'rotate-180' : ''}`} /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute inset-0 ring-1 ring-white/10 rounded-t&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;div className=&quot;relative&quot; ref={shareWrapperRef}&gt;&#10;                &lt;button&#10;                  onClick={handleShareClick}&#10;                  className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                  title=&quot;Condividi&quot;&#10;                  aria-label=&quot;Condividi gemma&quot;&#10;                &gt;&#10;                    &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute -top-2 right-0 -translate-y-full z-30 flex gap-1 p-2 rounded-xl bg-white dark:bg-slate-800 shadow-xl ring-1 ring-slate-200 dark:ring-slate-700&quot;&#10;                    onClick={e=&gt;e.stopPropagation()}&#10;                  &gt;&#10;                    &lt;a&#10;                      href={facebookUrl}&#10;                      target=&quot;_blank&quot;&#10;                      rel=&quot;noopener noreferrer&quot;&#10;                      onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;Facebook&quot;&#10;                      title=&quot;Facebook&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot;&#10;                    &gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button&#10;                      onClick={handleInstagram}&#10;                      aria-label=&quot;Instagram (copia link)&quot;&#10;                      title=&quot;Instagram (copia link)&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a&#10;                      href={whatsappUrl}&#10;                      target=&quot;_blank&quot;&#10;                      rel=&quot;noopener noreferrer&quot;&#10;                      onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;WhatsApp&quot;&#10;                      title=&quot;WhatsApp&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a&#10;                      href={emailUrl}&#10;                      onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;Email&quot;&#10;                      title=&quot;Email&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button&#10;                      onClick={handleCopyLink}&#10;                      aria-label=&quot;Copia link&quot;&#10;                      title=&quot;Copia link&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-300 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    onTagClick ? (&#10;                      &lt;button&#10;                        key={tag}&#10;                        type=&quot;button&quot;&#10;                        onClick={(e)=&gt;{ e.stopPropagation(); onTagClick(tag); }}&#10;                        className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-slate-600 dark:text-slate-300 hover:text-indigo-700 dark:hover:text-indigo-200 rounded-full text-xs font-medium transition-colors&quot;&#10;                        aria-label={`Filtra per tag ${tag}`}&#10;                      &gt;{tag}&lt;/button&gt;&#10;                    ) : (&#10;                      &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                      &lt;/span&gt;&#10;                    )&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemDetailView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemDetailView.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon, LightBulbIcon, BookOpenIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon, MagnifyingGlassIcon, TrashIcon } from './icons';&#10;import { ChatBubbleIcon } from './icons';&#10;import { trackEvent, getIdToken } from '../services/firebase';&#10;import { usePageMeta } from '../hooks/usePageMeta';&#10;import Header from './Header';&#10;import { fetchGeneratedQuestionsByGem, fetchDeepTopicSessions, DeepTopicSession, deleteDeepTopicSession, getSessionTitle } from '../services/firestoreService';&#10;import AdminConfirmationModal from './admin/AdminConfirmationModal';&#10;import SectionQuestionsChat from './SectionQuestionsChat';&#10;import MiniThreadSection from './GemDetailSections/MiniThreadSection';&#10;import MythVsRealitySection from './GemDetailSections/MythVsRealitySection';&#10;import FactCardSection from './GemDetailSections/FactCardSection';&#10;import ProsConsSection from './GemDetailSections/ProsConsSection';&#10;import QuickExplainerSection from './GemDetailSections/QuickExplainerSection';&#10;import GemDetailTabs from './GemDetailTabs';&#10;import GemDetailChat from './GemDetailChat';&#10;import UserQuestionItem from './UserQuestionItem';&#10;import { buildParagraphs, getReadingTime, handleProtectedAction } from '../utils/gemUtils';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;  currentUserId?: string; // nuovo per sessioni approfondimenti&#10;}&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels, currentUserId }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;  const [hasAutoScrolled, setHasAutoScrolled] = useState(false);&#10;  const [showShareBar, setShowShareBar] = useState(false); // FIX: aggiunto stato mancante&#10;  const imgRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;  // nuovo stato per tab&#10;  const [activeTab, setActiveTab] = useState&lt;'tips' | 'saggio' | 'approfondimenti'&gt;('tips');&#10;  // stato per chat&#10;  const [isChatOpen, setIsChatOpen] = useState(false);&#10;  const [generatedQuestions, setGeneratedQuestions] = useState&lt;(any)[]&gt;([]);&#10;  const [deepSessions, setDeepSessions] = useState&lt;DeepTopicSession[]&gt;([]);&#10;  const [currentChatSessionId, setCurrentChatSessionId] = useState&lt;string | null&gt;(null);&#10;  const [loadingSessions, setLoadingSessions] = useState(false);&#10;  const [sessionTitles, setSessionTitles] = useState&lt;Record&lt;string,string&gt;&gt;({});&#10;  const [pendingSessionsRefresh, setPendingSessionsRefresh] = useState(false);&#10;  const [sessionsLoaded, setSessionsLoaded] = useState(false); // nuovo per evitare loop su 0 risultati&#10;  const [deleteModalOpen, setDeleteModalOpen] = useState(false);&#10;  const [sessionToDelete, setSessionToDelete] = useState&lt;DeepTopicSession | null&gt;(null);&#10;  // RIMOSSI stati vecchia chat generale&#10;  // const [generalChatOpen, setGeneralChatOpen] = useState(false);&#10;  // const [generalAutoQId, setGeneralAutoQId] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalAutoCustom, setGeneralAutoCustom] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalCustomInput, setGeneralCustomInput] = useState('');&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const rawSummary: string = (gem as any)?.content?.summary || '';&#10;  const rawDescription: string = (gem as any)?.content?.description || '';&#10;  const baseText = rawSummary || rawDescription;&#10;  const descriptionSnippet = baseText ? baseText.replace(/\s+/g,' ').slice(0,180) : 'Gemme di conoscenza su Curiow.';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;&#10;  usePageMeta({&#10;    title: `${gem.title} | Curiow`,&#10;    description: descriptionSnippet,&#10;    image: gem.imageUrl,&#10;    url: currentUrl,&#10;    type: 'article'&#10;  });&#10;&#10;  const handleCopyLink = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(currentUrl);&#10;    } catch {&#10;      const tmp = document.createElement('input');&#10;      tmp.value = currentUrl; document.body.appendChild(tmp); tmp.select(); document.execCommand('copy'); document.body.removeChild(tmp);&#10;    }&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleNativeShare = async () =&gt; {&#10;    if (navigator.share) {&#10;      trackEvent('share_attempt', { channel: 'web_share', gem_id: gem.id });&#10;      try {&#10;        await navigator.share({ title: gem.title, text: shareText, url: currentUrl });&#10;        trackEvent('share', { channel: 'web_share', gem_id: gem.id });&#10;      } catch { /* annullato */ }&#10;    } else {&#10;      handleCopyLink();&#10;    }&#10;  };&#10;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;  // Instagram non ha share URL web: fallback copia link&#10;&#10;  useEffect(() =&gt; {&#10;    // misura dopo cambio tab / gem&#10;    requestAnimationFrame(() =&gt; {});&#10;  }, [activeTab, gem.id]);&#10;&#10;  // Funzione per scrollare il titolo allineandolo appena sotto l'header sticky&#10;  const scrollTitleIntoView = (smooth = false) =&gt; {&#10;    const titleEl = document.getElementById('gem-title');&#10;    if (!titleEl) return;&#10;    const headerEl = document.querySelector('header');&#10;    const headerHeight = headerEl ? (headerEl as HTMLElement).offsetHeight : 0;&#10;    const buffer = 8; // piccolo margine&#10;    const target = titleEl.getBoundingClientRect().top + window.scrollY - headerHeight - buffer;&#10;    window.scrollTo({ top: target &gt;= 0 ? target : 0, behavior: smooth ? 'smooth' : 'auto' });&#10;    setHasAutoScrolled(true);&#10;  };&#10;&#10;  // Scroll iniziale dopo mount/cambio gem (post layout)&#10;  useEffect(() =&gt; {&#10;    setHasAutoScrolled(false);&#10;    // Usa rAF per attendere layout, poi ulteriore timeout breve per carichi asincroni minimi&#10;    requestAnimationFrame(() =&gt; {&#10;      scrollTitleIntoView(false);&#10;      setTimeout(() =&gt; { if (!hasAutoScrolled) scrollTitleIntoView(false); }, 60);&#10;    });&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [gem.id]);&#10;&#10;  // Se l'immagine carica dopo e non abbiamo ancora auto-scrollato, riallinea&#10;  const handleImageLoad = () =&gt; {&#10;    if (!hasAutoScrolled) scrollTitleIntoView(false);&#10;  };&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  useEffect(()=&gt;{&#10;    let mounted = true;&#10;    fetchGeneratedQuestionsByGem(gem.id).then(qs=&gt;{&#10;      if(mounted){&#10;        setGeneratedQuestions(qs);&#10;      }&#10;    }).catch(e=&gt;console.error('Err fetch questions', e));&#10;    return ()=&gt;{ mounted=false; };&#10;  },[gem.id]);&#10;&#10;  // Funzioni domande per sezione&#10;  const getSectionQuestions = (section: string, stepIndex?: number) =&gt; {&#10;    return generatedQuestions.filter(q =&gt; q.section === section &amp;&amp; (section !== 'step' || q.index === stepIndex)).slice(0,3);&#10;  };&#10;  const generalQuestions = generatedQuestions.filter(q =&gt; q.section === 'general').slice(0,3);&#10;&#10;  // Sostituisci renderMiniThread con i nuovi componenti modulari&#10;  // (funzioni inline obsolete rimosse: renderMiniThread, renderMythVsReality, renderFactCard, renderProsCons, renderQuickExplainer)&#10;  // Sostituisci renderStructuredContent con i nuovi componenti modulari&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    const commonProps: any = { getSectionQuestions, generalQuestions, isLoggedIn, onLogin };&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return &lt;MiniThreadSection content={content} {...commonProps} /&gt;;&#10;      case 'myth_vs_reality':&#10;        return &lt;MythVsRealitySection content={content} {...commonProps} /&gt;;&#10;      case 'fact_card':&#10;        return &lt;FactCardSection content={content} {...commonProps} /&gt;;&#10;      case 'pros_cons':&#10;        return &lt;ProsConsSection content={content} {...commonProps} /&gt;;&#10;      case 'quick_explainer':&#10;        return &lt;QuickExplainerSection content={content} {...commonProps} /&gt;;&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;&#10;&#10;  // Testo completo del saggio (nuovo: può essere in gem.content.description)&#10;  const fullDescription: string | undefined = (gem as any)?.content?.description;&#10;&#10;  // Utility: segmentazione in paragrafi leggibili (solo visualizzazione)&#10;  const paragraphs = buildParagraphs(fullDescription);&#10;&#10;  // Calcolo tempo di lettura (200 wpm medio)&#10;  const readingTime = getReadingTime(fullDescription);&#10;&#10;  useEffect(() =&gt; {&#10;    // Log JWT Firebase solo per admin quando si accede al dettaglio di una gemma&#10;    if (user?.role === 'admin') { // confronto stringa per evitare dipendenza aggiuntiva da enum&#10;      getIdToken()&#10;        .then(token =&gt; {&#10;          if (token) {&#10;            console.log('[ADMIN][JWT] Firebase ID Token:', token);&#10;          } else {&#10;            console.log('[ADMIN][JWT] Nessun token disponibile.');&#10;          }&#10;        })&#10;        .catch(err =&gt; console.warn('[ADMIN][JWT] Errore recupero token:', err));&#10;    }&#10;  }, [user?.role, gem.id]);&#10;&#10;  const refreshSessions = async () =&gt; {&#10;    if(!currentUserId) return;&#10;    setLoadingSessions(true);&#10;    try {&#10;      const data = await fetchDeepTopicSessions(gem.id, currentUserId, 100);&#10;      setDeepSessions(data);&#10;      const entries = await Promise.all(&#10;        data.map(async s =&gt; {&#10;          try { const title = await getSessionTitle(s.sessionId || s.id, currentUserId, gem.id); return [s.sessionId || s.id, title] as [string,string]; } catch { return [s.sessionId || s.id, 'Sessione']; }&#10;        })&#10;      );&#10;      setSessionTitles(prev =&gt; ({ ...prev, ...Object.fromEntries(entries) }));&#10;    } catch(e){ console.warn('Err fetch sessions', e);} finally { setLoadingSessions(false); setSessionsLoaded(true); }&#10;  }&#10;  useEffect(()=&gt;{&#10;    const handler = () =&gt; {&#10;      if (activeTab === 'approfondimenti') refreshSessions(); else setPendingSessionsRefresh(true);&#10;    };&#10;    window.addEventListener('curiow-chat-refresh-sessions', handler);&#10;    return () =&gt; window.removeEventListener('curiow-chat-refresh-sessions', handler);&#10;  }, [currentUserId, gem.id, activeTab]);&#10;  useEffect(()=&gt;{&#10;    if (activeTab === 'approfondimenti') {&#10;      if (!sessionsLoaded &amp;&amp; !loadingSessions) {&#10;        refreshSessions();&#10;      } else if (pendingSessionsRefresh &amp;&amp; !loadingSessions) {&#10;        setPendingSessionsRefresh(false);&#10;        refreshSessions();&#10;      }&#10;    }&#10;  }, [activeTab, deepSessions.length, loadingSessions, pendingSessionsRefresh, currentUserId, gem.id, sessionsLoaded]);&#10;  useEffect(()=&gt;{&#10;    const handler = (ev: any) =&gt; { setCurrentChatSessionId(ev.detail?.sessionId || null); };&#10;    window.addEventListener('curiow-chat-current-session', handler);&#10;    return ()=&gt; window.removeEventListener('curiow-chat-current-session', handler);&#10;  },[]);&#10;&#10;  // Gestione apertura chat tramite evento globale - DISABILITATA per evitare conflitti&#10;  useEffect(() =&gt; {&#10;    const openChatHandler = () =&gt; {&#10;      setIsChatOpen(true);&#10;      // RIMOSSO: pushState che può interferire con LoginModal&#10;      window.history.pushState({ chat: true, tab: activeTab }, '', '');&#10;    };&#10;    window.addEventListener('curiow-chat-open', openChatHandler);&#10;    window.addEventListener('curiow-chat-use-session', openChatHandler);&#10;    window.addEventListener('curiow-chat-new-session', openChatHandler);&#10;    return () =&gt; {&#10;      window.removeEventListener('curiow-chat-open', openChatHandler);&#10;      window.removeEventListener('curiow-chat-use-session', openChatHandler);&#10;      window.removeEventListener('curiow-chat-new-session', openChatHandler);&#10;    };&#10;  }, [activeTab]);&#10;&#10;  // Gestione history per chat/tab - SEMPLIFICATA per evitare conflitti con LoginModal&#10;  useEffect(() =&gt; {&#10;    // Solo inizializza lo stato, non fare push&#10;    if (typeof window !== 'undefined') {&#10;      window.history.replaceState({ chat: isChatOpen, tab: activeTab }, '', '');&#10;    }&#10;  }, []);&#10;&#10;  // Listener popstate - SEMPLIFICATO&#10;  useEffect(() =&gt; {&#10;    const onPopState = (ev: PopStateEvent) =&gt; {&#10;      const state = ev.state || {};&#10;      if (state.chat !== undefined &amp;&amp; state.chat !== isChatOpen) {&#10;        setIsChatOpen(state.chat);&#10;      } else if (state.tab &amp;&amp; state.tab !== activeTab) {&#10;        setActiveTab(state.tab);&#10;      } else if (!state.chat &amp;&amp; !state.tab) {&#10;        onBack();&#10;      }&#10;    };&#10;    window.addEventListener('popstate', onPopState);&#10;    return () =&gt; window.removeEventListener('popstate', onPopState);&#10;  }, [isChatOpen, activeTab, onBack]);&#10;&#10;  // Funzione di apertura chat&#10;  const handleOpenChat = () =&gt; {&#10;    setIsChatOpen(true);&#10;    window.history.pushState({ chat: true, tab: activeTab }, '', '');&#10;  };&#10;&#10;  // Funzione di chiusura chat&#10;  const handleCloseChat = () =&gt; {&#10;    setIsChatOpen(false);&#10;    // Invece di pushState, facciamo history.back() per tornare allo stato precedente&#10;    if (window.history.state &amp;&amp; window.history.state.chat) {&#10;      window.history.back();&#10;    }&#10;  };&#10;&#10;  // Logica di back personalizzata&#10;  const handleBack = () =&gt; {&#10;    if (isChatOpen) {&#10;      handleCloseChat();&#10;      return;&#10;    }&#10;    if (activeTab !== 'tips') {&#10;      setActiveTab('tips');&#10;      return;&#10;    }&#10;    onBack();&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={handleBack}&#10;        /&gt;&#10;        &lt;article&gt;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                {/* Immagine prima */}&#10;                &lt;img ref={imgRef} src={gem.imageUrl} alt={gem.title} onLoad={handleImageLoad} className=&quot;w-full h-auto object-cover md:rounded-lg&quot; /&gt;&#10;                {/* Titolo sotto immagine (ancora) */}&#10;                &lt;h1 id=&quot;gem-title&quot; className=&quot;mt-4 text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={()=&gt; setShowShareBar(v=&gt;{const nv=!v; trackEvent('share_bar_toggle',{ open: nv, gem_id: gem.id }); return nv;})}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {navigator.share &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={handleNativeShare}&#10;                        className=&quot;hidden sm:inline-flex items-center space-x-1.5 text-slate-500 dark:text-slate-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-xs&quot;&#10;                      &gt;&#10;                        &lt;span&gt;Share rapido&lt;/span&gt;&#10;                      &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center animate-fade-in&quot;&gt;&#10;                    &lt;a href={facebookUrl} onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Facebook&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot; aria-label=&quot;Condividi su Facebook&quot;&gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={()=&gt;{handleCopyLink(); trackEvent('share',{channel:'instagram_copy', gem_id: gem.id});}} title=&quot;Instagram (copia link)&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot; aria-label=&quot;Condividi su Instagram (copia link)&quot;&gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a href={whatsappUrl} onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;WhatsApp&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot; aria-label=&quot;Condividi su WhatsApp&quot;&gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a href={emailUrl} onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id})} title=&quot;Email&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot; aria-label=&quot;Condividi via Email&quot;&gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={handleCopyLink} title=&quot;Copia link&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300 transition-colors&quot; aria-label=&quot;Copia link&quot;&gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Tabs Tips / Saggio */}&#10;                &lt;div className=&quot;mt-8 flex justify-end&quot;&gt;&#10;                  &lt;div className=&quot;inline-flex items-center gap-1 rounded-full bg-slate-100 dark:bg-slate-800 p-1 shadow-inner ring-1 ring-slate-200/60 dark:ring-slate-700/60&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('tips')}&#10;                      aria-pressed={activeTab==='tips'}&#10;                      title=&quot;Vista Tips (strutturata)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='tips' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;LightBulbIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='tips' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('saggio')}&#10;                      aria-pressed={activeTab==='saggio'}&#10;                      title=&quot;Vista Saggio (testo completo)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='saggio' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;BookOpenIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='saggio' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('approfondimenti')}&#10;                      aria-pressed={activeTab==='approfondimenti'}&#10;                      title=&quot;Vista Approfondimenti (sessioni)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='approfondimenti' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;ChatBubbleIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='approfondimenti' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tab panels: mostra solo il tab attivo, niente absolute, niente wrapper con altezza */}&#10;                &lt;div className=&quot;mt-6 relative&quot;&gt;&#10;                  {activeTab === 'tips' &amp;&amp; (&#10;                    (() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                      &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription || ''}&lt;/p&gt;&#10;                    ); })()&#10;                  )}&#10;                  {activeTab === 'saggio' &amp;&amp; (&#10;                    fullDescription ? (&#10;                      paragraphs.length &gt; 0 ? (&#10;                        &lt;div className=&quot;prose prose-slate dark:prose-invert max-w-none&quot;&gt;&#10;                          {readingTime &amp;&amp; (&#10;                            &lt;div className=&quot;mb-6 flex items-center text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400 gap-3&quot;&gt;&#10;                              &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 font-semibold&quot;&gt;⏱ {readingTime.display}&lt;/span&gt;&#10;                              &lt;span className=&quot;text-slate-400 dark:text-slate-500&quot;&gt;{readingTime.words} parole&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                          {paragraphs.map((p, i) =&gt; {&#10;                            const isKey = p.includes(':') || /—/.test(p);&#10;                            return (&#10;                              &lt;p&#10;                                key={i}&#10;                                className={`text-base md:text-lg leading-relaxed md:leading-loose tracking-[0.015em] text-slate-700 dark:text-slate-300 text-justify hyphens-auto break-words mb-5 last:mb-0 ${i===0 ? 'first-letter:text-4xl first-letter:font-semibold first-letter:float-left first-letter:mr-2 first-letter:mt-1 first-letter:leading-[0.9]' : ''} ${isKey ? 'border-l-2 border-indigo-300 dark:border-indigo-500 pl-3 bg-indigo-50/40 dark:bg-indigo-500/5 rounded-sm' : ''}`}&#10;                                style={{ hyphens: 'auto' }}&#10;                              &gt;&#10;                                {p}&#10;                              &lt;/p&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription}&lt;/p&gt;&#10;                      )&#10;                    ) : (&#10;                      &lt;p className=&quot;italic text-slate-500 dark:text-slate-400&quot;&gt;Nessun testo disponibile.&lt;/p&gt;&#10;                    )&#10;                  )}&#10;                  {activeTab === 'approfondimenti' &amp;&amp; (&#10;                    &lt;div className=&quot;overflow-auto px-1 py-1&quot;&gt;&#10;                      {/* ...contenuto approfondimenti come prima... */}&#10;                      {!isLoggedIn &amp;&amp; &lt;p className=&quot;text-sm text-slate-500 dark:text-slate-400&quot;&gt;Accedi per vedere le tue sessioni di approfondimento.&lt;/p&gt;}&#10;                      {isLoggedIn &amp;&amp; (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                            &lt;h3 className=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Sessioni Approfondimenti&lt;/h3&gt;&#10;                            &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                              &lt;button onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-new-session', {&#10;                                detail: { questions: generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }})) }&#10;                            }))} className=&quot;px-2 py-1 text-xs rounded-md bg-indigo-600 text-white hover:bg-indigo-700&quot;&gt;Nuova&lt;/button&gt;&#10;                              &lt;button onClick={refreshSessions} className=&quot;px-2 py-1 text-xs rounded-md bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600&quot;&gt;Refresh&lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          {loadingSessions &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Caricamento sessioni...&lt;/p&gt;}&#10;                          {!loadingSessions &amp;&amp; deepSessions.length===0 &amp;&amp; sessionsLoaded &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Non sono ancora presenti approfondimenti.&lt;/p&gt;}&#10;                          &lt;ul className=&quot;divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md overflow-hidden&quot;&gt;&#10;                            {deepSessions.map(s =&gt; {&#10;                              const modified = (s as any).modifiedAt?.seconds ? new Date((s as any).modifiedAt.seconds*1000) : (s.modifiedAt instanceof Date ? s.modifiedAt : new Date());&#10;                              const titleRaw = sessionTitles[s.sessionId||s.id] || (s as any).firstQuestion || 'Sessione';&#10;                              const title = titleRaw.length &gt; 80 ? titleRaw.slice(0,77)+'…' : titleRaw;&#10;                              const isActive = currentChatSessionId &amp;&amp; (currentChatSessionId === (s.sessionId||s.id));&#10;                              return (&#10;                                &lt;li key={s.id} className={`p-3 hover:bg-indigo-50 dark:hover:bg-slate-800 cursor-pointer flex items-start gap-3 group ${isActive ? 'bg-indigo-50 dark:bg-slate-800/60' : ''}`}&#10;                                    onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-use-session',{ detail:{ sessionId: s.sessionId||s.id }}))}&gt;&#10;                                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                    &lt;p className=&quot;text-xs font-medium text-slate-700 dark:text-slate-200 line-clamp-2&quot; title={titleRaw}&gt;{title}&lt;/p&gt;&#10;                                    &lt;p className=&quot;text-[10px] text-slate-500 dark:text-slate-400&quot;&gt;Aggiornata: {modified.toLocaleString()}&lt;/p&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex flex-col items-end gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                      onClick={(e)=&gt;{ e.stopPropagation(); setSessionToDelete(s); setDeleteModalOpen(true); }}&#10;                                      className=&quot;opacity-0 group-hover:opacity-100 sm:opacity-100 transition text-slate-500 hover:text-red-600&quot;&#10;                                      title=&quot;Elimina sessione&quot;&#10;                                    &gt;&#10;                                      &lt;TrashIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                                    &lt;/button&gt;&#10;                                    &lt;SparklesIcon className=&quot;w-4 h-4 text-indigo-500&quot; /&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/li&gt;&#10;                              );&#10;                            })}&#10;                          &lt;/ul&gt;&#10;                          &lt;p className=&quot;text-[10px] text-slate-400 dark:text-slate-500&quot;&gt;Le sessioni si aggiornano quando invii nuove domande.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Domande generate */}&#10;                {false &amp;&amp; generatedQuestions.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mt-8&quot;&gt;{/* Blocco disattivato - duplicato */}&lt;/div&gt;&#10;                )}&#10;&#10;                {/* Domande Generali (prima delle fonti) */}&#10;                {false &amp;&amp; generalQuestions.length&gt;0 &amp;&amp; (&#10;                  &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6 relative space-y-4&quot;&gt;&#10;                    {/* Sezione disattivata: ora sidepanel dedicato */}&#10;                  &lt;/section&gt;&#10;                )}&#10;&#10;                {/* Fonti */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;      &lt;/div&gt;&#10;      &lt;SectionQuestionsChat&#10;        gemId={gem.id}&#10;        elementName=&quot;general&quot;&#10;        questions={generalQuestions.map(q=&gt;({...q, element:{ name: 'general', index:0, title: null, test: null }}))}&#10;        gemTitle={gem.title}&#10;        gemDescription={rawDescription || rawSummary || ''}&#10;        userId={currentUserId}&#10;        open={isChatOpen}&#10;        onClose={handleCloseChat}&#10;        onOpen={handleOpenChat}&#10;        isLoggedIn={isLoggedIn}&#10;        onLogin={onLogin}&#10;      /&gt;&#10;      &lt;AdminConfirmationModal&#10;        isOpen={deleteModalOpen}&#10;        onClose={()=&gt;{ setDeleteModalOpen(false); setSessionToDelete(null); }}&#10;        onConfirm={()=&gt;{ if(sessionToDelete &amp;&amp; currentUserId){ deleteDeepTopicSession(sessionToDelete.sessionId||sessionToDelete.id, currentUserId).then(()=&gt;{ if(currentChatSessionId === (sessionToDelete.sessionId||sessionToDelete.id)) { window.dispatchEvent(new CustomEvent('curiow-chat-new-session',{ detail:{ questions: [] }})); } refreshSessions(); }); }}}&#10;        title=&quot;Elimina sessione&quot;&#10;        message=&quot;Sei sicuro di voler eliminare definitivamente questa sessione di approfondimento? L'operazione non è reversibile.&quot;&#10;        actionText=&quot;Elimina&quot;&#10;        actionType=&quot;danger&quot;&#10;      /&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon, LightBulbIcon, BookOpenIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon, MagnifyingGlassIcon, TrashIcon } from './icons';&#10;import { ChatBubbleIcon } from './icons';&#10;import { trackEvent, getIdToken } from '../services/firebase';&#10;import { usePageMeta } from '../hooks/usePageMeta';&#10;import Header from './Header';&#10;import { fetchGeneratedQuestionsByGem, fetchDeepTopicSessions, DeepTopicSession, deleteDeepTopicSession, getSessionTitle } from '../services/firestoreService';&#10;import AdminConfirmationModal from './admin/AdminConfirmationModal';&#10;import SectionQuestionsChat from './SectionQuestionsChat';&#10;import MiniThreadSection from './GemDetailSections/MiniThreadSection';&#10;import MythVsRealitySection from './GemDetailSections/MythVsRealitySection';&#10;import FactCardSection from './GemDetailSections/FactCardSection';&#10;import ProsConsSection from './GemDetailSections/ProsConsSection';&#10;import QuickExplainerSection from './GemDetailSections/QuickExplainerSection';&#10;import GemDetailTabs from './GemDetailTabs';&#10;import GemDetailChat from './GemDetailChat';&#10;import UserQuestionItem from './UserQuestionItem';&#10;import { buildParagraphs, getReadingTime, handleProtectedAction } from '../utils/gemUtils';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;  currentUserId?: string; // nuovo per sessioni approfondimenti&#10;}&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels, currentUserId }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;  const [hasAutoScrolled, setHasAutoScrolled] = useState(false);&#10;  const [showShareBar, setShowShareBar] = useState(false); // FIX: aggiunto stato mancante&#10;  const imgRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;  // nuovo stato per tab&#10;  const [activeTab, setActiveTab] = useState&lt;'tips' | 'saggio' | 'approfondimenti'&gt;('tips');&#10;  // stato per chat&#10;  const [isChatOpen, setIsChatOpen] = useState(false);&#10;  const [generatedQuestions, setGeneratedQuestions] = useState&lt;(any)[]&gt;([]);&#10;  const [deepSessions, setDeepSessions] = useState&lt;DeepTopicSession[]&gt;([]);&#10;  const [currentChatSessionId, setCurrentChatSessionId] = useState&lt;string | null&gt;(null);&#10;  const [loadingSessions, setLoadingSessions] = useState(false);&#10;  const [sessionTitles, setSessionTitles] = useState&lt;Record&lt;string,string&gt;&gt;({});&#10;  const [pendingSessionsRefresh, setPendingSessionsRefresh] = useState(false);&#10;  const [sessionsLoaded, setSessionsLoaded] = useState(false); // nuovo per evitare loop su 0 risultati&#10;  const [deleteModalOpen, setDeleteModalOpen] = useState(false);&#10;  const [sessionToDelete, setSessionToDelete] = useState&lt;DeepTopicSession | null&gt;(null);&#10;  // RIMOSSI stati vecchia chat generale&#10;  // const [generalChatOpen, setGeneralChatOpen] = useState(false);&#10;  // const [generalAutoQId, setGeneralAutoQId] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalAutoCustom, setGeneralAutoCustom] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalCustomInput, setGeneralCustomInput] = useState('');&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const rawSummary: string = (gem as any)?.content?.summary || '';&#10;  const rawDescription: string = (gem as any)?.content?.description || '';&#10;  const baseText = rawSummary || rawDescription;&#10;  const descriptionSnippet = baseText ? baseText.replace(/\s+/g,' ').slice(0,180) : 'Gemme di conoscenza su Curiow.';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;&#10;  usePageMeta({&#10;    title: `${gem.title} | Curiow`,&#10;    description: descriptionSnippet,&#10;    image: gem.imageUrl,&#10;    url: currentUrl,&#10;    type: 'article'&#10;  });&#10;&#10;  const handleCopyLink = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(currentUrl);&#10;    } catch {&#10;      const tmp = document.createElement('input');&#10;      tmp.value = currentUrl; document.body.appendChild(tmp); tmp.select(); document.execCommand('copy'); document.body.removeChild(tmp);&#10;    }&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleNativeShare = async () =&gt; {&#10;    if (navigator.share) {&#10;      trackEvent('share_attempt', { channel: 'web_share', gem_id: gem.id });&#10;      try {&#10;        await navigator.share({ title: gem.title, text: shareText, url: currentUrl });&#10;        trackEvent('share', { channel: 'web_share', gem_id: gem.id });&#10;      } catch { /* annullato */ }&#10;    } else {&#10;      handleCopyLink();&#10;    }&#10;  };&#10;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;  // Instagram non ha share URL web: fallback copia link&#10;&#10;  useEffect(() =&gt; {&#10;    // misura dopo cambio tab / gem&#10;    requestAnimationFrame(() =&gt; {});&#10;  }, [activeTab, gem.id]);&#10;&#10;  // Funzione per scrollare il titolo allineandolo appena sotto l'header sticky&#10;  const scrollTitleIntoView = (smooth = false) =&gt; {&#10;    const titleEl = document.getElementById('gem-title');&#10;    if (!titleEl) return;&#10;    const headerEl = document.querySelector('header');&#10;    const headerHeight = headerEl ? (headerEl as HTMLElement).offsetHeight : 0;&#10;    const buffer = 8; // piccolo margine&#10;    const target = titleEl.getBoundingClientRect().top + window.scrollY - headerHeight - buffer;&#10;    window.scrollTo({ top: target &gt;= 0 ? target : 0, behavior: smooth ? 'smooth' : 'auto' });&#10;    setHasAutoScrolled(true);&#10;  };&#10;&#10;  // Scroll iniziale dopo mount/cambio gem (post layout)&#10;  useEffect(() =&gt; {&#10;    setHasAutoScrolled(false);&#10;    // Usa rAF per attendere layout, poi ulteriore timeout breve per carichi asincroni minimi&#10;    requestAnimationFrame(() =&gt; {&#10;      scrollTitleIntoView(false);&#10;      setTimeout(() =&gt; { if (!hasAutoScrolled) scrollTitleIntoView(false); }, 60);&#10;    });&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [gem.id]);&#10;&#10;  // Se l'immagine carica dopo e non abbiamo ancora auto-scrollato, riallinea&#10;  const handleImageLoad = () =&gt; {&#10;    if (!hasAutoScrolled) scrollTitleIntoView(false);&#10;  };&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  useEffect(()=&gt;{&#10;    let mounted = true;&#10;    fetchGeneratedQuestionsByGem(gem.id).then(qs=&gt;{&#10;      if(mounted){&#10;        setGeneratedQuestions(qs);&#10;      }&#10;    }).catch(e=&gt;console.error('Err fetch questions', e));&#10;    return ()=&gt;{ mounted=false; };&#10;  },[gem.id]);&#10;&#10;  // Funzioni domande per sezione&#10;  const getSectionQuestions = (section: string, stepIndex?: number) =&gt; {&#10;    return generatedQuestions.filter(q =&gt; q.section === section &amp;&amp; (section !== 'step' || q.index === stepIndex)).slice(0,3);&#10;  };&#10;  const generalQuestions = generatedQuestions.filter(q =&gt; q.section === 'general').slice(0,3);&#10;&#10;  // Sostituisci renderMiniThread con i nuovi componenti modulari&#10;  // (funzioni inline obsolete rimosse: renderMiniThread, renderMythVsReality, renderFactCard, renderProsCons, renderQuickExplainer)&#10;  // Sostituisci renderStructuredContent con i nuovi componenti modulari&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    const commonProps: any = { getSectionQuestions, generalQuestions, isLoggedIn, onLogin };&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return &lt;MiniThreadSection content={content} {...commonProps} /&gt;;&#10;      case 'myth_vs_reality':&#10;        return &lt;MythVsRealitySection content={content} {...commonProps} /&gt;;&#10;      case 'fact_card':&#10;        return &lt;FactCardSection content={content} {...commonProps} /&gt;;&#10;      case 'pros_cons':&#10;        return &lt;ProsConsSection content={content} {...commonProps} /&gt;;&#10;      case 'quick_explainer':&#10;        return &lt;QuickExplainerSection content={content} {...commonProps} /&gt;;&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;&#10;&#10;  // Testo completo del saggio (nuovo: può essere in gem.content.description)&#10;  const fullDescription: string | undefined = (gem as any)?.content?.description;&#10;&#10;  // Utility: segmentazione in paragrafi leggibili (solo visualizzazione)&#10;  const paragraphs = buildParagraphs(fullDescription);&#10;&#10;  // Calcolo tempo di lettura (200 wpm medio)&#10;  const readingTime = getReadingTime(fullDescription);&#10;&#10;  useEffect(() =&gt; {&#10;    // Log JWT Firebase solo per admin quando si accede al dettaglio di una gemma&#10;    if (user?.role === 'admin') { // confronto stringa per evitare dipendenza aggiuntiva da enum&#10;      getIdToken()&#10;        .then(token =&gt; {&#10;          if (token) {&#10;            console.log('[ADMIN][JWT] Firebase ID Token:', token);&#10;          } else {&#10;            console.log('[ADMIN][JWT] Nessun token disponibile.');&#10;          }&#10;        })&#10;        .catch(err =&gt; console.warn('[ADMIN][JWT] Errore recupero token:', err));&#10;    }&#10;  }, [user?.role, gem.id]);&#10;&#10;  const refreshSessions = async () =&gt; {&#10;    if(!currentUserId) return;&#10;    setLoadingSessions(true);&#10;    try {&#10;      const data = await fetchDeepTopicSessions(gem.id, currentUserId, 100);&#10;      setDeepSessions(data);&#10;      const entries = await Promise.all(&#10;        data.map(async s =&gt; {&#10;          try { const title = await getSessionTitle(s.sessionId || s.id, currentUserId, gem.id); return [s.sessionId || s.id, title] as [string,string]; } catch { return [s.sessionId || s.id, 'Sessione']; }&#10;        })&#10;      );&#10;      setSessionTitles(prev =&gt; ({ ...prev, ...Object.fromEntries(entries) }));&#10;    } catch(e){ console.warn('Err fetch sessions', e);} finally { setLoadingSessions(false); setSessionsLoaded(true); }&#10;  }&#10;  useEffect(()=&gt;{&#10;    const handler = () =&gt; {&#10;      if (activeTab === 'approfondimenti') refreshSessions(); else setPendingSessionsRefresh(true);&#10;    };&#10;    window.addEventListener('curiow-chat-refresh-sessions', handler);&#10;    return () =&gt; window.removeEventListener('curiow-chat-refresh-sessions', handler);&#10;  }, [currentUserId, gem.id, activeTab]);&#10;  useEffect(()=&gt;{&#10;    if (activeTab === 'approfondimenti') {&#10;      if (!sessionsLoaded &amp;&amp; !loadingSessions) {&#10;        refreshSessions();&#10;      } else if (pendingSessionsRefresh &amp;&amp; !loadingSessions) {&#10;        setPendingSessionsRefresh(false);&#10;        refreshSessions();&#10;      }&#10;    }&#10;  }, [activeTab, deepSessions.length, loadingSessions, pendingSessionsRefresh, currentUserId, gem.id, sessionsLoaded]);&#10;  useEffect(()=&gt;{&#10;    const handler = (ev: any) =&gt; { setCurrentChatSessionId(ev.detail?.sessionId || null); };&#10;    window.addEventListener('curiow-chat-current-session', handler);&#10;    return ()=&gt; window.removeEventListener('curiow-chat-current-session', handler);&#10;  },[]);&#10;&#10;  // Gestione apertura chat tramite evento globale - DISABILITATA per evitare conflitti&#10;  useEffect(() =&gt; {&#10;    const openChatHandler = () =&gt; {&#10;      setIsChatOpen(true);&#10;      // RIMOSSO: pushState che può interferire con LoginModal&#10;      window.history.pushState({ chat: true, tab: activeTab }, '', '');&#10;    };&#10;    window.addEventListener('curiow-chat-open', openChatHandler);&#10;    window.addEventListener('curiow-chat-use-session', openChatHandler);&#10;    window.addEventListener('curiow-chat-new-session', openChatHandler);&#10;    return () =&gt; {&#10;      window.removeEventListener('curiow-chat-open', openChatHandler);&#10;      window.removeEventListener('curiow-chat-use-session', openChatHandler);&#10;      window.removeEventListener('curiow-chat-new-session', openChatHandler);&#10;    };&#10;  }, [activeTab]);&#10;&#10;  // Gestione history per chat/tab - SEMPLIFICATA per evitare conflitti con LoginModal&#10;  useEffect(() =&gt; {&#10;    // Solo inizializza lo stato, non fare push&#10;    if (typeof window !== 'undefined') {&#10;      window.history.replaceState({ chat: isChatOpen, tab: activeTab }, '', '');&#10;    }&#10;  }, []);&#10;&#10;  // Listener popstate - SEMPLIFICATO&#10;  useEffect(() =&gt; {&#10;    const onPopState = (ev: PopStateEvent) =&gt; {&#10;      const state = ev.state || {};&#10;      if (state.chat !== undefined &amp;&amp; state.chat !== isChatOpen) {&#10;        setIsChatOpen(state.chat);&#10;      } else if (state.tab &amp;&amp; state.tab !== activeTab) {&#10;        setActiveTab(state.tab);&#10;      } else if (!state.chat &amp;&amp; !state.tab) {&#10;        onBack();&#10;      }&#10;    };&#10;    window.addEventListener('popstate', onPopState);&#10;    return () =&gt; window.removeEventListener('popstate', onPopState);&#10;  }, [isChatOpen, activeTab, onBack]);&#10;&#10;  // Funzione di apertura chat&#10;  const handleOpenChat = () =&gt; {&#10;    setIsChatOpen(true);&#10;    window.history.pushState({ chat: true, tab: activeTab }, '', '');&#10;  };&#10;&#10;  // Funzione di chiusura chat&#10;  const handleCloseChat = () =&gt; {&#10;    setIsChatOpen(false);&#10;    // Invece di pushState, facciamo history.back() per tornare allo stato precedente&#10;    if (window.history.state &amp;&amp; window.history.state.chat) {&#10;      window.history.back();&#10;    }&#10;  };&#10;&#10;  // Logica di back personalizzata&#10;  const handleBack = () =&gt; {&#10;    if (isChatOpen) {&#10;      handleCloseChat();&#10;      return;&#10;    }&#10;    if (activeTab !== 'tips') {&#10;      setActiveTab('tips');&#10;      return;&#10;    }&#10;    onBack();&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={handleBack}&#10;        /&gt;&#10;        &lt;article&gt;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                {/* Immagine/Video prima */}&#10;                {gem.videoUrl ? (&#10;                  &lt;video&#10;                    src={gem.videoUrl}&#10;                    className=&quot;w-full h-auto object-cover md:rounded-lg&quot;&#10;                    muted&#10;                    loop&#10;                    playsInline&#10;                    onMouseEnter={(e) =&gt; {&#10;                      const video = e.target as HTMLVideoElement;&#10;                      video.play().catch(() =&gt; {});&#10;                    }}&#10;                    onMouseLeave={(e) =&gt; {&#10;                      const video = e.target as HTMLVideoElement;&#10;                      video.pause();&#10;                      video.currentTime = 0;&#10;                    }}&#10;                  /&gt;&#10;                ) : (&#10;                  &lt;img ref={imgRef} src={gem.imageUrl} alt={gem.title} onLoad={handleImageLoad} className=&quot;w-full h-auto object-cover md:rounded-lg&quot; /&gt;&#10;                )}&#10;                {/* Titolo sotto immagine (ancora) */}&#10;                &lt;h1 id=&quot;gem-title&quot; className=&quot;mt-4 text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={()=&gt; setShowShareBar(v=&gt;{const nv=!v; trackEvent('share_bar_toggle',{ open: nv, gem_id: gem.id }); return nv;})}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {navigator.share &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={handleNativeShare}&#10;                        className=&quot;hidden sm:inline-flex items-center space-x-1.5 text-slate-500 dark:text-slate-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-xs&quot;&#10;                      &gt;&#10;                        &lt;span&gt;Share rapido&lt;/span&gt;&#10;                      &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center animate-fade-in&quot;&gt;&#10;                    &lt;a href={facebookUrl} onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Facebook&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot; aria-label=&quot;Condividi su Facebook&quot;&gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={()=&gt;{handleCopyLink(); trackEvent('share',{channel:'instagram_copy', gem_id: gem.id});}} title=&quot;Instagram (copia link)&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot; aria-label=&quot;Condividi su Instagram (copia link)&quot;&gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a href={whatsappUrl} onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;WhatsApp&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot; aria-label=&quot;Condividi su WhatsApp&quot;&gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a href={emailUrl} onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id})} title=&quot;Email&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot; aria-label=&quot;Condividi via Email&quot;&gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={handleCopyLink} title=&quot;Copia link&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300 transition-colors&quot; aria-label=&quot;Copia link&quot;&gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Tabs Tips / Saggio */}&#10;                &lt;div className=&quot;mt-8 flex justify-end&quot;&gt;&#10;                  &lt;div className=&quot;inline-flex items-center gap-1 rounded-full bg-slate-100 dark:bg-slate-800 p-1 shadow-inner ring-1 ring-slate-200/60 dark:ring-slate-700/60&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('tips')}&#10;                      aria-pressed={activeTab==='tips'}&#10;                      title=&quot;Vista Tips (strutturata)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='tips' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;LightBulbIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='tips' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('saggio')}&#10;                      aria-pressed={activeTab==='saggio'}&#10;                      title=&quot;Vista Saggio (testo completo)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='saggio' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;BookOpenIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='saggio' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('approfondimenti')}&#10;                      aria-pressed={activeTab==='approfondimenti'}&#10;                      title=&quot;Vista Approfondimenti (sessioni)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='approfondimenti' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;ChatBubbleIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='approfondimenti' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Tab panels: mostra solo il tab attivo, niente absolute, niente wrapper con altezza */}&#10;                &lt;div className=&quot;mt-6 relative&quot;&gt;&#10;                  {activeTab === 'tips' &amp;&amp; (&#10;                    (() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                      &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription || ''}&lt;/p&gt;&#10;                    ); })()&#10;                  )}&#10;                  {activeTab === 'saggio' &amp;&amp; (&#10;                    fullDescription ? (&#10;                      paragraphs.length &gt; 0 ? (&#10;                        &lt;div className=&quot;prose prose-slate dark:prose-invert max-w-none&quot;&gt;&#10;                          {readingTime &amp;&amp; (&#10;                            &lt;div className=&quot;mb-6 flex items-center text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400 gap-3&quot;&gt;&#10;                              &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 font-semibold&quot;&gt;⏱ {readingTime.display}&lt;/span&gt;&#10;                              &lt;span className=&quot;text-slate-400 dark:text-slate-500&quot;&gt;{readingTime.words} parole&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                          {paragraphs.map((p, i) =&gt; {&#10;                            const isKey = p.includes(':') || /—/.test(p);&#10;                            return (&#10;                              &lt;p&#10;                                key={i}&#10;                                className={`text-base md:text-lg leading-relaxed md:leading-loose tracking-[0.015em] text-slate-700 dark:text-slate-300 text-justify hyphens-auto break-words mb-5 last:mb-0 ${i===0 ? 'first-letter:text-4xl first-letter:font-semibold first-letter:float-left first-letter:mr-2 first-letter:mt-1 first-letter:leading-[0.9]' : ''} ${isKey ? 'border-l-2 border-indigo-300 dark:border-indigo-500 pl-3 bg-indigo-50/40 dark:bg-indigo-500/5 rounded-sm' : ''}`}&#10;                                style={{ hyphens: 'auto' }}&#10;                              &gt;&#10;                                {p}&#10;                              &lt;/p&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription}&lt;/p&gt;&#10;                      )&#10;                    ) : (&#10;                      &lt;p className=&quot;italic text-slate-500 dark:text-slate-400&quot;&gt;Nessun testo disponibile.&lt;/p&gt;&#10;                    )&#10;                  )}&#10;                  {activeTab === 'approfondimenti' &amp;&amp; (&#10;                    &lt;div className=&quot;overflow-auto px-1 py-1&quot;&gt;&#10;                      {/* ...contenuto approfondimenti come prima... */}&#10;                      {!isLoggedIn &amp;&amp; &lt;p className=&quot;text-sm text-slate-500 dark:text-slate-400&quot;&gt;Accedi per vedere le tue sessioni di approfondimento.&lt;/p&gt;}&#10;                      {isLoggedIn &amp;&amp; (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                            &lt;h3 className=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Sessioni Approfondimenti&lt;/h3&gt;&#10;                            &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                              &lt;button onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-new-session', {&#10;                                detail: { questions: generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }})) }&#10;                            }))} className=&quot;px-2 py-1 text-xs rounded-md bg-indigo-600 text-white hover:bg-indigo-700&quot;&gt;Nuova&lt;/button&gt;&#10;                              &lt;button onClick={refreshSessions} className=&quot;px-2 py-1 text-xs rounded-md bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600&quot;&gt;Refresh&lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          {loadingSessions &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Caricamento sessioni...&lt;/p&gt;}&#10;                          {!loadingSessions &amp;&amp; deepSessions.length===0 &amp;&amp; sessionsLoaded &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Non sono ancora presenti approfondimenti.&lt;/p&gt;}&#10;                          &lt;ul className=&quot;divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md overflow-hidden&quot;&gt;&#10;                            {deepSessions.map(s =&gt; {&#10;                              const modified = (s as any).modifiedAt?.seconds ? new Date((s as any).modifiedAt.seconds*1000) : (s.modifiedAt instanceof Date ? s.modifiedAt : new Date());&#10;                              const titleRaw = sessionTitles[s.sessionId||s.id] || (s as any).firstQuestion || 'Sessione';&#10;                              const title = titleRaw.length &gt; 80 ? titleRaw.slice(0,77)+'…' : titleRaw;&#10;                              const isActive = currentChatSessionId &amp;&amp; (currentChatSessionId === (s.sessionId||s.id));&#10;                              return (&#10;                                &lt;li key={s.id} className={`p-3 hover:bg-indigo-50 dark:hover:bg-slate-800 cursor-pointer flex items-start gap-3 group ${isActive ? 'bg-indigo-50 dark:bg-slate-800/60' : ''}`}&#10;                                    onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-use-session',{ detail:{ sessionId: s.sessionId||s.id }}))}&gt;&#10;                                  &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                    &lt;p className=&quot;text-xs font-medium text-slate-700 dark:text-slate-200 line-clamp-2&quot; title={titleRaw}&gt;{title}&lt;/p&gt;&#10;                                    &lt;p className=&quot;text-[10px] text-slate-500 dark:text-slate-400&quot;&gt;Aggiornata: {modified.toLocaleString()}&lt;/p&gt;&#10;                                  &lt;/div&gt;&#10;                                  &lt;div className=&quot;flex flex-col items-end gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                      onClick={(e)=&gt;{ e.stopPropagation(); setSessionToDelete(s); setDeleteModalOpen(true); }}&#10;                                      className=&quot;opacity-0 group-hover:opacity-100 sm:opacity-100 transition text-slate-500 hover:text-red-600&quot;&#10;                                      title=&quot;Elimina sessione&quot;&#10;                                    &gt;&#10;                                      &lt;TrashIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                                    &lt;/button&gt;&#10;                                    &lt;SparklesIcon className=&quot;w-4 h-4 text-indigo-500&quot; /&gt;&#10;                                  &lt;/div&gt;&#10;                                &lt;/li&gt;&#10;                              );&#10;                            })}&#10;                          &lt;/ul&gt;&#10;                          &lt;p className=&quot;text-[10px] text-slate-400 dark:text-slate-500&quot;&gt;Le sessioni si aggiornano quando invii nuove domande.&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Domande generate */}&#10;                {false &amp;&amp; generatedQuestions.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mt-8&quot;&gt;{/* Blocco disattivato - duplicato */}&lt;/div&gt;&#10;                )}&#10;&#10;                {/* Domande Generali (prima delle fonti) */}&#10;                {false &amp;&amp; generalQuestions.length&gt;0 &amp;&amp; (&#10;                  &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6 relative space-y-4&quot;&gt;&#10;                    {/* Sezione disattivata: ora sidepanel dedicato */}&#10;                  &lt;/section&gt;&#10;                )}&#10;&#10;                {/* Fonti */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;      &lt;/div&gt;&#10;      &lt;SectionQuestionsChat&#10;        gemId={gem.id}&#10;        elementName=&quot;general&quot;&#10;        questions={generalQuestions.map(q=&gt;({...q, element:{ name: 'general', index:0, title: null, test: null }}))}&#10;        gemTitle={gem.title}&#10;        gemDescription={rawDescription || rawSummary || ''}&#10;        userId={currentUserId}&#10;        open={isChatOpen}&#10;        onClose={handleCloseChat}&#10;        onOpen={handleOpenChat}&#10;        isLoggedIn={isLoggedIn}&#10;        onLogin={onLogin}&#10;      /&gt;&#10;      &lt;AdminConfirmationModal&#10;        isOpen={deleteModalOpen}&#10;        onClose={()=&gt;{ setDeleteModalOpen(false); setSessionToDelete(null); }}&#10;        onConfirm={()=&gt;{ if(sessionToDelete &amp;&amp; currentUserId){ deleteDeepTopicSession(sessionToDelete.sessionId||sessionToDelete.id, currentUserId).then(()=&gt;{ if(currentChatSessionId === (sessionToDelete.sessionId||sessionToDelete.id)) { window.dispatchEvent(new CustomEvent('curiow-chat-new-session',{ detail:{ questions: [] }})); } refreshSessions(); }); }}}&#10;        title=&quot;Elimina sessione&quot;&#10;        message=&quot;Sei sicuro di voler eliminare definitivamente questa sessione di approfondimento? L'operazione non è reversibile.&quot;&#10;        actionText=&quot;Elimina&quot;&#10;        actionType=&quot;danger&quot;&#10;      /&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/GemsManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/GemsManagement.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { Gem, Topic, Channel, GemContent } from '../../types';&#10;import {&#10;  fetchAllGems,&#10;  createGem,&#10;  updateGem,&#10;  deleteGem,&#10;  searchGems,&#10;  fetchAllChannels,&#10;  addGeneratedQuestion,&#10;  fetchGeneratedQuestionsByGem&#10;} from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;import AdminPageLayout from './AdminPageLayout';&#10;import AdminConfirmationModal from './AdminConfirmationModal';&#10;import { callCuriowApi } from '../../services/apiService';&#10;&#10;interface GemsManagementProps {&#10;  currentUser: { role: any; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;interface GemFormData {&#10;  title: string;&#10;  description: string; // sarà salvata in content.description&#10;  channelId: string;&#10;  imageUrl: string;&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Array&lt;{ uri: string; title: string }&gt;;&#10;}&#10;&#10;interface StructuredAIQuestion {&#10;  section: string; // label mostrata&#10;  sectionId?: string; // id originale (myth, reality, ecc.)&#10;  items: { testo: string; tipologia?: string; stepIndex?: number }[];&#10;}&#10;&#10;const GemsManagement: React.FC&lt;GemsManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [gems, setGems] = useState&lt;(Gem &amp; { id: string })[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;(Channel &amp; { id: string })[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [showCreateModal, setShowCreateModal] = useState(false);&#10;  const [editingGem, setEditingGem] = useState&lt;(Gem &amp; { id: string }) | null&gt;(null);&#10;&#10;  // Filtri e ricerca&#10;  const [searchTerm, setSearchTerm] = useState('');&#10;  const [channelFilter, setChannelFilter] = useState&lt;string&gt;('all');&#10;  const [tagFilter, setTagFilter] = useState('');&#10;  const [sortBy, setSortBy] = useState&lt;'title' | 'topic' | 'created'&gt;('title');&#10;  const [sortOrder, setSortOrder] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  // Paginazione&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [gemsPerPage, setGemsPerPage] = useState(10);&#10;&#10;  // Accordion per descrizioni&#10;  const [expandedGems, setExpandedGems] = useState&lt;Set&lt;string&gt;&gt;(new Set());&#10;&#10;  // Form state&#10;  const [formData, setFormData] = useState&lt;GemFormData&gt;({&#10;    title: '',&#10;    description: '',&#10;    channelId: '',&#10;    imageUrl: '',&#10;    tags: [],&#10;    suggestedQuestions: [],&#10;    sources: []&#10;  });&#10;&#10;  // Stato chiamate AI&#10;  const [aiLoading, setAiLoading] = useState&lt;{ description: boolean; image: boolean; questions: boolean }&gt;({&#10;    description: false,&#10;    image: false,&#10;    questions: false&#10;  });&#10;  const [aiError, setAiError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Modal di conferma&#10;  const [confirmModal, setConfirmModal] = useState&lt;{&#10;    isOpen: boolean;&#10;    action: () =&gt; void;&#10;    title: string;&#10;    message: string;&#10;  }&gt;({&#10;    isOpen: false,&#10;    action: () =&gt; {},&#10;    title: '',&#10;    message: ''&#10;  });&#10;&#10;  const [pendingImageUrl, setPendingImageUrl] = useState&lt;string | null&gt;(null);&#10;  const [structuredAIQuestions, setStructuredAIQuestions] = useState&lt;StructuredAIQuestion[]&gt;([]);&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  useEffect(() =&gt; {&#10;    loadGems();&#10;    loadChannels();&#10;  }, []);&#10;&#10;  const loadGems = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedGems = await fetchAllGems();&#10;      setGems(fetchedGems);&#10;    } catch (error) {&#10;      console.error('Error loading gems:', error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const loadChannels = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedChannels = await fetchAllChannels();&#10;      setChannels(fetchedChannels);&#10;    } catch (error) {&#10;      console.error('Error loading channels:', error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleSearch = async () =&gt; {&#10;    if (searchTerm.trim()) {&#10;      setLoading(true);&#10;      try {&#10;        const searchResults = await searchGems(searchTerm);&#10;        setGems(searchResults);&#10;      } catch (error) {&#10;        console.error('Error searching gems:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    } else {&#10;      loadGems();&#10;    }&#10;  };&#10;&#10;  const handleCreateGem = async () =&gt; {&#10;    try {&#10;      const newGemData: any = {&#10;        title: formData.title,&#10;        topic: (gems[0]?.topic) || 'Cultura Generale &amp; Curiosità', // fallback se UI non gestisce topic&#10;        channelId: formData.channelId,&#10;        imageUrl: formData.imageUrl,&#10;        tags: formData.tags,&#10;        suggestedQuestions: formData.suggestedQuestions,&#10;        sources: formData.sources,&#10;        content: { template: 'article', description: formData.description },&#10;        userQuestions: []&#10;      };&#10;      await createGem(newGemData);&#10;      setShowCreateModal(false);&#10;      resetForm();&#10;      loadGems();&#10;    } catch (error) {&#10;      console.error('Error creating gem:', error);&#10;    }&#10;  };&#10;&#10;  const handleUpdateGem = async () =&gt; {&#10;    if (!editingGem) return;&#10;&#10;    try {&#10;      const updateData: any = {&#10;        title: formData.title,&#10;        channelId: formData.channelId,&#10;        imageUrl: formData.imageUrl,&#10;        tags: formData.tags,&#10;        suggestedQuestions: formData.suggestedQuestions,&#10;        sources: formData.sources,&#10;        content: { ...(editingGem as any).content, template: (editingGem as any).content?.template || 'article', description: formData.description }&#10;      };&#10;      await updateGem(editingGem.id, updateData);&#10;      setEditingGem(null);&#10;      resetForm();&#10;      loadGems();&#10;    } catch (error) {&#10;      console.error('Error updating gem:', error);&#10;    }&#10;  };&#10;&#10;  const handleDeleteGem = async (gemId: string) =&gt; {&#10;    try {&#10;      await deleteGem(gemId);&#10;      loadGems();&#10;    } catch (error) {&#10;      console.error('Error deleting gem:', error);&#10;    }&#10;  };&#10;&#10;  const resetForm = () =&gt; {&#10;    setFormData({&#10;      title: '',&#10;      description: '',&#10;      channelId: '',&#10;      imageUrl: '',&#10;      tags: [],&#10;      suggestedQuestions: [],&#10;      sources: []&#10;    });&#10;  };&#10;&#10;  const openEditModal = async (gem: Gem &amp; { id: string }) =&gt; {&#10;    setStructuredAIQuestions([]);&#10;    setFormData({&#10;      title: gem.title || '',&#10;      description: (gem as any).content?.description || '',&#10;      channelId: (gem as any).channelId || '',&#10;      imageUrl: gem.imageUrl || '',&#10;      tags: gem.tags || [],&#10;      suggestedQuestions: gem.suggestedQuestions || [],&#10;      sources: (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources || []&#10;    });&#10;    setEditingGem(gem);&#10;&#10;    // Carica domande generate salvate e raggruppale&#10;    try {&#10;      const saved = await fetchGeneratedQuestionsByGem(gem.id);&#10;      if (saved.length) {&#10;        // Ordina per createdAt asc&#10;        const ordered = [...saved].sort((a,b) =&gt; a.createdAt.localeCompare(b.createdAt));&#10;        interface TempGroup { section: string; sectionId: string; items: { testo: string; tipologia?: string; stepIndex?: number }[]; _stepIndex?: number; }&#10;        const groups: TempGroup[] = [];&#10;        const findOrCreate = (label: string, sectionId: string, stepIndex?: number): TempGroup =&gt; {&#10;          if (sectionId === 'step' &amp;&amp; typeof stepIndex === 'number') {&#10;            let g = groups.find(g =&gt; g.sectionId === 'step' &amp;&amp; g._stepIndex === stepIndex);&#10;            if (!g) {&#10;              g = { section: `${formatSectionLabel('step')} ${stepIndex + 1}`, sectionId: 'step', items: [], _stepIndex: stepIndex };&#10;              groups.push(g);&#10;            }&#10;            return g;&#10;          }&#10;          let g = groups.find(g =&gt; g.section === label &amp;&amp; g.sectionId === sectionId);&#10;          if (!g) {&#10;            g = { section: label, sectionId, items: [] };&#10;            groups.push(g);&#10;          }&#10;          return g;&#10;        };&#10;        ordered.forEach(q =&gt; {&#10;          const sectionId = q.section || 'general';&#10;            if (sectionId === 'step') {&#10;              const stepIdx = typeof q.stepIndex === 'number' ? q.stepIndex : 0;&#10;              const grp = findOrCreate(`${formatSectionLabel('step')} ${stepIdx + 1}`, 'step', stepIdx);&#10;              if (!grp.items.some(it =&gt; it.testo === q.testo)) {&#10;                grp.items.push({ testo: q.testo, tipologia: q.tipologia, stepIndex: stepIdx });&#10;              }&#10;            } else {&#10;              const label = formatSectionLabel(sectionId);&#10;              const grp = findOrCreate(label, sectionId);&#10;              if (!grp.items.some(it =&gt; it.testo === q.testo)) {&#10;                grp.items.push({ testo: q.testo, tipologia: q.tipologia });&#10;              }&#10;            }&#10;        });&#10;        // Ordina gruppi: step per stepIndex, poi alfabetico&#10;        const finalGroups = groups.sort((a,b) =&gt; {&#10;          if (a.sectionId === 'step' &amp;&amp; b.sectionId === 'step') return (a._stepIndex||0) - (b._stepIndex||0);&#10;          if (a.sectionId === 'step') return -1;&#10;          if (b.sectionId === 'step') return 1;&#10;          return a.section.localeCompare(b.section);&#10;        }).map(({ _stepIndex, ...rest }) =&gt; rest);&#10;        setStructuredAIQuestions(finalGroups);&#10;      }&#10;    } catch (e) {&#10;      console.error('Errore caricamento domande generate salvate:', e);&#10;    }&#10;  };&#10;&#10;  const toggleGemExpansion = (gemId: string) =&gt; {&#10;    const newExpanded = new Set(expandedGems);&#10;    if (newExpanded.has(gemId)) {&#10;      newExpanded.delete(gemId);&#10;    } else {&#10;      newExpanded.add(gemId);&#10;    }&#10;    setExpandedGems(newExpanded);&#10;  };&#10;&#10;  const renderStructuredContentSummary = (content: GemContent) =&gt; {&#10;    if (!content || !(content as any).template) return null;&#10;    const tpl = (content as any).template;&#10;    switch (tpl) {&#10;      case 'mini_thread': {&#10;        const steps = (content as any).steps || [];&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Mini Thread&lt;/p&gt;&#10;            &lt;ol className=&quot;list-decimal list-inside space-y-1 text-sm text-gray-700&quot;&gt;&#10;              {steps.map((s: any, i: number) =&gt; &lt;li key={i}&gt;&lt;span className=&quot;font-medium&quot;&gt;{s.title}&lt;/span&gt;{s.body ? ': ' + s.body : ''}&lt;/li&gt;)}&#10;            &lt;/ol&gt;&#10;            {(content as any).payoff &amp;&amp; &lt;p className=&quot;text-sm mt-2&quot;&gt;&lt;span className=&quot;font-semibold&quot;&gt;Payoff: &lt;/span&gt;{(content as any).payoff}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'myth_vs_reality': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Myth vs Reality&lt;/p&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;&lt;span className=&quot;font-semibold text-red-600&quot;&gt;Mito: &lt;/span&gt;{(content as any).myth}&lt;/p&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;&lt;span className=&quot;font-semibold text-emerald-600&quot;&gt;Realtà: &lt;/span&gt;{(content as any).reality}&lt;/p&gt;&#10;            {(content as any).evidence &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Evidenze: {(content as any).evidence}&lt;/p&gt;}&#10;            {(content as any).why_it_matters &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Perché conta: {(content as any).why_it_matters}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'fact_card': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Fact Card&lt;/p&gt;&#10;            {(content as any).hook &amp;&amp; &lt;p className=&quot;text-sm font-medium&quot;&gt;Hook: {(content as any).hook}&lt;/p&gt;}&#10;            {Array.isArray((content as any).facts) &amp;&amp; (content as any).facts.length &gt; 0 &amp;&amp; (&#10;              &lt;ul className=&quot;list-disc list-inside text-sm text-gray-700 space-y-1&quot;&gt;&#10;                {(content as any).facts.map((f: string, i: number) =&gt; &lt;li key={i}&gt;{f}&lt;/li&gt;)}&#10;              &lt;/ul&gt;&#10;            )}&#10;            {(content as any).implication &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Implicazione: {(content as any).implication}&lt;/p&gt;}&#10;            {(content as any).action &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Azione: {(content as any).action}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'pros_cons': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Pros &amp; Cons&lt;/p&gt;&#10;            {(content as any).scenario &amp;&amp; &lt;p className=&quot;text-sm&quot;&gt;&lt;span className=&quot;font-semibold&quot;&gt;Scenario: &lt;/span&gt;{(content as any).scenario}&lt;/p&gt;}&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4 text-xs&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;font-semibold text-emerald-600 mb-1&quot;&gt;Pro&lt;/p&gt;&#10;                &lt;ul className=&quot;list-disc list-inside space-y-0.5&quot;&gt;&#10;                  {((content as any).pros || []).map((p: string, i: number) =&gt; &lt;li key={i}&gt;{p}&lt;/li&gt;)}&#10;                &lt;/ul&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;font-semibold text-rose-600 mb-1&quot;&gt;Contro&lt;/p&gt;&#10;                &lt;ul className=&quot;list-disc list-inside space-y-0.5&quot;&gt;&#10;                  {((content as any).cons || []).map((c: string, i: number) =&gt; &lt;li key={i}&gt;{c}&lt;/li&gt;)}&#10;                &lt;/ul&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {(content as any).advice &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Consiglio: {(content as any).advice}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'quick_explainer': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Quick Explainer&lt;/p&gt;&#10;            {(content as any).analogy &amp;&amp; &lt;p className=&quot;text-sm font-medium&quot;&gt;Analogia: {(content as any).analogy}&lt;/p&gt;}&#10;            {(content as any).definition &amp;&amp; &lt;p className=&quot;text-xs text-gray-700&quot;&gt;Definizione: {(content as any).definition}&lt;/p&gt;}&#10;            {(content as any).example &amp;&amp; &lt;p className=&quot;text-xs text-gray-700&quot;&gt;Esempio: {(content as any).example}&lt;/p&gt;}&#10;            {(content as any).anti_example &amp;&amp; &lt;p className=&quot;text-xs text-gray-700&quot;&gt;Non è: {(content as any).anti_example}&lt;/p&gt;}&#10;            {(content as any).takeaway &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Takeaway: {(content as any).takeaway}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      default:&#10;        return &lt;p className=&quot;text-sm text-gray-700 whitespace-pre-wrap&quot;&gt;{(content as any).raw || ''}&lt;/p&gt;;&#10;    }&#10;  };&#10;&#10;  // Filtraggio e ordinamento&#10;  const filteredAndSortedGems = gems&#10;    .filter(gem =&gt; {&#10;      if (channelFilter !== 'all' &amp;&amp; gem.channelId !== channelFilter) return false;&#10;      if (tagFilter &amp;&amp; !gem.tags?.some(tag =&gt; tag.toLowerCase().includes(tagFilter.toLowerCase()))) return false;&#10;      return true;&#10;    })&#10;    .sort((a, b) =&gt; {&#10;      let comparison = 0;&#10;      switch (sortBy) {&#10;        case 'title':&#10;          comparison = (a.title || '').localeCompare(b.title || '');&#10;          break;&#10;        case 'topic':&#10;          comparison = (a.topic || '').localeCompare(b.topic || '');&#10;          break;&#10;        default:&#10;          comparison = 0;&#10;      }&#10;      return sortOrder === 'asc' ? comparison : -comparison;&#10;    });&#10;&#10;  // Paginazione&#10;  const indexOfLastGem = currentPage * gemsPerPage;&#10;  const indexOfFirstGem = indexOfLastGem - gemsPerPage;&#10;  const currentGems = filteredAndSortedGems.slice(indexOfFirstGem, indexOfLastGem);&#10;  const totalPages = Math.ceil(filteredAndSortedGems.length / gemsPerPage);&#10;&#10;  const addTag = () =&gt; {&#10;    const tagInput = document.getElementById('newTag') as HTMLInputElement;&#10;    if (tagInput &amp;&amp; tagInput.value.trim()) {&#10;      setFormData({&#10;        ...formData,&#10;        tags: [...formData.tags, tagInput.value.trim()]&#10;      });&#10;      tagInput.value = '';&#10;    }&#10;  };&#10;&#10;  const removeTag = (index: number) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      tags: formData.tags.filter((_, i) =&gt; i !== index)&#10;    });&#10;  };&#10;&#10;  const addSuggestedQuestion = () =&gt; {&#10;    const questionInput = document.getElementById('newQuestion') as HTMLInputElement;&#10;    if (questionInput &amp;&amp; questionInput.value.trim()) {&#10;      setFormData({&#10;        ...formData,&#10;        suggestedQuestions: [...formData.suggestedQuestions, questionInput.value.trim()]&#10;      });&#10;      questionInput.value = '';&#10;    }&#10;  };&#10;&#10;  const removeSuggestedQuestion = (index: number) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      suggestedQuestions: formData.suggestedQuestions.filter((_, i) =&gt; i !== index)&#10;    });&#10;  };&#10;&#10;  const addSource = () =&gt; {&#10;    const uriInput = document.getElementById('newSourceUri') as HTMLInputElement;&#10;    const titleInput = document.getElementById('newSourceTitle') as HTMLInputElement;&#10;    if (uriInput &amp;&amp; titleInput &amp;&amp; uriInput.value.trim() &amp;&amp; titleInput.value.trim()) {&#10;      setFormData({&#10;        ...formData,&#10;        sources: [...formData.sources, { uri: uriInput.value.trim(), title: titleInput.value.trim() }]&#10;      });&#10;      uriInput.value = '';&#10;      titleInput.value = '';&#10;    }&#10;  };&#10;&#10;  const removeSource = (index: number) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      sources: formData.sources.filter((_, i) =&gt; i !== index)&#10;    });&#10;  };&#10;&#10;  // Funzioni AI&#10;  const callCreateTextAI = async () =&gt; {&#10;    if (aiLoading.description) return;&#10;    setAiError(null);&#10;    setAiLoading(l =&gt; ({ ...l, description: true }));&#10;    try {&#10;      const channel = channels.find(c =&gt; c.id === formData.channelId);&#10;      const body = {&#10;        apitype: 'create-text',&#10;        argument: editingGem ? editingGem.title : formData.title,&#10;        objective: formData.description || 'Obiettivo da definire',&#10;        channel: channel ? { name: channel.name, id: channel.id } : { name: '', id: formData.channelId },&#10;        gemId: editingGem ? editingGem.id : undefined&#10;      };&#10;      const data = await callCuriowApi(body);&#10;      if (data.content?.description) {&#10;        setFormData(fd =&gt; ({&#10;          ...fd,&#10;          description: data.content.description,&#10;          sources: Array.isArray(data.search_results)&#10;            ? data.search_results.map((s: any) =&gt; ({ uri: s.url, title: s.title }))&#10;            : fd.sources&#10;        }));&#10;      } else {&#10;        const newDesc = data.description || data.text || data.content || null;&#10;        if (newDesc) {&#10;          setFormData(fd =&gt; ({ ...fd, description: newDesc }));&#10;        }&#10;      }&#10;    } catch (e: any) {&#10;      console.error(e);&#10;      setAiError(e.message || 'Errore sconosciuto');&#10;    } finally {&#10;      setAiLoading(l =&gt; ({ ...l, description: false }));&#10;    }&#10;  };&#10;&#10;  const callCreateImageAI = async () =&gt; {&#10;    if (aiLoading.image) return;&#10;    if (!formData.description.trim()) {&#10;      alert('Prima di creare l\'immagine inserire una descrizione');&#10;      return;&#10;    }&#10;    setAiError(null);&#10;    setAiLoading(l =&gt; ({ ...l, image: true }));&#10;    try {&#10;      const body = {&#10;        apitype: 'create-image',&#10;        description: formData.description,&#10;        gemId: editingGem ? editingGem.id : undefined&#10;      };&#10;      const data = await callCuriowApi(body);&#10;      const img = data.secure_url || data.imageUrl || data.url || data.image || data.result || null;&#10;      if (img) setPendingImageUrl(img);&#10;    } catch (e: any) {&#10;      console.error(e);&#10;      setAiError(e.message || 'Errore sconosciuto');&#10;    } finally {&#10;      setAiLoading(l =&gt; ({ ...l, image: false }));&#10;    }&#10;  };&#10;&#10;  // helper label sezione&#10;  const formatSectionLabel = (id: string): string =&gt; {&#10;    const map: Record&lt;string, string&gt; = {&#10;      myth: 'Mito',&#10;      reality: 'Realtà',&#10;      evidence: 'Evidenze',&#10;      why_it_matters: 'Perché Conta',&#10;      general: 'Generale',&#10;      step: 'Step'&#10;    };&#10;    if (id.startsWith('step ')) return id; // già formattato&#10;    return map[id] || id.replace(/_/g, ' ').replace(/\b\w/g, c =&gt; c.toUpperCase());&#10;  };&#10;&#10;  const callCreateQuestionsAI = async () =&gt; {&#10;    if (!editingGem) return;&#10;    if (aiLoading.questions) return;&#10;    setAiError(null);&#10;    setAiLoading(l =&gt; ({ ...l, questions: true }));&#10;    try {&#10;      const content: any = (editingGem as any).content || {};&#10;      const { description: _d, claims_to_verify: _c, ...tips } = content;&#10;      const body = {&#10;        apitype: 'create-question',&#10;        description: content.description || formData.description,&#10;        template: content.template || 'article',&#10;        tips,&#10;        gemId: editingGem.id&#10;      };&#10;      const data = await callCuriowApi(body);&#10;      const extraQ = data?.extraData?.questions;&#10;      if (extraQ &amp;&amp; typeof extraQ === 'object') {&#10;        const isoNow = new Date().toISOString();&#10;        const collectedStrings: string[] = [];&#10;        const newStructured: StructuredAIQuestion[] = [];&#10;        for (const sectionId of Object.keys(extraQ)) {&#10;          const sectionContent: any = extraQ[sectionId];&#10;          if (sectionId === 'step' &amp;&amp; Array.isArray(sectionContent) &amp;&amp; Array.isArray(sectionContent[0])) {&#10;            (sectionContent as any[]).forEach((arr: any[], stepIndex: number) =&gt; {&#10;              const stepItems: { testo: string; tipologia?: string; stepIndex?: number }[] = [];&#10;              arr.forEach(item =&gt; {&#10;                if (item?.testo) {&#10;                  addGeneratedQuestion({&#10;                    createdAt: isoNow,&#10;                    gemId: editingGem.id,&#10;                    section: sectionId,&#10;                    testo: item.testo,&#10;                    tipologia: item.tipologia || '',&#10;                    stepIndex&#10;                  }).catch(console.error);&#10;                  collectedStrings.push(item.testo);&#10;                  stepItems.push({ testo: item.testo, tipologia: item.tipologia, stepIndex });&#10;                }&#10;              });&#10;              if (stepItems.length) {&#10;                newStructured.push({ section: `${formatSectionLabel('step')} ${stepIndex + 1}`, sectionId: 'step', items: stepItems });&#10;              }&#10;            });&#10;          } else if (Array.isArray(sectionContent)) {&#10;            const items: { testo: string; tipologia?: string }[] = [];&#10;            sectionContent.forEach(item =&gt; {&#10;              if (item?.testo) {&#10;                addGeneratedQuestion({&#10;                  createdAt: isoNow,&#10;                  gemId: editingGem.id,&#10;                  section: sectionId,&#10;                  testo: item.testo,&#10;                  tipologia: item.tipologia || ''&#10;                }).catch(console.error);&#10;                collectedStrings.push(item.testo);&#10;                items.push({ testo: item.testo, tipologia: item.tipologia });&#10;              }&#10;            });&#10;            if (items.length) newStructured.push({ section: formatSectionLabel(sectionId), sectionId, items });&#10;          }&#10;        }&#10;        if (collectedStrings.length) {&#10;          setFormData(fd =&gt; ({ ...fd, suggestedQuestions: [...fd.suggestedQuestions, ...collectedStrings] }));&#10;          // Merge con esistenti evitando duplicati di label&#10;            setStructuredAIQuestions(prev =&gt; {&#10;              const merged: StructuredAIQuestion[] = [...prev.map(g =&gt; ({ ...g, items: [...g.items] }))];&#10;              newStructured.forEach(group =&gt; {&#10;                const idx = merged.findIndex(g =&gt; g.section === group.section);&#10;                if (idx &gt;= 0) {&#10;                  // aggiungi solo nuove domande non duplicate&#10;                  group.items.forEach(it =&gt; {&#10;                    if (!merged[idx].items.some(e =&gt; e.testo === it.testo)) {&#10;                      merged[idx].items.push(it);&#10;                    }&#10;                  });&#10;                } else {&#10;                  merged.push(group);&#10;                }&#10;              });&#10;              return merged;&#10;            });&#10;        }&#10;      } else {&#10;        const questions = data.questions || data.suggestedQuestions || data.result || null;&#10;        if (Array.isArray(questions)) {&#10;          setFormData(fd =&gt; ({ ...fd, suggestedQuestions: [...fd.suggestedQuestions, ...questions] }));&#10;        } else if (typeof questions === 'string') {&#10;          setFormData(fd =&gt; ({ ...fd, suggestedQuestions: [...fd.suggestedQuestions, questions] }));&#10;        }&#10;      }&#10;    } catch (e: any) {&#10;      console.error(e);&#10;      setAiError(e.message || 'Errore sconosciuto');&#10;    } finally {&#10;      setAiLoading(l =&gt; ({ ...l, questions: false }));&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;AdminPageLayout&#10;      title=&quot;Gestione Gems&quot;&#10;      subtitle={`${filteredAndSortedGems.length} gems totali`}&#10;      onBack={onBack}&#10;    &gt;&#10;      {/* Filtri e controlli */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4&quot;&gt;&#10;          {/* Ricerca */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Cerca gems&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex&quot;&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                value={searchTerm}&#10;                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                placeholder=&quot;Titolo, descrizione, tag...&quot;&#10;                className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; handleSearch()}&#10;              /&gt;&#10;              &lt;button&#10;                onClick={handleSearch}&#10;                className=&quot;px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Filtro per canale */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Filtra per canale&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              value={channelFilter}&#10;              onChange={(e) =&gt; setChannelFilter(e.target.value)}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;all&quot;&gt;Tutti i canali&lt;/option&gt;&#10;              {channels.map(channel =&gt; (&#10;                &lt;option key={channel.id} value={channel.id}&gt;{channel.name}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Filtro per tag */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Filtra per tag&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              value={tagFilter}&#10;              onChange={(e) =&gt; setTagFilter(e.target.value)}&#10;              placeholder=&quot;Inserisci tag...&quot;&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Ordinamento */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Ordina per&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;              &lt;select&#10;                value={sortBy}&#10;                onChange={(e) =&gt; setSortBy(e.target.value as 'title' | 'topic' | 'created')}&#10;                className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;              &gt;&#10;                &lt;option value=&quot;title&quot;&gt;Titolo&lt;/option&gt;&#10;                &lt;option value=&quot;topic&quot;&gt;Topic&lt;/option&gt;&#10;              &lt;/select&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}&#10;                className=&quot;px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;              &gt;&#10;                {sortOrder === 'asc' ? '↑' : '↓'}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Controlli azioni */}&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            &lt;button&#10;              onClick={loadGems}&#10;              className=&quot;px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;            &gt;&#10;               Ricarica&#10;            &lt;/button&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Gems per pagina:&lt;/span&gt;&#10;              &lt;select&#10;                value={gemsPerPage}&#10;                onChange={(e) =&gt; setGemsPerPage(Number(e.target.value))}&#10;                className=&quot;px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &lt;option value={10}&gt;10&lt;/option&gt;&#10;                &lt;option value={25}&gt;25&lt;/option&gt;&#10;                &lt;option value={50}&gt;50&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {permissions.canCreateGems &amp;&amp; (&#10;            &lt;button&#10;              onClick={() =&gt; setShowCreateModal(true)}&#10;              className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;            &gt;&#10;              ➕ Nuova Gem&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Lista gems */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Caricamento gems...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : currentGems.length === 0 ? (&#10;          &lt;div className=&quot;p-8 text-center text-gray-500&quot;&gt;&#10;            &lt;p&gt;Nessuna gem trovata.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full&quot;&gt;&#10;                &lt;thead className=&quot;bg-gray-50 border-b border-gray-200&quot;&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Gem&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Topic&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Tags&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Fonti&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Azioni&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;                  {currentGems.map((gem) =&gt; (&#10;                    &lt;React.Fragment key={gem.id}&gt;&#10;                      &lt;tr className=&quot;hover:bg-gray-50&quot;&gt;&#10;                        &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                          &lt;div className=&quot;flex items-center&quot;&gt;&#10;                            {gem.imageUrl &amp;&amp; (&#10;                              &lt;img&#10;                                src={gem.imageUrl}&#10;                                alt={gem.title}&#10;                                className=&quot;h-12 w-12 rounded-lg object-cover mr-4&quot;&#10;                              /&gt;&#10;                            )}&#10;                            &lt;div&gt;&#10;                              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                &lt;h3 className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                                  {gem.title}&#10;                                &lt;/h3&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt; toggleGemExpansion(gem.id)}&#10;                                  className=&quot;ml-2 text-gray-400 hover:text-gray-600&quot;&#10;                                &gt;&#10;                                  {expandedGems.has(gem.id) ? '' : '▶️'}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                {gem.suggestedQuestions?.length || 0} domande suggerite&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                          &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800&quot;&gt;&#10;                            {gem.topic}&#10;                          &lt;/span&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                          &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                            {gem.tags?.slice(0, 3).map((tag, index) =&gt; (&#10;                              &lt;span key={index} className=&quot;inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-800&quot;&gt;&#10;                                {tag}&#10;                              &lt;/span&gt;&#10;                            ))}&#10;                            {(gem.tags?.length || 0) &gt; 3 &amp;&amp; (&#10;                              &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                +{(gem.tags?.length || 0) - 3}&#10;                              &lt;/span&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500&quot;&gt;&#10;                          {((gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources)?.length || 0} fonti&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-right text-sm font-medium&quot;&gt;&#10;                          &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                            {permissions.canEditGems &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; openEditModal(gem)}&#10;                                className=&quot;text-blue-600 hover:text-blue-900&quot;&#10;                              &gt;&#10;                                ✏️&#10;                              &lt;/button&gt;&#10;                            )}&#10;                            {permissions.canDeleteGems &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setConfirmModal({&#10;                                  isOpen: true,&#10;                                  action: () =&gt; handleDeleteGem(gem.id),&#10;                                  title: 'Elimina Gem',&#10;                                  message: `Sei sicuro di voler eliminare la gem &quot;${gem.title}&quot;? Questa azione non può essere annullata.`&#10;                                })}&#10;                                className=&quot;text-red-600 hover:text-red-900&quot;&#10;                              &gt;&#10;                                ️&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                      &lt;/tr&gt;&#10;                      {expandedGems.has(gem.id) &amp;&amp; (&#10;                        &lt;tr&gt;&#10;                          &lt;td colSpan={5} className=&quot;px-6 py-4 bg-gray-50&quot;&gt;&#10;                            &lt;div className=&quot;max-w-none space-y-4&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h4 className=&quot;text-sm font-medium text-gray-900 mb-2&quot;&gt;Contenuto:&lt;/h4&gt;&#10;                                {gem.content?.template ? (&#10;                                  &lt;div className=&quot;p-3 border border-gray-200 rounded bg-white&quot;&gt;{renderStructuredContentSummary(gem.content)}&lt;/div&gt;&#10;                                ) : (&#10;                                  &lt;p className=&quot;text-sm text-gray-700 whitespace-pre-wrap&quot;&gt;{(gem as any).content?.description || ''}&lt;/p&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                              {(gem.suggestedQuestions?.length || 0) &gt; 0 &amp;&amp; (&#10;                                &lt;div&gt;&#10;                                  &lt;h4 className=&quot;text-sm font-medium text-gray-900 mb-2&quot;&gt;Domande suggerite (flat):&lt;/h4&gt;&#10;                                  &lt;ul className=&quot;list-disc list-inside text-sm text-gray-700 space-y-1&quot;&gt;&#10;                                    {gem.suggestedQuestions?.map((question, index) =&gt; (&#10;                                      &lt;li key={index}&gt;{question}&lt;/li&gt;&#10;                                    ))}&#10;                                  &lt;/ul&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {/* Nota: la struttura AI dettagliata è visibile solo nel modal di modifica corrente */}&#10;                              {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return (sources?.length || 0) &gt; 0 &amp;&amp; (&#10;                                &lt;div&gt;&#10;                                  &lt;h4 className=&quot;text-sm font-medium text-gray-900 mb-2&quot;&gt;Fonti:&lt;/h4&gt;&#10;                                  &lt;ul className=&quot;space-y-1&quot;&gt;&#10;                                    {sources.map((source: any, index: number) =&gt; (&#10;                                      &lt;li key={index} className=&quot;text-sm&quot;&gt;&#10;                                        &lt;a&#10;                                          href={source.uri}&#10;                                          target=&quot;_blank&quot;&#10;                                          rel=&quot;noopener noreferrer&quot;&#10;                                          className=&quot;text-blue-600 hover:text-blue-800 underline break-all&quot;&#10;                                        &gt;&#10;                                          {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                      &lt;/li&gt;&#10;                                    ))}&#10;                                  &lt;/ul&gt;&#10;                                &lt;/div&gt;&#10;                              ); })()}&#10;                            &lt;/div&gt;&#10;                          &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                      )}&#10;                    &lt;/React.Fragment&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Paginazione */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;px-6 py-3 border-t border-gray-200 flex justify-between items-center&quot;&gt;&#10;                &lt;div className=&quot;text-sm text-gray-700&quot;&gt;&#10;                  Mostrando {indexOfFirstGem + 1}-{Math.min(indexOfLastGem, filteredAndSortedGems.length)} di {filteredAndSortedGems.length} gems&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage - 1)}&#10;                    disabled={currentPage === 1}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Precedente&#10;                  &lt;/button&gt;&#10;                  &lt;span className=&quot;px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md&quot;&gt;&#10;                    {currentPage} di {totalPages}&#10;                  &lt;/span&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage + 1)}&#10;                    disabled={currentPage === totalPages}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Successiva&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Modal per creare/modificare gem */}&#10;      {(showCreateModal || editingGem) &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4&quot;&gt;&#10;          &lt;div className=&quot;bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto&quot;&gt;&#10;            &lt;div className=&quot;p-6&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold text-gray-900&quot;&gt;&#10;                  {editingGem ? 'Modifica Gem' : 'Nuova Gem'}&#10;                &lt;/h2&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setShowCreateModal(false);&#10;                    setEditingGem(null);&#10;                    resetForm();&#10;                  }}&#10;                  className=&quot;text-gray-400 hover:text-gray-600&quot;&#10;                &gt;&#10;                  ✕&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                {/* Colonna sinistra */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      Titolo *&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={formData.title}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, title: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      required&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Canale *&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={formData.channelId}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, channelId: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      required&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Seleziona un canale&lt;/option&gt;&#10;                      {channels.map(channel =&gt; (&#10;                        &lt;option key={channel.id} value={channel.id}&gt;{channel.name}&lt;/option&gt;&#10;                      ))}&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      URL Immagine&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={callCreateImageAI}&#10;                        title=&quot;Genera immagine con AI&quot;&#10;                        className=&quot;text-xs px-2 py-1 rounded bg-indigo-100 text-indigo-700 hover:bg-indigo-200 disabled:opacity-50 flex items-center gap-1&quot;&#10;                        disabled={aiLoading.image}&#10;                      &gt;&#10;                        {aiLoading.image &amp;&amp; &lt;span className=&quot;animate-spin inline-block h-3 w-3 border-2 border-indigo-600 border-t-transparent rounded-full&quot;&gt;&lt;/span&gt;}&#10;                        {aiLoading.image ? 'Gen' : 'AI'}&#10;                      &lt;/button&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={formData.imageUrl}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, imageUrl: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      placeholder=&quot;https://...&quot;&#10;                    /&gt;&#10;                    {formData.imageUrl &amp;&amp; (&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500 break-all&quot;&gt;Attuale: {formData.imageUrl}&lt;/div&gt;&#10;                    )}&#10;                    {pendingImageUrl &amp;&amp; (&#10;                      &lt;div className=&quot;mt-3 p-3 border rounded-md bg-gray-50&quot;&gt;&#10;                        &lt;p className=&quot;text-xs font-medium text-gray-700 mb-2&quot;&gt;Nuova immagine generata (anteprima)&lt;/p&gt;&#10;                        &lt;img src={pendingImageUrl} alt=&quot;Anteprima AI&quot; className=&quot;w-full max-h-64 object-contain rounded mb-2&quot; /&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; {&#10;                              setFormData(fd =&gt; ({ ...fd, imageUrl: pendingImageUrl }));&#10;                              setPendingImageUrl(null);&#10;                            }}&#10;                            className=&quot;px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700&quot;&#10;                          &gt;&#10;                            Conferma&#10;                          &lt;/button&gt;&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; setPendingImageUrl(null)}&#10;                            className=&quot;px-3 py-1 text-sm bg-gray-300 text-gray-800 rounded hover:bg-gray-400&quot;&#10;                          &gt;&#10;                            Annulla&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Tags&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;flex space-x-2 mb-2&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;newTag&quot;&#10;                        placeholder=&quot;Nuovo tag...&quot;&#10;                        className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                        onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; addTag()}&#10;                      /&gt;&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={addTag}&#10;                        className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700&quot;&#10;                      &gt;&#10;                        Aggiungi&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                      {formData.tags.map((tag, index) =&gt; (&#10;                        &lt;span key={index} className=&quot;inline-flex items-center px-2 py-1 rounded-md text-sm bg-blue-100 text-blue-800&quot;&gt;&#10;                          {tag}&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; removeTag(index)}&#10;                            className=&quot;ml-1 text-blue-600 hover:text-blue-800&quot;&#10;                          &gt;&#10;                            ×&#10;                          &lt;/button&gt;&#10;                        &lt;/span&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Colonna destra */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      Descrizione * (Saggio / Testo lungo)&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={callCreateTextAI}&#10;                        title=&quot;Genera / migliora testo con AI&quot;&#10;                        className=&quot;text-xs px-2 py-1 rounded bg-indigo-100 text-indigo-700 hover:bg-indigo-200 disabled:opacity-50&quot;&#10;                        disabled={aiLoading.description}&#10;                      &gt;&#10;                        {aiLoading.description ? '…' : 'AI'}&#10;                      &lt;/button&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={formData.description}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, description: e.target.value })}&#10;                      rows={6}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      required&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      Domande Suggerite&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={callCreateQuestionsAI}&#10;                        title={editingGem ? 'Genera domande con AI' : 'Disponibile solo in modifica'}&#10;                        className=&quot;text-xs px-2 py-1 rounded bg-indigo-100 text-indigo-700 hover:bg-indigo-200 disabled:opacity-50&quot;&#10;                        disabled={aiLoading.questions || !editingGem}&#10;                      &gt;&#10;                        {aiLoading.questions ? '…' : 'AI'}&#10;                      &lt;/button&gt;&#10;                    &lt;/label&gt;&#10;                    {structuredAIQuestions.length &gt; 0 &amp;&amp; (&#10;                      &lt;div className=&quot;mb-4 space-y-4 border border-indigo-100 rounded-md p-3 bg-indigo-50/40&quot;&gt;&#10;                        {structuredAIQuestions.map((group, gi) =&gt; (&#10;                          &lt;div key={gi} className=&quot;space-y-1&quot;&gt;&#10;                            &lt;h5 className=&quot;text-xs font-semibold tracking-wide text-indigo-700 uppercase&quot;&gt;{group.section}&lt;/h5&gt;&#10;                            &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                              {group.items.map((q, qi) =&gt; (&#10;                                &lt;li key={qi} className=&quot;text-sm text-gray-700&quot;&gt;&#10;                                  &lt;span&gt;{q.testo}&lt;/span&gt;&#10;                                  {q.tipologia &amp;&amp; &lt;span className=&quot;ml-2 text-[10px] px-1.5 py-0.5 rounded bg-indigo-100 text-indigo-700&quot;&gt;{q.tipologia}&lt;/span&gt;}&#10;                                &lt;/li&gt;&#10;                              ))}&#10;                            &lt;/ul&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    &lt;div className=&quot;flex space-x-2 mb-2&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;newQuestion&quot;&#10;                        placeholder=&quot;Nuova domanda...&quot;&#10;                        className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                        onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; addSuggestedQuestion()}&#10;                      /&gt;&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={addSuggestedQuestion}&#10;                        className=&quot;px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700&quot;&#10;                      &gt;&#10;                        Aggiungi&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Fonti&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-2 mb-2&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;url&quot;&#10;                        id=&quot;newSourceUri&quot;&#10;                        placeholder=&quot;URL fonte...&quot;&#10;                        className=&quot;px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;newSourceTitle&quot;&#10;                        placeholder=&quot;Titolo fonte...&quot;&#10;                        className=&quot;px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={addSource}&#10;                      className=&quot;w-full px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 mb-2&quot;&#10;                    &gt;&#10;                      Aggiungi Fonte&#10;                    &lt;/button&gt;&#10;                    &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                      {formData.sources.map((source, index) =&gt; (&#10;                        &lt;div key={index} className=&quot;flex items-center justify-between p-2 bg-gray-50 rounded&quot;&gt;&#10;                          &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                            &lt;div className=&quot;text-sm font-medium truncate&quot;&gt;{source.title}&lt;/div&gt;&#10;                            &lt;div className=&quot;text-xs text-gray-500 truncate&quot;&gt;{source.uri}&lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; removeSource(index)}&#10;                            className=&quot;text-red-600 hover:text-red-800 ml-2&quot;&#10;                          &gt;&#10;                            ×&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {aiError &amp;&amp; (&#10;                &lt;div className=&quot;mt-4 text-sm text-red-600&quot;&gt;&#10;                  Errore AI: {aiError}&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              &lt;div className=&quot;flex justify-end space-x-3 mt-6 pt-6 border-t border-gray-200&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setShowCreateModal(false);&#10;                    setEditingGem(null);&#10;                    resetForm();&#10;                  }}&#10;                  className=&quot;px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50&quot;&#10;                &gt;&#10;                  Annulla&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  onClick={editingGem ? handleUpdateGem : handleCreateGem}&#10;                  disabled={!formData.title || !formData.description || !formData.channelId}&#10;                  className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {editingGem ? 'Salva Modifiche' : 'Crea Gem'}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Modal di conferma */}&#10;      &lt;AdminConfirmationModal&#10;        isOpen={confirmModal.isOpen}&#10;        title={confirmModal.title}&#10;        message={confirmModal.message}&#10;        actionText=&quot;Elimina&quot;&#10;        actionType=&quot;danger&quot;&#10;        onConfirm={() =&gt; {&#10;          confirmModal.action();&#10;          setConfirmModal({ ...confirmModal, isOpen: false });&#10;        }}&#10;        onClose={() =&gt; setConfirmModal({ ...confirmModal, isOpen: false })}&#10;      /&gt;&#10;    &lt;/AdminPageLayout&gt;&#10;  );&#10;};&#10;&#10;export default GemsManagement;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { Gem, Topic, Channel, GemContent } from '../../types';&#10;import {&#10;  fetchAllGems,&#10;  createGem,&#10;  updateGem,&#10;  deleteGem,&#10;  searchGems,&#10;  fetchAllChannels,&#10;  addGeneratedQuestion,&#10;  fetchGeneratedQuestionsByGem&#10;} from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;import AdminPageLayout from './AdminPageLayout';&#10;import AdminConfirmationModal from './AdminConfirmationModal';&#10;import { callCuriowApi } from '../../services/apiService';&#10;&#10;interface GemsManagementProps {&#10;  currentUser: { role: any; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;interface GemFormData {&#10;  title: string;&#10;  description: string; // sarà salvata in content.description&#10;  channelId: string;&#10;  imageUrl: string;&#10;  videoUrl: string; // nuovo campo per il video&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Array&lt;{ uri: string; title: string }&gt;;&#10;}&#10;&#10;interface StructuredAIQuestion {&#10;  section: string; // label mostrata&#10;  sectionId?: string; // id originale (myth, reality, ecc.)&#10;  items: { testo: string; tipologia?: string; stepIndex?: number }[];&#10;}&#10;&#10;const GemsManagement: React.FC&lt;GemsManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [gems, setGems] = useState&lt;(Gem &amp; { id: string })[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;(Channel &amp; { id: string })[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [showCreateModal, setShowCreateModal] = useState(false);&#10;  const [editingGem, setEditingGem] = useState&lt;(Gem &amp; { id: string }) | null&gt;(null);&#10;&#10;  // Filtri e ricerca&#10;  const [searchTerm, setSearchTerm] = useState('');&#10;  const [channelFilter, setChannelFilter] = useState&lt;string&gt;('all');&#10;  const [tagFilter, setTagFilter] = useState('');&#10;  const [sortBy, setSortBy] = useState&lt;'title' | 'topic' | 'created'&gt;('title');&#10;  const [sortOrder, setSortOrder] = useState&lt;'asc' | 'desc'&gt;('asc');&#10;&#10;  // Paginazione&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [gemsPerPage, setGemsPerPage] = useState(10);&#10;&#10;  // Accordion per descrizioni&#10;  const [expandedGems, setExpandedGems] = useState&lt;Set&lt;string&gt;&gt;(new Set());&#10;&#10;  // Form state&#10;  const [formData, setFormData] = useState&lt;GemFormData&gt;({&#10;    title: '',&#10;    description: '',&#10;    channelId: '',&#10;    imageUrl: '',&#10;    videoUrl: '', // inizializza il nuovo campo&#10;    tags: [],&#10;    suggestedQuestions: [],&#10;    sources: []&#10;  });&#10;&#10;  // Stato chiamate AI&#10;  const [aiLoading, setAiLoading] = useState&lt;{ description: boolean; image: boolean; questions: boolean }&gt;({&#10;    description: false,&#10;    image: false,&#10;    questions: false&#10;  });&#10;  const [aiError, setAiError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Modal di conferma&#10;  const [confirmModal, setConfirmModal] = useState&lt;{&#10;    isOpen: boolean;&#10;    action: () =&gt; void;&#10;    title: string;&#10;    message: string;&#10;  }&gt;({&#10;    isOpen: false,&#10;    action: () =&gt; {},&#10;    title: '',&#10;    message: ''&#10;  });&#10;&#10;  const [pendingImageUrl, setPendingImageUrl] = useState&lt;string | null&gt;(null);&#10;  const [structuredAIQuestions, setStructuredAIQuestions] = useState&lt;StructuredAIQuestion[]&gt;([]);&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  useEffect(() =&gt; {&#10;    loadGems();&#10;    loadChannels();&#10;  }, []);&#10;&#10;  const loadGems = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedGems = await fetchAllGems();&#10;      setGems(fetchedGems);&#10;    } catch (error) {&#10;      console.error('Error loading gems:', error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const loadChannels = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedChannels = await fetchAllChannels();&#10;      setChannels(fetchedChannels);&#10;    } catch (error) {&#10;      console.error('Error loading channels:', error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleSearch = async () =&gt; {&#10;    if (searchTerm.trim()) {&#10;      setLoading(true);&#10;      try {&#10;        const searchResults = await searchGems(searchTerm);&#10;        setGems(searchResults);&#10;      } catch (error) {&#10;        console.error('Error searching gems:', error);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    } else {&#10;      loadGems();&#10;    }&#10;  };&#10;&#10;  const handleCreateGem = async () =&gt; {&#10;    try {&#10;      const newGemData: any = {&#10;        title: formData.title,&#10;        topic: (gems[0]?.topic) || 'Cultura Generale &amp; Curiosità', // fallback se UI non gestisce topic&#10;        channelId: formData.channelId,&#10;        imageUrl: formData.imageUrl,&#10;        videoUrl: formData.videoUrl, // includi il nuovo campo&#10;        tags: formData.tags,&#10;        suggestedQuestions: formData.suggestedQuestions,&#10;        sources: formData.sources,&#10;        content: { template: 'article', description: formData.description },&#10;        userQuestions: []&#10;      };&#10;      await createGem(newGemData);&#10;      setShowCreateModal(false);&#10;      resetForm();&#10;      loadGems();&#10;    } catch (error) {&#10;      console.error('Error creating gem:', error);&#10;    }&#10;  };&#10;&#10;  const handleUpdateGem = async () =&gt; {&#10;    if (!editingGem) return;&#10;&#10;    try {&#10;      const updateData: any = {&#10;        title: formData.title,&#10;        channelId: formData.channelId,&#10;        imageUrl: formData.imageUrl,&#10;        videoUrl: formData.videoUrl, // aggiorna il campo videoUrl&#10;        tags: formData.tags,&#10;        suggestedQuestions: formData.suggestedQuestions,&#10;        sources: formData.sources,&#10;        content: { ...(editingGem as any).content, template: (editingGem as any).content?.template || 'article', description: formData.description }&#10;      };&#10;      await updateGem(editingGem.id, updateData);&#10;      setEditingGem(null);&#10;      resetForm();&#10;      loadGems();&#10;    } catch (error) {&#10;      console.error('Error updating gem:', error);&#10;    }&#10;  };&#10;&#10;  const handleDeleteGem = async (gemId: string) =&gt; {&#10;    try {&#10;      await deleteGem(gemId);&#10;      loadGems();&#10;    } catch (error) {&#10;      console.error('Error deleting gem:', error);&#10;    }&#10;  };&#10;&#10;  const resetForm = () =&gt; {&#10;    setFormData({&#10;      title: '',&#10;      description: '',&#10;      channelId: '',&#10;      imageUrl: '',&#10;      videoUrl: '', // reset del campo videoUrl&#10;      tags: [],&#10;      suggestedQuestions: [],&#10;      sources: []&#10;    });&#10;  };&#10;&#10;  const openEditModal = async (gem: Gem &amp; { id: string }) =&gt; {&#10;    setStructuredAIQuestions([]);&#10;    setFormData({&#10;      title: gem.title || '',&#10;      description: (gem as any).content?.description || '',&#10;      channelId: (gem as any).channelId || '',&#10;      imageUrl: gem.imageUrl || '',&#10;      videoUrl: gem.videoUrl || '', // carica il valore esistente o lascia vuoto&#10;      tags: gem.tags || [],&#10;      suggestedQuestions: gem.suggestedQuestions || [],&#10;      sources: (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources || []&#10;    });&#10;    setEditingGem(gem);&#10;&#10;    // Carica domande generate salvate e raggruppale&#10;    try {&#10;      const saved = await fetchGeneratedQuestionsByGem(gem.id);&#10;      if (saved.length) {&#10;        // Ordina per createdAt asc&#10;        const ordered = [...saved].sort((a,b) =&gt; a.createdAt.localeCompare(b.createdAt));&#10;        interface TempGroup { section: string; sectionId: string; items: { testo: string; tipologia?: string; stepIndex?: number }[]; _stepIndex?: number; }&#10;        const groups: TempGroup[] = [];&#10;        const findOrCreate = (label: string, sectionId: string, stepIndex?: number): TempGroup =&gt; {&#10;          if (sectionId === 'step' &amp;&amp; typeof stepIndex === 'number') {&#10;            let g = groups.find(g =&gt; g.sectionId === 'step' &amp;&amp; g._stepIndex === stepIndex);&#10;            if (!g) {&#10;              g = { section: `${formatSectionLabel('step')} ${stepIndex + 1}`, sectionId: 'step', items: [], _stepIndex: stepIndex };&#10;              groups.push(g);&#10;            }&#10;            return g;&#10;          }&#10;          let g = groups.find(g =&gt; g.section === label &amp;&amp; g.sectionId === sectionId);&#10;          if (!g) {&#10;            g = { section: label, sectionId, items: [] };&#10;            groups.push(g);&#10;          }&#10;          return g;&#10;        };&#10;        ordered.forEach(q =&gt; {&#10;          const sectionId = q.section || 'general';&#10;            if (sectionId === 'step') {&#10;              const stepIdx = typeof q.stepIndex === 'number' ? q.stepIndex : 0;&#10;              const grp = findOrCreate(`${formatSectionLabel('step')} ${stepIdx + 1}`, 'step', stepIdx);&#10;              if (!grp.items.some(it =&gt; it.testo === q.testo)) {&#10;                grp.items.push({ testo: q.testo, tipologia: q.tipologia, stepIndex: stepIdx });&#10;              }&#10;            } else {&#10;              const label = formatSectionLabel(sectionId);&#10;              const grp = findOrCreate(label, sectionId);&#10;              if (!grp.items.some(it =&gt; it.testo === q.testo)) {&#10;                grp.items.push({ testo: q.testo, tipologia: q.tipologia });&#10;              }&#10;            }&#10;        });&#10;        // Ordina gruppi: step per stepIndex, poi alfabetico&#10;        const finalGroups = groups.sort((a,b) =&gt; {&#10;          if (a.sectionId === 'step' &amp;&amp; b.sectionId === 'step') return (a._stepIndex||0) - (b._stepIndex||0);&#10;          if (a.sectionId === 'step') return -1;&#10;          if (b.sectionId === 'step') return 1;&#10;          return a.section.localeCompare(b.section);&#10;        }).map(({ _stepIndex, ...rest }) =&gt; rest);&#10;        setStructuredAIQuestions(finalGroups);&#10;      }&#10;    } catch (e) {&#10;      console.error('Errore caricamento domande generate salvate:', e);&#10;    }&#10;  };&#10;&#10;  const toggleGemExpansion = (gemId: string) =&gt; {&#10;    const newExpanded = new Set(expandedGems);&#10;    if (newExpanded.has(gemId)) {&#10;      newExpanded.delete(gemId);&#10;    } else {&#10;      newExpanded.add(gemId);&#10;    }&#10;    setExpandedGems(newExpanded);&#10;  };&#10;&#10;  const renderStructuredContentSummary = (content: GemContent) =&gt; {&#10;    if (!content || !(content as any).template) return null;&#10;    const tpl = (content as any).template;&#10;    switch (tpl) {&#10;      case 'mini_thread': {&#10;        const steps = (content as any).steps || [];&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Mini Thread&lt;/p&gt;&#10;            &lt;ol className=&quot;list-decimal list-inside space-y-1 text-sm text-gray-700&quot;&gt;&#10;              {steps.map((s: any, i: number) =&gt; &lt;li key={i}&gt;&lt;span className=&quot;font-medium&quot;&gt;{s.title}&lt;/span&gt;{s.body ? ': ' + s.body : ''}&lt;/li&gt;)}&#10;            &lt;/ol&gt;&#10;            {(content as any).payoff &amp;&amp; &lt;p className=&quot;text-sm mt-2&quot;&gt;&lt;span className=&quot;font-semibold&quot;&gt;Payoff: &lt;/span&gt;{(content as any).payoff}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'myth_vs_reality': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Myth vs Reality&lt;/p&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;&lt;span className=&quot;font-semibold text-red-600&quot;&gt;Mito: &lt;/span&gt;{(content as any).myth}&lt;/p&gt;&#10;            &lt;p className=&quot;text-sm&quot;&gt;&lt;span className=&quot;font-semibold text-emerald-600&quot;&gt;Realtà: &lt;/span&gt;{(content as any).reality}&lt;/p&gt;&#10;            {(content as any).evidence &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Evidenze: {(content as any).evidence}&lt;/p&gt;}&#10;            {(content as any).why_it_matters &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Perché conta: {(content as any).why_it_matters}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'fact_card': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Fact Card&lt;/p&gt;&#10;            {(content as any).hook &amp;&amp; &lt;p className=&quot;text-sm font-medium&quot;&gt;Hook: {(content as any).hook}&lt;/p&gt;}&#10;            {Array.isArray((content as any).facts) &amp;&amp; (content as any).facts.length &gt; 0 &amp;&amp; (&#10;              &lt;ul className=&quot;list-disc list-inside text-sm text-gray-700 space-y-1&quot;&gt;&#10;                {(content as any).facts.map((f: string, i: number) =&gt; &lt;li key={i}&gt;{f}&lt;/li&gt;)}&#10;              &lt;/ul&gt;&#10;            )}&#10;            {(content as any).implication &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Implicazione: {(content as any).implication}&lt;/p&gt;}&#10;            {(content as any).action &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Azione: {(content as any).action}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'pros_cons': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Pros &amp; Cons&lt;/p&gt;&#10;            {(content as any).scenario &amp;&amp; &lt;p className=&quot;text-sm&quot;&gt;&lt;span className=&quot;font-semibold&quot;&gt;Scenario: &lt;/span&gt;{(content as any).scenario}&lt;/p&gt;}&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4 text-xs&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;font-semibold text-emerald-600 mb-1&quot;&gt;Pro&lt;/p&gt;&#10;                &lt;ul className=&quot;list-disc list-inside space-y-0.5&quot;&gt;&#10;                  {((content as any).pros || []).map((p: string, i: number) =&gt; &lt;li key={i}&gt;{p}&lt;/li&gt;)}&#10;                &lt;/ul&gt;&#10;              &lt;/div&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;font-semibold text-rose-600 mb-1&quot;&gt;Contro&lt;/p&gt;&#10;                &lt;ul className=&quot;list-disc list-inside space-y-0.5&quot;&gt;&#10;                  {((content as any).cons || []).map((c: string, i: number) =&gt; &lt;li key={i}&gt;{c}&lt;/li&gt;)}&#10;                &lt;/ul&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {(content as any).advice &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Consiglio: {(content as any).advice}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      case 'quick_explainer': {&#10;        return (&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold text-gray-500 uppercase&quot;&gt;Quick Explainer&lt;/p&gt;&#10;            {(content as any).analogy &amp;&amp; &lt;p className=&quot;text-sm font-medium&quot;&gt;Analogia: {(content as any).analogy}&lt;/p&gt;}&#10;            {(content as any).definition &amp;&amp; &lt;p className=&quot;text-xs text-gray-700&quot;&gt;Definizione: {(content as any).definition}&lt;/p&gt;}&#10;            {(content as any).example &amp;&amp; &lt;p className=&quot;text-xs text-gray-700&quot;&gt;Esempio: {(content as any).example}&lt;/p&gt;}&#10;            {(content as any).anti_example &amp;&amp; &lt;p className=&quot;text-xs text-gray-700&quot;&gt;Non è: {(content as any).anti_example}&lt;/p&gt;}&#10;            {(content as any).takeaway &amp;&amp; &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Takeaway: {(content as any).takeaway}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        );&#10;      }&#10;      default:&#10;        return &lt;p className=&quot;text-sm text-gray-700 whitespace-pre-wrap&quot;&gt;{(content as any).raw || ''}&lt;/p&gt;;&#10;    }&#10;  };&#10;&#10;  // Filtraggio e ordinamento&#10;  const filteredAndSortedGems = gems&#10;    .filter(gem =&gt; {&#10;      if (channelFilter !== 'all' &amp;&amp; gem.channelId !== channelFilter) return false;&#10;      if (tagFilter &amp;&amp; !gem.tags?.some(tag =&gt; tag.toLowerCase().includes(tagFilter.toLowerCase()))) return false;&#10;      return true;&#10;    })&#10;    .sort((a, b) =&gt; {&#10;      let comparison = 0;&#10;      switch (sortBy) {&#10;        case 'title':&#10;          comparison = (a.title || '').localeCompare(b.title || '');&#10;          break;&#10;        case 'topic':&#10;          comparison = (a.topic || '').localeCompare(b.topic || '');&#10;          break;&#10;        default:&#10;          comparison = 0;&#10;      }&#10;      return sortOrder === 'asc' ? comparison : -comparison;&#10;    });&#10;&#10;  // Paginazione&#10;  const indexOfLastGem = currentPage * gemsPerPage;&#10;  const indexOfFirstGem = indexOfLastGem - gemsPerPage;&#10;  const currentGems = filteredAndSortedGems.slice(indexOfFirstGem, indexOfLastGem);&#10;  const totalPages = Math.ceil(filteredAndSortedGems.length / gemsPerPage);&#10;&#10;  const addTag = () =&gt; {&#10;    const tagInput = document.getElementById('newTag') as HTMLInputElement;&#10;    if (tagInput &amp;&amp; tagInput.value.trim()) {&#10;      setFormData({&#10;        ...formData,&#10;        tags: [...formData.tags, tagInput.value.trim()]&#10;      });&#10;      tagInput.value = '';&#10;    }&#10;  };&#10;&#10;  const removeTag = (index: number) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      tags: formData.tags.filter((_, i) =&gt; i !== index)&#10;    });&#10;  };&#10;&#10;  const addSuggestedQuestion = () =&gt; {&#10;    const questionInput = document.getElementById('newQuestion') as HTMLInputElement;&#10;    if (questionInput &amp;&amp; questionInput.value.trim()) {&#10;      setFormData({&#10;        ...formData,&#10;        suggestedQuestions: [...formData.suggestedQuestions, questionInput.value.trim()]&#10;      });&#10;      questionInput.value = '';&#10;    }&#10;  };&#10;&#10;  const removeSuggestedQuestion = (index: number) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      suggestedQuestions: formData.suggestedQuestions.filter((_, i) =&gt; i !== index)&#10;    });&#10;  };&#10;&#10;  const addSource = () =&gt; {&#10;    const uriInput = document.getElementById('newSourceUri') as HTMLInputElement;&#10;    const titleInput = document.getElementById('newSourceTitle') as HTMLInputElement;&#10;    if (uriInput &amp;&amp; titleInput &amp;&amp; uriInput.value.trim() &amp;&amp; titleInput.value.trim()) {&#10;      setFormData({&#10;        ...formData,&#10;        sources: [...formData.sources, { uri: uriInput.value.trim(), title: titleInput.value.trim() }]&#10;      });&#10;      uriInput.value = '';&#10;      titleInput.value = '';&#10;    }&#10;  };&#10;&#10;  const removeSource = (index: number) =&gt; {&#10;    setFormData({&#10;      ...formData,&#10;      sources: formData.sources.filter((_, i) =&gt; i !== index)&#10;    });&#10;  };&#10;&#10;  // Funzioni AI&#10;  const callCreateTextAI = async () =&gt; {&#10;    if (aiLoading.description) return;&#10;    setAiError(null);&#10;    setAiLoading(l =&gt; ({ ...l, description: true }));&#10;    try {&#10;      const channel = channels.find(c =&gt; c.id === formData.channelId);&#10;      const body = {&#10;        apitype: 'create-text',&#10;        argument: editingGem ? editingGem.title : formData.title,&#10;        objective: formData.description || 'Obiettivo da definire',&#10;        channel: channel ? { name: channel.name, id: channel.id } : { name: '', id: formData.channelId },&#10;        gemId: editingGem ? editingGem.id : undefined&#10;      };&#10;      const data = await callCuriowApi(body);&#10;      if (data.content?.description) {&#10;        setFormData(fd =&gt; ({&#10;          ...fd,&#10;          description: data.content.description,&#10;          sources: Array.isArray(data.search_results)&#10;            ? data.search_results.map((s: any) =&gt; ({ uri: s.url, title: s.title }))&#10;            : fd.sources&#10;        }));&#10;      } else {&#10;        const newDesc = data.description || data.text || data.content || null;&#10;        if (newDesc) {&#10;          setFormData(fd =&gt; ({ ...fd, description: newDesc }));&#10;        }&#10;      }&#10;    } catch (e: any) {&#10;      console.error(e);&#10;      setAiError(e.message || 'Errore sconosciuto');&#10;    } finally {&#10;      setAiLoading(l =&gt; ({ ...l, description: false }));&#10;    }&#10;  };&#10;&#10;  const callCreateImageAI = async () =&gt; {&#10;    if (aiLoading.image) return;&#10;    if (!formData.description.trim()) {&#10;      alert('Prima di creare l\'immagine inserire una descrizione');&#10;      return;&#10;    }&#10;    setAiError(null);&#10;    setAiLoading(l =&gt; ({ ...l, image: true }));&#10;    try {&#10;      const body = {&#10;        apitype: 'create-image',&#10;        description: formData.description,&#10;        gemId: editingGem ? editingGem.id : undefined&#10;      };&#10;      const data = await callCuriowApi(body);&#10;      const img = data.secure_url || data.imageUrl || data.url || data.image || data.result || null;&#10;      if (img) setPendingImageUrl(img);&#10;    } catch (e: any) {&#10;      console.error(e);&#10;      setAiError(e.message || 'Errore sconosciuto');&#10;    } finally {&#10;      setAiLoading(l =&gt; ({ ...l, image: false }));&#10;    }&#10;  };&#10;&#10;  // helper label sezione&#10;  const formatSectionLabel = (id: string): string =&gt; {&#10;    const map: Record&lt;string, string&gt; = {&#10;      myth: 'Mito',&#10;      reality: 'Realtà',&#10;      evidence: 'Evidenze',&#10;      why_it_matters: 'Perché Conta',&#10;      general: 'Generale',&#10;      step: 'Step'&#10;    };&#10;    if (id.startsWith('step ')) return id; // già formattato&#10;    return map[id] || id.replace(/_/g, ' ').replace(/\b\w/g, c =&gt; c.toUpperCase());&#10;  };&#10;&#10;  const callCreateQuestionsAI = async () =&gt; {&#10;    if (!editingGem) return;&#10;    if (aiLoading.questions) return;&#10;    setAiError(null);&#10;    setAiLoading(l =&gt; ({ ...l, questions: true }));&#10;    try {&#10;      const content: any = (editingGem as any).content || {};&#10;      const { description: _d, claims_to_verify: _c, ...tips } = content;&#10;      const body = {&#10;        apitype: 'create-question',&#10;        description: content.description || formData.description,&#10;        template: content.template || 'article',&#10;        tips,&#10;        gemId: editingGem.id&#10;      };&#10;      const data = await callCuriowApi(body);&#10;      const extraQ = data?.extraData?.questions;&#10;      if (extraQ &amp;&amp; typeof extraQ === 'object') {&#10;        const isoNow = new Date().toISOString();&#10;        const collectedStrings: string[] = [];&#10;        const newStructured: StructuredAIQuestion[] = [];&#10;        for (const sectionId of Object.keys(extraQ)) {&#10;          const sectionContent: any = extraQ[sectionId];&#10;          if (sectionId === 'step' &amp;&amp; Array.isArray(sectionContent) &amp;&amp; Array.isArray(sectionContent[0])) {&#10;            (sectionContent as any[]).forEach((arr: any[], stepIndex: number) =&gt; {&#10;              const stepItems: { testo: string; tipologia?: string; stepIndex?: number }[] = [];&#10;              arr.forEach(item =&gt; {&#10;                if (item?.testo) {&#10;                  addGeneratedQuestion({&#10;                    createdAt: isoNow,&#10;                    gemId: editingGem.id,&#10;                    section: sectionId,&#10;                    testo: item.testo,&#10;                    tipologia: item.tipologia || '',&#10;                    stepIndex&#10;                  }).catch(console.error);&#10;                  collectedStrings.push(item.testo);&#10;                  stepItems.push({ testo: item.testo, tipologia: item.tipologia, stepIndex });&#10;                }&#10;              });&#10;              if (stepItems.length) {&#10;                newStructured.push({ section: `${formatSectionLabel('step')} ${stepIndex + 1}`, sectionId: 'step', items: stepItems });&#10;              }&#10;            });&#10;          } else if (Array.isArray(sectionContent)) {&#10;            const items: { testo: string; tipologia?: string }[] = [];&#10;            sectionContent.forEach(item =&gt; {&#10;              if (item?.testo) {&#10;                addGeneratedQuestion({&#10;                  createdAt: isoNow,&#10;                  gemId: editingGem.id,&#10;                  section: sectionId,&#10;                  testo: item.testo,&#10;                  tipologia: item.tipologia || ''&#10;                }).catch(console.error);&#10;                collectedStrings.push(item.testo);&#10;                items.push({ testo: item.testo, tipologia: item.tipologia });&#10;              }&#10;            });&#10;            if (items.length) newStructured.push({ section: formatSectionLabel(sectionId), sectionId, items });&#10;          }&#10;        }&#10;        if (collectedStrings.length) {&#10;          setFormData(fd =&gt; ({ ...fd, suggestedQuestions: [...fd.suggestedQuestions, ...collectedStrings] }));&#10;          // Merge con esistenti evitando duplicati di label&#10;            setStructuredAIQuestions(prev =&gt; {&#10;              const merged: StructuredAIQuestion[] = [...prev.map(g =&gt; ({ ...g, items: [...g.items] }))];&#10;              newStructured.forEach(group =&gt; {&#10;                const idx = merged.findIndex(g =&gt; g.section === group.section);&#10;                if (idx &gt;= 0) {&#10;                  // aggiungi solo nuove domande non duplicate&#10;                  group.items.forEach(it =&gt; {&#10;                    if (!merged[idx].items.some(e =&gt; e.testo === it.testo)) {&#10;                      merged[idx].items.push(it);&#10;                    }&#10;                  });&#10;                } else {&#10;                  merged.push(group);&#10;                }&#10;              });&#10;              return merged;&#10;            });&#10;        }&#10;      } else {&#10;        const questions = data.questions || data.suggestedQuestions || data.result || null;&#10;        if (Array.isArray(questions)) {&#10;          setFormData(fd =&gt; ({ ...fd, suggestedQuestions: [...fd.suggestedQuestions, ...questions] }));&#10;        } else if (typeof questions === 'string') {&#10;          setFormData(fd =&gt; ({ ...fd, suggestedQuestions: [...fd.suggestedQuestions, questions] }));&#10;        }&#10;      }&#10;    } catch (e: any) {&#10;      console.error(e);&#10;      setAiError(e.message || 'Errore sconosciuto');&#10;    } finally {&#10;      setAiLoading(l =&gt; ({ ...l, questions: false }));&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;AdminPageLayout&#10;      title=&quot;Gestione Gems&quot;&#10;      subtitle={`${filteredAndSortedGems.length} gems totali`}&#10;      onBack={onBack}&#10;    &gt;&#10;      {/* Filtri e controlli */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4&quot;&gt;&#10;          {/* Ricerca */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Cerca gems&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex&quot;&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                value={searchTerm}&#10;                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                placeholder=&quot;Titolo, descrizione, tag...&quot;&#10;                className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; handleSearch()}&#10;              /&gt;&#10;              &lt;button&#10;                onClick={handleSearch}&#10;                className=&quot;px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Filtro per canale */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Filtra per canale&#10;            &lt;/label&gt;&#10;            &lt;select&#10;              value={channelFilter}&#10;              onChange={(e) =&gt; setChannelFilter(e.target.value)}&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            &gt;&#10;              &lt;option value=&quot;all&quot;&gt;Tutti i canali&lt;/option&gt;&#10;              {channels.map(channel =&gt; (&#10;                &lt;option key={channel.id} value={channel.id}&gt;{channel.name}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Filtro per tag */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Filtra per tag&#10;            &lt;/label&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              value={tagFilter}&#10;              onChange={(e) =&gt; setTagFilter(e.target.value)}&#10;              placeholder=&quot;Inserisci tag...&quot;&#10;              className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Ordinamento */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;              Ordina per&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;              &lt;select&#10;                value={sortBy}&#10;                onChange={(e) =&gt; setSortBy(e.target.value as 'title' | 'topic' | 'created')}&#10;                className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;              &gt;&#10;                &lt;option value=&quot;title&quot;&gt;Titolo&lt;/option&gt;&#10;                &lt;option value=&quot;topic&quot;&gt;Topic&lt;/option&gt;&#10;              &lt;/select&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}&#10;                className=&quot;px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;              &gt;&#10;                {sortOrder === 'asc' ? '↑' : '↓'}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Controlli azioni */}&#10;        &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            &lt;button&#10;              onClick={loadGems}&#10;              className=&quot;px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;            &gt;&#10;               Ricarica&#10;            &lt;/button&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Gems per pagina:&lt;/span&gt;&#10;              &lt;select&#10;                value={gemsPerPage}&#10;                onChange={(e) =&gt; setGemsPerPage(Number(e.target.value))}&#10;                className=&quot;px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &lt;option value={10}&gt;10&lt;/option&gt;&#10;                &lt;option value={25}&gt;25&lt;/option&gt;&#10;                &lt;option value={50}&gt;50&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {permissions.canCreateGems &amp;&amp; (&#10;            &lt;button&#10;              onClick={() =&gt; setShowCreateModal(true)}&#10;              className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-1 focus:ring-blue-500&quot;&#10;            &gt;&#10;              ➕ Nuova Gem&#10;            &lt;/button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Lista gems */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border border-gray-200&quot;&gt;&#10;        {loading ? (&#10;          &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Caricamento gems...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : currentGems.length === 0 ? (&#10;          &lt;div className=&quot;p-8 text-center text-gray-500&quot;&gt;&#10;            &lt;p&gt;Nessuna gem trovata.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full&quot;&gt;&#10;                &lt;thead className=&quot;bg-gray-50 border-b border-gray-200&quot;&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Gem&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Topic&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Tags&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Fonti&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Azioni&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;                  {currentGems.map((gem) =&gt; (&#10;                    &lt;React.Fragment key={gem.id}&gt;&#10;                      &lt;tr className=&quot;hover:bg-gray-50&quot;&gt;&#10;                        &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                          &lt;div className=&quot;flex items-center&quot;&gt;&#10;                            {gem.imageUrl &amp;&amp; (&#10;                              &lt;img&#10;                                src={gem.imageUrl}&#10;                                alt={gem.title}&#10;                                className=&quot;h-12 w-12 rounded-lg object-cover mr-4&quot;&#10;                              /&gt;&#10;                            )}&#10;                            &lt;div&gt;&#10;                              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                                &lt;h3 className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                                  {gem.title}&#10;                                &lt;/h3&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt; toggleGemExpansion(gem.id)}&#10;                                  className=&quot;ml-2 text-gray-400 hover:text-gray-600&quot;&#10;                                &gt;&#10;                                  {expandedGems.has(gem.id) ? '' : '▶️'}&#10;                                &lt;/button&gt;&#10;                              &lt;/div&gt;&#10;                              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                                {gem.suggestedQuestions?.length || 0} domande suggerite&#10;                              &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#10;                          &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800&quot;&gt;&#10;                            {gem.topic}&#10;                          &lt;/span&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                          &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                            {gem.tags?.slice(0, 3).map((tag, index) =&gt; (&#10;                              &lt;span key={index} className=&quot;inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-800&quot;&gt;&#10;                                {tag}&#10;                              &lt;/span&gt;&#10;                            ))}&#10;                            {(gem.tags?.length || 0) &gt; 3 &amp;&amp; (&#10;                              &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                +{(gem.tags?.length || 0) - 3}&#10;                              &lt;/span&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500&quot;&gt;&#10;                          {((gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources)?.length || 0} fonti&#10;                        &lt;/td&gt;&#10;                        &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-right text-sm font-medium&quot;&gt;&#10;                          &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                            {permissions.canEditGems &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; openEditModal(gem)}&#10;                                className=&quot;text-blue-600 hover:text-blue-900&quot;&#10;                              &gt;&#10;                                ✏️&#10;                              &lt;/button&gt;&#10;                            )}&#10;                            {permissions.canDeleteGems &amp;&amp; (&#10;                              &lt;button&#10;                                onClick={() =&gt; setConfirmModal({&#10;                                  isOpen: true,&#10;                                  action: () =&gt; handleDeleteGem(gem.id),&#10;                                  title: 'Elimina Gem',&#10;                                  message: `Sei sicuro di voler eliminare la gem &quot;${gem.title}&quot;? Questa azione non può essere annullata.`&#10;                                })}&#10;                                className=&quot;text-red-600 hover:text-red-900&quot;&#10;                              &gt;&#10;                                ️&#10;                              &lt;/button&gt;&#10;                            )}&#10;                          &lt;/div&gt;&#10;                        &lt;/td&gt;&#10;                      &lt;/tr&gt;&#10;                      {expandedGems.has(gem.id) &amp;&amp; (&#10;                        &lt;tr&gt;&#10;                          &lt;td colSpan={5} className=&quot;px-6 py-4 bg-gray-50&quot;&gt;&#10;                            &lt;div className=&quot;max-w-none space-y-4&quot;&gt;&#10;                              &lt;div&gt;&#10;                                &lt;h4 className=&quot;text-sm font-medium text-gray-900 mb-2&quot;&gt;Contenuto:&lt;/h4&gt;&#10;                                {gem.content?.template ? (&#10;                                  &lt;div className=&quot;p-3 border border-gray-200 rounded bg-white&quot;&gt;{renderStructuredContentSummary(gem.content)}&lt;/div&gt;&#10;                                ) : (&#10;                                  &lt;p className=&quot;text-sm text-gray-700 whitespace-pre-wrap&quot;&gt;{(gem as any).content?.description || ''}&lt;/p&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                              {(gem.suggestedQuestions?.length || 0) &gt; 0 &amp;&amp; (&#10;                                &lt;div&gt;&#10;                                  &lt;h4 className=&quot;text-sm font-medium text-gray-900 mb-2&quot;&gt;Domande suggerite (flat):&lt;/h4&gt;&#10;                                  &lt;ul className=&quot;list-disc list-inside text-sm text-gray-700 space-y-1&quot;&gt;&#10;                                    {gem.suggestedQuestions?.map((question, index) =&gt; (&#10;                                      &lt;li key={index}&gt;{question}&lt;/li&gt;&#10;                                    ))}&#10;                                  &lt;/ul&gt;&#10;                                &lt;/div&gt;&#10;                              )}&#10;                              {/* Nota: la struttura AI dettagliata è visibile solo nel modal di modifica corrente */}&#10;                              {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return (sources?.length || 0) &gt; 0 &amp;&amp; (&#10;                                &lt;div&gt;&#10;                                  &lt;h4 className=&quot;text-sm font-medium text-gray-900 mb-2&quot;&gt;Fonti:&lt;/h4&gt;&#10;                                  &lt;ul className=&quot;space-y-1&quot;&gt;&#10;                                    {sources.map((source: any, index: number) =&gt; (&#10;                                      &lt;li key={index} className=&quot;text-sm&quot;&gt;&#10;                                        &lt;a&#10;                                          href={source.uri}&#10;                                          target=&quot;_blank&quot;&#10;                                          rel=&quot;noopener noreferrer&quot;&#10;                                          className=&quot;text-blue-600 hover:text-blue-800 underline break-all&quot;&#10;                                        &gt;&#10;                                          {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                      &lt;/li&gt;&#10;                                    ))}&#10;                                  &lt;/ul&gt;&#10;                                &lt;/div&gt;&#10;                              ); })()}&#10;                            &lt;/div&gt;&#10;                          &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                      )}&#10;                    &lt;/React.Fragment&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Paginazione */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;px-6 py-3 border-t border-gray-200 flex justify-between items-center&quot;&gt;&#10;                &lt;div className=&quot;text-sm text-gray-700&quot;&gt;&#10;                  Mostrando {indexOfFirstGem + 1}-{Math.min(indexOfLastGem, filteredAndSortedGems.length)} di {filteredAndSortedGems.length} gems&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage - 1)}&#10;                    disabled={currentPage === 1}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Precedente&#10;                  &lt;/button&gt;&#10;                  &lt;span className=&quot;px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md&quot;&gt;&#10;                    {currentPage} di {totalPages}&#10;                  &lt;/span&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(currentPage + 1)}&#10;                    disabled={currentPage === totalPages}&#10;                    className=&quot;px-3 py-1 text-sm border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                  &gt;&#10;                    Successiva&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Modal per creare/modificare gem */}&#10;      {(showCreateModal || editingGem) &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4&quot;&gt;&#10;          &lt;div className=&quot;bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto&quot;&gt;&#10;            &lt;div className=&quot;p-6&quot;&gt;&#10;              &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-semibold text-gray-900&quot;&gt;&#10;                  {editingGem ? 'Modifica Gem' : 'Nuova Gem'}&#10;                &lt;/h2&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setShowCreateModal(false);&#10;                    setEditingGem(null);&#10;                    resetForm();&#10;                  }}&#10;                  className=&quot;text-gray-400 hover:text-gray-600&quot;&#10;                &gt;&#10;                  ✕&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                {/* Colonna sinistra */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      Titolo *&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={formData.title}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, title: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      required&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Canale *&#10;                    &lt;/label&gt;&#10;                    &lt;select&#10;                      value={formData.channelId}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, channelId: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      required&#10;                    &gt;&#10;                      &lt;option value=&quot;&quot;&gt;Seleziona un canale&lt;/option&gt;&#10;                      {channels.map(channel =&gt; (&#10;                        &lt;option key={channel.id} value={channel.id}&gt;{channel.name}&lt;/option&gt;&#10;                      ))}&#10;                    &lt;/select&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      URL Immagine&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={callCreateImageAI}&#10;                        title=&quot;Genera immagine con AI&quot;&#10;                        className=&quot;text-xs px-2 py-1 rounded bg-indigo-100 text-indigo-700 hover:bg-indigo-200 disabled:opacity-50 flex items-center gap-1&quot;&#10;                        disabled={aiLoading.image}&#10;                      &gt;&#10;                        {aiLoading.image &amp;&amp; &lt;span className=&quot;animate-spin inline-block h-3 w-3 border-2 border-indigo-600 border-t-transparent rounded-full&quot;&gt;&lt;/span&gt;}&#10;                        {aiLoading.image ? 'Gen' : 'AI'}&#10;                      &lt;/button&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={formData.imageUrl}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, imageUrl: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      placeholder=&quot;https://...&quot;&#10;                    /&gt;&#10;                    {formData.imageUrl &amp;&amp; (&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500 break-all&quot;&gt;Attuale: {formData.imageUrl}&lt;/div&gt;&#10;                    )}&#10;                    {pendingImageUrl &amp;&amp; (&#10;                      &lt;div className=&quot;mt-3 p-3 border rounded-md bg-gray-50&quot;&gt;&#10;                        &lt;p className=&quot;text-xs font-medium text-gray-700 mb-2&quot;&gt;Nuova immagine generata (anteprima)&lt;/p&gt;&#10;                        &lt;img src={pendingImageUrl} alt=&quot;Anteprima AI&quot; className=&quot;w-full max-h-64 object-contain rounded mb-2&quot; /&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; {&#10;                              setFormData(fd =&gt; ({ ...fd, imageUrl: pendingImageUrl }));&#10;                              setPendingImageUrl(null);&#10;                            }}&#10;                            className=&quot;px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700&quot;&#10;                          &gt;&#10;                            Conferma&#10;                          &lt;/button&gt;&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; setPendingImageUrl(null)}&#10;                            className=&quot;px-3 py-1 text-sm bg-gray-300 text-gray-800 rounded hover:bg-gray-400&quot;&#10;                          &gt;&#10;                            Annulla&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      URL Video (opzionale)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;url&quot;&#10;                      value={formData.videoUrl}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, videoUrl: e.target.value })}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      placeholder=&quot;https://... (se presente, sostituisce l'immagine)&quot;&#10;                    /&gt;&#10;                    {formData.videoUrl &amp;&amp; (&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500 break-all&quot;&gt;Video: {formData.videoUrl}&lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Tags&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;flex space-x-2 mb-2&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;newTag&quot;&#10;                        placeholder=&quot;Nuovo tag...&quot;&#10;                        className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                        onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; addTag()}&#10;                      /&gt;&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={addTag}&#10;                        className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700&quot;&#10;                      &gt;&#10;                        Aggiungi&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;                      {formData.tags.map((tag, index) =&gt; (&#10;                        &lt;span key={index} className=&quot;inline-flex items-center px-2 py-1 rounded-md text-sm bg-blue-100 text-blue-800&quot;&gt;&#10;                          {tag}&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; removeTag(index)}&#10;                            className=&quot;ml-1 text-blue-600 hover:text-blue-800&quot;&#10;                          &gt;&#10;                            ×&#10;                          &lt;/button&gt;&#10;                        &lt;/span&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Colonna destra */}&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      Descrizione * (Saggio / Testo lungo)&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={callCreateTextAI}&#10;                        title=&quot;Genera / migliora testo con AI&quot;&#10;                        className=&quot;text-xs px-2 py-1 rounded bg-indigo-100 text-indigo-700 hover:bg-indigo-200 disabled:opacity-50&quot;&#10;                        disabled={aiLoading.description}&#10;                      &gt;&#10;                        {aiLoading.description ? '…' : 'AI'}&#10;                      &lt;/button&gt;&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={formData.description}&#10;                      onChange={(e) =&gt; setFormData({ ...formData, description: e.target.value })}&#10;                      rows={6}&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      required&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2&quot;&gt;&#10;                      Domande Suggerite&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={callCreateQuestionsAI}&#10;                        title={editingGem ? 'Genera domande con AI' : 'Disponibile solo in modifica'}&#10;                        className=&quot;text-xs px-2 py-1 rounded bg-indigo-100 text-indigo-700 hover:bg-indigo-200 disabled:opacity-50&quot;&#10;                        disabled={aiLoading.questions || !editingGem}&#10;                      &gt;&#10;                        {aiLoading.questions ? '…' : 'AI'}&#10;                      &lt;/button&gt;&#10;                    &lt;/label&gt;&#10;                    {structuredAIQuestions.length &gt; 0 &amp;&amp; (&#10;                      &lt;div className=&quot;mb-4 space-y-4 border border-indigo-100 rounded-md p-3 bg-indigo-50/40&quot;&gt;&#10;                        {structuredAIQuestions.map((group, gi) =&gt; (&#10;                          &lt;div key={gi} className=&quot;space-y-1&quot;&gt;&#10;                            &lt;h5 className=&quot;text-xs font-semibold tracking-wide text-indigo-700 uppercase&quot;&gt;{group.section}&lt;/h5&gt;&#10;                            &lt;ul className=&quot;list-disc list-inside space-y-1&quot;&gt;&#10;                              {group.items.map((q, qi) =&gt; (&#10;                                &lt;li key={qi} className=&quot;text-sm text-gray-700&quot;&gt;&#10;                                  &lt;span&gt;{q.testo}&lt;/span&gt;&#10;                                  {q.tipologia &amp;&amp; &lt;span className=&quot;ml-2 text-[10px] px-1.5 py-0.5 rounded bg-indigo-100 text-indigo-700&quot;&gt;{q.tipologia}&lt;/span&gt;}&#10;                                &lt;/li&gt;&#10;                              ))}&#10;                            &lt;/ul&gt;&#10;                          &lt;/div&gt;&#10;                        ))}&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    &lt;div className=&quot;flex space-x-2 mb-2&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;newQuestion&quot;&#10;                        placeholder=&quot;Nuova domanda...&quot;&#10;                        className=&quot;flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                        onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; addSuggestedQuestion()}&#10;                      /&gt;&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={addSuggestedQuestion}&#10;                        className=&quot;px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700&quot;&#10;                      &gt;&#10;                        Aggiungi&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Fonti&#10;                    &lt;/label&gt;&#10;                    &lt;div className=&quot;grid grid-cols-2 gap-2 mb-2&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;url&quot;&#10;                        id=&quot;newSourceUri&quot;&#10;                        placeholder=&quot;URL fonte...&quot;&#10;                        className=&quot;px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      /&gt;&#10;                      &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;newSourceTitle&quot;&#10;                        placeholder=&quot;Titolo fonte...&quot;&#10;                        className=&quot;px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={addSource}&#10;                      className=&quot;w-full px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 mb-2&quot;&#10;                    &gt;&#10;                      Aggiungi Fonte&#10;                    &lt;/button&gt;&#10;                    &lt;div className=&quot;space-y-2 max-h-32 overflow-y-auto&quot;&gt;&#10;                      {formData.sources.map((source, index) =&gt; (&#10;                        &lt;div key={index} className=&quot;flex items-center justify-between p-2 bg-gray-50 rounded&quot;&gt;&#10;                          &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                            &lt;div className=&quot;text-sm font-medium truncate&quot;&gt;{source.title}&lt;/div&gt;&#10;                            &lt;div className=&quot;text-xs text-gray-500 truncate&quot;&gt;{source.uri}&lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;button&#10;                            type=&quot;button&quot;&#10;                            onClick={() =&gt; removeSource(index)}&#10;                            className=&quot;text-red-600 hover:text-red-800 ml-2&quot;&#10;                          &gt;&#10;                            ×&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {aiError &amp;&amp; (&#10;                &lt;div className=&quot;mt-4 text-sm text-red-600&quot;&gt;&#10;                  Errore AI: {aiError}&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              &lt;div className=&quot;flex justify-end space-x-3 mt-6 pt-6 border-t border-gray-200&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; {&#10;                    setShowCreateModal(false);&#10;                    setEditingGem(null);&#10;                    resetForm();&#10;                  }}&#10;                  className=&quot;px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50&quot;&#10;                &gt;&#10;                  Annulla&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  onClick={editingGem ? handleUpdateGem : handleCreateGem}&#10;                  disabled={!formData.title || !formData.description || !formData.channelId}&#10;                  className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed&quot;&#10;                &gt;&#10;                  {editingGem ? 'Salva Modifiche' : 'Crea Gem'}&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Modal di conferma */}&#10;      &lt;AdminConfirmationModal&#10;        isOpen={confirmModal.isOpen}&#10;        title={confirmModal.title}&#10;        message={confirmModal.message}&#10;        actionText=&quot;Elimina&quot;&#10;        actionType=&quot;danger&quot;&#10;        onConfirm={() =&gt; {&#10;          confirmModal.action();&#10;          setConfirmModal({ ...confirmModal, isOpen: false });&#10;        }}&#10;        onClose={() =&gt; setConfirmModal({ ...confirmModal, isOpen: false })}&#10;      /&gt;&#10;    &lt;/AdminPageLayout&gt;&#10;  );&#10;};&#10;&#10;export default GemsManagement;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.cjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.cjs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const { initializeApp } = require('firebase/app');&#10;const { getFirestore, collection, getDocs, updateDoc, doc } = require('firebase/firestore');&#10;const { firebaseConfig } = require('../services/firebase.cjs');&#10;&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.js" />
              <option name="updatedContent" value="const { initializeApp } = require('firebase/app');&#10;const { getFirestore, collection, getDocs, updateDoc, doc } = require('firebase/firestore');&#10;const { firebaseConfig } = require('../services/firebase');&#10;&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.ts" />
              <option name="updatedContent" value="import { initializeApp } from 'firebase/app';&#10;import { getFirestore, collection, getDocs, updateDoc, doc } from 'firebase/firestore';&#10;import { firebaseConfig } from '../services/firebase';&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;// Esegui solo se chiamato direttamente&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}&#10;&#10;export default normalizeStepQuestions;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firebase.cjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firebase.cjs" />
              <option name="updatedContent" value="module.exports = {&#10;  firebaseConfig: {&#10;    apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;    authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;    projectId: &quot;curiow-432ed&quot;,&#10;    storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;    messagingSenderId: &quot;115136967854&quot;,&#10;    appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;    measurementId: &quot;G-LF4YY7HHR3&quot;&#10;  }&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types.ts" />
              <option name="originalContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;  canManageChannels: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;// ---- Nuovi tipi contenuto Gem ----&#10;export interface MiniThreadContentStep {&#10;  title: string;&#10;  body: string;&#10;}&#10;export interface MiniThreadContent {&#10;  template: 'mini_thread';&#10;  steps: MiniThreadContentStep[];&#10;  payoff: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface MythVsRealityContent {&#10;  template: 'myth_vs_reality';&#10;  myth: string;&#10;  reality: string;&#10;  evidence: string;&#10;  why_it_matters: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface FactCardContent {&#10;  template: 'fact_card';&#10;  hook: string;&#10;  facts: string[];&#10;  implication: string;&#10;  action: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface ProsConsContent {&#10;  template: 'pros_cons';&#10;  scenario: string;&#10;  pros: string[];&#10;  cons: string[];&#10;  advice: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface QuickExplainerContent {&#10;  template: 'quick_explainer';&#10;  analogy: string;&#10;  definition: string;&#10;  example: string;&#10;  anti_example: string;&#10;  takeaway: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export type GemContent =&#10;  MiniThreadContent |&#10;  MythVsRealityContent |&#10;  FactCardContent |&#10;  ProsConsContent |&#10;  QuickExplainerContent |&#10;  { template: string; summary?: string; [key: string]: any };&#10;// ---- fine nuovi tipi ----&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  /** @deprecated Spostato in content.description */&#10;  description?: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[]; // legacy / backdoor&#10;  search_results?: Source[]; // nuovo campo principale per le fonti&#10;  content?: GemContent; // nuovo campo opzionale per template strutturati (incluso description a livello content)&#10;  channelId?: string; // opzionale: riferimento al canale&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;    emoji?: string; // opzionale: emoji per visualizzazione UI&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}&#10;&#10;// Tipo per i modelli LLM e i loro costi&#10;export interface LLMModel {&#10;  id: string;&#10;  name: string; // Nome del modello (es. &quot;gpt-4&quot;, &quot;claude-3-opus&quot;)&#10;  inputCostPerMilion?: number; // Costo per milione di token di input in dollari (opzionale per modelli a costo fisso)&#10;  outputCostPerMilion?: number; // Costo per milione di token di output in dollari (opzionale per modelli a costo fisso)&#10;  fixCost?: number; // Costo fisso per singola elaborazione in dollari (per modelli che non usano pricing per token)&#10;  createdAt?: Date;&#10;  updatedAt?: Date;&#10;  isActive?: boolean; // Per disabilitare modelli obsoleti&#10;}&#10;" />
              <option name="updatedContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;  canManageChannels: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;// ---- Nuovi tipi contenuto Gem ----&#10;export interface MiniThreadContentStep {&#10;  title: string;&#10;  body: string;&#10;}&#10;export interface MiniThreadContent {&#10;  template: 'mini_thread';&#10;  steps: MiniThreadContentStep[];&#10;  payoff: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface MythVsRealityContent {&#10;  template: 'myth_vs_reality';&#10;  myth: string;&#10;  reality: string;&#10;  evidence: string;&#10;  why_it_matters: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface FactCardContent {&#10;  template: 'fact_card';&#10;  hook: string;&#10;  facts: string[];&#10;  implication: string;&#10;  action: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface ProsConsContent {&#10;  template: 'pros_cons';&#10;  scenario: string;&#10;  pros: string[];&#10;  cons: string[];&#10;  advice: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export interface QuickExplainerContent {&#10;  template: 'quick_explainer';&#10;  analogy: string;&#10;  definition: string;&#10;  example: string;&#10;  anti_example: string;&#10;  takeaway: string;&#10;  claims_to_verify?: string[];&#10;  summary?: string; // aggiunto&#10;}&#10;export type GemContent =&#10;  MiniThreadContent |&#10;  MythVsRealityContent |&#10;  FactCardContent |&#10;  ProsConsContent |&#10;  QuickExplainerContent |&#10;  { template: string; summary?: string; [key: string]: any };&#10;// ---- fine nuovi tipi ----&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  /** @deprecated Spostato in content.description */&#10;  description?: string;&#10;  imageUrl: string;&#10;  videoUrl?: string; // nuovo campo opzionale per il video&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[]; // legacy / backdoor&#10;  search_results?: Source[]; // nuovo campo principale per le fonti&#10;  content?: GemContent; // nuovo campo opzionale per template strutturati (incluso description a livello content)&#10;  channelId?: string; // opzionale: riferimento al canale&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;    emoji?: string; // opzionale: emoji per visualizzazione UI&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}&#10;&#10;// Tipo per i modelli LLM e i loro costi&#10;export interface LLMModel {&#10;  id: string;&#10;  name: string; // Nome del modello (es. &quot;gpt-4&quot;, &quot;claude-3-opus&quot;)&#10;  inputCostPerMilion?: number; // Costo per milione di token di input in dollari (opzionale per modelli a costo fisso)&#10;  outputCostPerMilion?: number; // Costo per milione di token di output in dollari (opzionale per modelli a costo fisso)&#10;  fixCost?: number; // Costo fisso per singola elaborazione in dollari (per modelli che non usano pricing per token)&#10;  createdAt?: Date;&#10;  updatedAt?: Date;&#10;  isActive?: boolean; // Per disabilitare modelli obsoleti&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>