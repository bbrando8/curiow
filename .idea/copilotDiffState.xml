<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemCard.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon } from './icons';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onRemoveRequest, onSelect, onLoginRequest, onView }) =&gt; {&#10;&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        if (isFavorite) {&#10;          onRemoveRequest(gem.id);&#10;        } else {&#10;          onSaveRequest(gem.id);&#10;        }&#10;    }&#10;  };&#10;&#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;        alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;    }&#10;  };&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  return (&#10;    &lt;div&#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;&#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={handleShareClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                title=&quot;Condividi&quot;&#10;                aria-label=&quot;Condividi gemma&quot;&#10;              &gt;&#10;                  &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;              &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                    &lt;/span&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon, ChevronDownIcon, SparklesIcon } from './icons';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onRemoveRequest, onSelect, onLoginRequest, onView }) =&gt; {&#10;&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        if (isFavorite) {&#10;          onRemoveRequest(gem.id);&#10;        } else {&#10;          onSaveRequest(gem.id);&#10;        }&#10;    }&#10;  };&#10;&#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;        alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;    }&#10;  };&#10;&#10;  const [showSummary, setShowSummary] = React.useState(false); // controllo manuale (click)&#10;  const [isHovering, setIsHovering] = React.useState(false); // stato hover&#10;  const [canHover, setCanHover] = React.useState(false);&#10;  React.useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const mq = window.matchMedia('(hover: hover) and (pointer: fine)');&#10;      const update = () =&gt; setCanHover(mq.matches);&#10;      update();&#10;      mq.addEventListener('change', update);&#10;      return () =&gt; mq.removeEventListener('change', update);&#10;    }&#10;  }, []);&#10;  const actualOpen = showSummary || (canHover &amp;&amp; isHovering);&#10;  const summary = (gem.content as any)?.summary as string | undefined;&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  return (&#10;    &lt;div&#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;        {summary &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-x-0 bottom-0&quot; onMouseEnter={() =&gt; setIsHovering(true)} onMouseLeave={() =&gt; setIsHovering(false)}&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={(e) =&gt; { e.stopPropagation(); setShowSummary(s =&gt; !s); }}&#10;              className={`w-full text-left group/summary focus:outline-none`}&#10;              aria-expanded={actualOpen}&#10;              aria-controls={`summary-${gem.id}`}&#10;              aria-label={actualOpen ? 'Chiudi sintesi' : 'Apri sintesi'}&#10;            &gt;&#10;              &lt;div className={`relative overflow-hidden transition-all duration-300 ease-out bg-gradient-to-t from-slate-900/90 via-slate-900/70 to-slate-900/20 backdrop-blur-sm text-white ${actualOpen ? 'max-h-60 sm:max-h-72' : 'max-h-16'}`}&gt; &#10;                &lt;div className=&quot;p-3 pr-10&quot;&gt;&#10;                  &lt;p id={`summary-${gem.id}`} className={`text-xs leading-snug whitespace-pre-line ${actualOpen ? '' : 'line-clamp-2'}`}&gt;{summary}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute right-2 top-2 flex items-center gap-1 text-[10px] uppercase font-semibold opacity-80&quot;&gt;&#10;                  &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${actualOpen ? 'rotate-180' : ''}`} /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute inset-0 ring-1 ring-white/10 rounded-t&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={handleShareClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                title=&quot;Condividi&quot;&#10;                aria-label=&quot;Condividi gemma&quot;&#10;              &gt;&#10;                  &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;              &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                    &lt;/span&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types.ts" />
              <option name="originalContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;  canManageChannels: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;// ---- Nuovi tipi contenuto Gem ----&#10;export interface MiniThreadContentStep {&#10;  title: string;&#10;  body: string;&#10;}&#10;export interface MiniThreadContent {&#10;  template: 'mini_thread';&#10;  steps: MiniThreadContentStep[];&#10;  payoff: string;&#10;  claims_to_verify?: string[];&#10;}&#10;export interface MythVsRealityContent {&#10;  template: 'myth_vs_reality';&#10;  myth: string;&#10;  reality: string;&#10;  evidence: string;&#10;  why_it_matters: string;&#10;  claims_to_verify?: string[];&#10;}&#10;export interface FactCardContent {&#10;  template: 'fact_card';&#10;  hook: string;&#10;  facts: string[];&#10;  implication: string;&#10;  action: string;&#10;  claims_to_verify?: string[];&#10;}&#10;export interface ProsConsContent {&#10;  template: 'pros_cons';&#10;  scenario: string;&#10;  pros: string[];&#10;  cons: string[];&#10;  advice: string;&#10;  claims_to_verify?: string[];&#10;}&#10;export interface QuickExplainerContent {&#10;  template: 'quick_explainer';&#10;  analogy: string;&#10;  definition: string;&#10;  example: string;&#10;  anti_example: string;&#10;  takeaway: string;&#10;  claims_to_verify?: string[];&#10;}&#10;export type GemContent =&#10;  MiniThreadContent |&#10;  MythVsRealityContent |&#10;  FactCardContent |&#10;  ProsConsContent |&#10;  QuickExplainerContent |&#10;  { template: string; [key: string]: any };&#10;// ---- fine nuovi tipi ----&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[]; // legacy / backdoor&#10;  search_results?: Source[]; // nuovo campo principale per le fonti&#10;  content?: GemContent; // nuovo campo opzionale per template strutturati&#10;  channelId?: string; // opzionale: riferimento al canale&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;    emoji?: string; // opzionale: emoji per visualizzazione UI&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}&#10;" />
              <option name="updatedContent" value="export enum Topic {&#13;&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#13;&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#13;&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#13;&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#13;&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#13;&#10;}&#13;&#10;&#13;&#10;export enum UserRole {&#13;&#10;  USER = &quot;user&quot;,&#13;&#10;  MODERATOR = &quot;moderator&quot;,&#13;&#10;  ADMIN = &quot;admin&quot;,&#13;&#10;  BETATESTER = &quot;betatester&quot;&#13;&#10;}&#13;&#10;&#13;&#10;export interface UserPermissions {&#13;&#10;  canCreateGems: boolean;&#13;&#10;  canEditGems: boolean;&#13;&#10;  canDeleteGems: boolean;&#13;&#10;  canManageUsers: boolean;&#13;&#10;  canModerateContent: boolean;&#13;&#10;  canViewDashboard: boolean;&#13;&#10;  canManageChannels: boolean;&#13;&#10;}&#13;&#10;&#13;&#10;export interface UserQuestion {&#13;&#10;  id: string;&#13;&#10;  question: string;&#13;&#10;  answer: string;&#13;&#10;  isGenerating?: boolean;&#13;&#10;}&#13;&#10;&#13;&#10;export interface Source {&#13;&#10;    uri: string;&#13;&#10;    title: string;&#13;&#10;}&#13;&#10;&#13;&#10;// ---- Nuovi tipi contenuto Gem ----&#13;&#10;export interface MiniThreadContentStep {&#13;&#10;  title: string;&#13;&#10;  body: string;&#13;&#10;}&#13;&#10;export interface MiniThreadContent {&#13;&#10;  template: 'mini_thread';&#13;&#10;  steps: MiniThreadContentStep[];&#13;&#10;  payoff: string;&#13;&#10;  claims_to_verify?: string[];&#13;&#10;  summary?: string; // aggiunto&#13;&#10;}&#13;&#10;export interface MythVsRealityContent {&#13;&#10;  template: 'myth_vs_reality';&#13;&#10;  myth: string;&#13;&#10;  reality: string;&#13;&#10;  evidence: string;&#13;&#10;  why_it_matters: string;&#13;&#10;  claims_to_verify?: string[];&#13;&#10;  summary?: string; // aggiunto&#13;&#10;}&#13;&#10;export interface FactCardContent {&#13;&#10;  template: 'fact_card';&#13;&#10;  hook: string;&#13;&#10;  facts: string[];&#13;&#10;  implication: string;&#13;&#10;  action: string;&#13;&#10;  claims_to_verify?: string[];&#13;&#10;  summary?: string; // aggiunto&#13;&#10;}&#13;&#10;export interface ProsConsContent {&#13;&#10;  template: 'pros_cons';&#13;&#10;  scenario: string;&#13;&#10;  pros: string[];&#13;&#10;  cons: string[];&#13;&#10;  advice: string;&#13;&#10;  claims_to_verify?: string[];&#13;&#10;  summary?: string; // aggiunto&#13;&#10;}&#13;&#10;export interface QuickExplainerContent {&#13;&#10;  template: 'quick_explainer';&#13;&#10;  analogy: string;&#13;&#10;  definition: string;&#13;&#10;  example: string;&#13;&#10;  anti_example: string;&#13;&#10;  takeaway: string;&#13;&#10;  claims_to_verify?: string[];&#13;&#10;  summary?: string; // aggiunto&#13;&#10;}&#13;&#10;export type GemContent =&#13;&#10;  MiniThreadContent |&#13;&#10;  MythVsRealityContent |&#13;&#10;  FactCardContent |&#13;&#10;  ProsConsContent |&#13;&#10;  QuickExplainerContent |&#13;&#10;  { template: string; summary?: string; [key: string]: any };&#13;&#10;// ---- fine nuovi tipi ----&#13;&#10;&#13;&#10;export interface Gem {&#13;&#10;  id:string;&#13;&#10;  topic: Topic;&#13;&#10;  title: string;&#13;&#10;  description: string;&#13;&#10;  imageUrl: string;&#13;&#10;  userQuestions: UserQuestion[];&#13;&#10;  tags: string[];&#13;&#10;  suggestedQuestions: string[];&#13;&#10;  sources: Source[]; // legacy / backdoor&#13;&#10;  search_results?: Source[]; // nuovo campo principale per le fonti&#13;&#10;  content?: GemContent; // nuovo campo opzionale per template strutturati&#13;&#10;  channelId?: string; // opzionale: riferimento al canale&#13;&#10;}&#13;&#10;&#13;&#10;export interface Channel {&#13;&#10;    id: string;&#13;&#10;    name: string;&#13;&#10;    description: string;&#13;&#10;    createdAt: Date;&#13;&#10;    isActive: boolean;&#13;&#10;    emoji?: string; // opzionale: emoji per visualizzazione UI&#13;&#10;}&#13;&#10;&#13;&#10;export interface SavedList {&#13;&#10;    id: string;&#13;&#10;    name: string;&#13;&#10;    gemIds: string[];&#13;&#10;}&#13;&#10;&#13;&#10;// Nuovi tipi per la struttura ristrutturata&#13;&#10;export interface List {&#13;&#10;    id: string;&#13;&#10;    name: string;&#13;&#10;    description?: string;&#13;&#10;    isPublic: boolean;&#13;&#10;    createdBy: string; // userId&#13;&#10;    createdAt: Date;&#13;&#10;    updatedAt: Date;&#13;&#10;    color?: string; // Per personalizzazione UI futura&#13;&#10;    icon?: string; // Emoji o icona&#13;&#10;}&#13;&#10;&#13;&#10;export interface ListItem {&#13;&#10;    id: string;&#13;&#10;    listId: string;&#13;&#10;    gemId: string;&#13;&#10;    addedBy: string; // userId&#13;&#10;    addedAt: Date;&#13;&#10;    order?: number; // Per ordinamento personalizzato&#13;&#10;}&#13;&#10;&#13;&#10;export interface ListMember {&#13;&#10;    id: string;&#13;&#10;    listId: string;&#13;&#10;    userId: string;&#13;&#10;    role: 'owner' | 'editor' | 'viewer';&#13;&#10;    joinedAt: Date;&#13;&#10;}&#13;&#10;&#13;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#13;&#10;export interface ListWithItems {&#13;&#10;    id: string;&#13;&#10;    name: string;&#13;&#10;    description?: string;&#13;&#10;    isPublic: boolean;&#13;&#10;    createdBy: string;&#13;&#10;    createdAt: Date;&#13;&#10;    updatedAt: Date;&#13;&#10;    color?: string;&#13;&#10;    icon?: string;&#13;&#10;    gemIds: string[];&#13;&#10;    itemCount: number;&#13;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#13;&#10;}&#13;&#10;&#13;&#10;export type Filter =&#13;&#10;  | { type: 'all' }&#13;&#10;  | { type: 'favorites' }&#13;&#10;  | { type: 'topic', value: Topic }&#13;&#10;  | { type: 'channel', value: string }&#13;&#10;  | { type: 'tag', value: string };&#13;&#10;&#13;&#10;export interface TopicSuggestion {&#13;&#10;  id: string;&#13;&#10;  title: string; // Titolo generato/modificato&#13;&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#13;&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#13;&#10;  tags: string[];&#13;&#10;  createdAt: Date;&#13;&#10;  updatedAt: Date;&#13;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#13;&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#13;&#10;}&#13;&#10;&#13;&#10;export interface BetaFeedback {&#13;&#10;  id: string;&#13;&#10;  userId: string;&#13;&#10;  userEmail: string;&#13;&#10;  userName: string; // Nome completo dell'utente&#13;&#10;  section: string;&#13;&#10;  message: string;&#13;&#10;  status: 'inviato' | 'letto' | 'risolto';&#13;&#10;  createdAt: Date;&#13;&#10;  updatedAt?: Date;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>