<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemDetailView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemDetailView.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon, LightBulbIcon, BookOpenIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon, MagnifyingGlassIcon } from './icons';&#10;import { trackEvent, getIdToken } from '../services/firebase';&#10;import { usePageMeta } from '../hooks/usePageMeta';&#10;import Header from './Header';&#10;import { fetchGeneratedQuestionsByGem, fetchDeepTopicSessions, DeepTopicSession, deleteDeepTopicSession } from '../services/firestoreService';&#10;import SectionQuestionsChat from './SectionQuestionsChat';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;  currentUserId?: string; // nuovo per sessioni approfondimenti&#10;}&#10;&#10;const UserQuestionItem: React.FC&lt;{ userQuestion: UserQuestion }&gt; = ({ userQuestion }) =&gt; (&#10;    &lt;div className=&quot;mt-4 p-4 bg-slate-100 dark:bg-slate-800 rounded-lg&quot;&gt;&#10;        &lt;p className=&quot;font-semibold text-sm text-slate-600 dark:text-slate-300&quot;&gt;Domanda: &lt;span className=&quot;font-normal&quot;&gt;{userQuestion.question}&lt;/span&gt;&lt;/p&gt;&#10;        &lt;div className=&quot;mt-2 text-sm text-slate-800 dark:text-slate-200&quot;&gt;&#10;            {userQuestion.isGenerating ? (&#10;                 &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4 animate-pulse text-indigo-400&quot; /&gt;&#10;                    &lt;span&gt;Generazione risposta...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{userQuestion.answer}&lt;/p&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels, currentUserId }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;  const [hasAutoScrolled, setHasAutoScrolled] = useState(false);&#10;  const imgRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;  // nuovo stato per tab&#10;  const [activeTab, setActiveTab] = useState&lt;'tips' | 'saggio' | 'approfondimenti'&gt;('tips');&#10;  // refs per animazione cross-fade&#10;  const tipsRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const saggioRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const [contentHeight, setContentHeight] = useState&lt;number&gt;(0);&#10;  const [showShareBar, setShowShareBar] = useState(false);&#10;  const [generatedQuestions, setGeneratedQuestions] = useState&lt;(any)[]&gt;([]);&#10;  const [deepSessions, setDeepSessions] = useState&lt;DeepTopicSession[]&gt;([]);&#10;  const [currentChatSessionId, setCurrentChatSessionId] = useState&lt;string | null&gt;(null);&#10;  const [loadingSessions, setLoadingSessions] = useState(false);&#10;  // RIMOSSI stati vecchia chat generale&#10;  // const [generalChatOpen, setGeneralChatOpen] = useState(false);&#10;  // const [generalAutoQId, setGeneralAutoQId] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalAutoCustom, setGeneralAutoCustom] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalCustomInput, setGeneralCustomInput] = useState('');&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const rawSummary: string = (gem as any)?.content?.summary || '';&#10;  const rawDescription: string = (gem as any)?.content?.description || '';&#10;  const baseText = rawSummary || rawDescription;&#10;  const descriptionSnippet = baseText ? baseText.replace(/\s+/g,' ').slice(0,180) : 'Gemme di conoscenza su Curiow.';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;&#10;  usePageMeta({&#10;    title: `${gem.title} | Curiow`,&#10;    description: descriptionSnippet,&#10;    image: gem.imageUrl,&#10;    url: currentUrl,&#10;    type: 'article'&#10;  });&#10;&#10;  const handleCopyLink = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(currentUrl);&#10;    } catch {&#10;      const tmp = document.createElement('input');&#10;      tmp.value = currentUrl; document.body.appendChild(tmp); tmp.select(); document.execCommand('copy'); document.body.removeChild(tmp);&#10;    }&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleNativeShare = async () =&gt; {&#10;    if (navigator.share) {&#10;      trackEvent('share_attempt', { channel: 'web_share', gem_id: gem.id });&#10;      try {&#10;        await navigator.share({ title: gem.title, text: shareText, url: currentUrl });&#10;        trackEvent('share', { channel: 'web_share', gem_id: gem.id });&#10;      } catch { /* annullato */ }&#10;    } else {&#10;      handleCopyLink();&#10;    }&#10;  };&#10;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;  // Instagram non ha share URL web: fallback copia link&#10;&#10;  // funzione misura altezza contenuto attivo&#10;  const measureActiveHeight = () =&gt; {&#10;    const el = activeTab === 'tips' ? tipsRef.current : saggioRef.current;&#10;    if (el) {&#10;      // usa scrollHeight per includere overflow&#10;      const h = el.scrollHeight;&#10;      setContentHeight(h);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    // misura dopo cambio tab / gem&#10;    requestAnimationFrame(() =&gt; measureActiveHeight());&#10;  }, [activeTab, gem.id]);&#10;&#10;  useEffect(() =&gt; {&#10;    // misura al resize per mantenere altezza coerente&#10;    const onResize = () =&gt; measureActiveHeight();&#10;    window.addEventListener('resize', onResize);&#10;    return () =&gt; window.removeEventListener('resize', onResize);&#10;  }, []);&#10;&#10;  // Funzione per scrollare il titolo allineandolo appena sotto l'header sticky&#10;  const scrollTitleIntoView = (smooth = false) =&gt; {&#10;    const titleEl = document.getElementById('gem-title');&#10;    if (!titleEl) return;&#10;    const headerEl = document.querySelector('header');&#10;    const headerHeight = headerEl ? (headerEl as HTMLElement).offsetHeight : 0;&#10;    const buffer = 8; // piccolo margine&#10;    const target = titleEl.getBoundingClientRect().top + window.scrollY - headerHeight - buffer;&#10;    window.scrollTo({ top: target &gt;= 0 ? target : 0, behavior: smooth ? 'smooth' : 'auto' });&#10;    setHasAutoScrolled(true);&#10;  };&#10;&#10;  // Scroll iniziale dopo mount/cambio gem (post layout)&#10;  useEffect(() =&gt; {&#10;    setHasAutoScrolled(false);&#10;    // Usa rAF per attendere layout, poi ulteriore timeout breve per carichi asincroni minimi&#10;    requestAnimationFrame(() =&gt; {&#10;      scrollTitleIntoView(false);&#10;      setTimeout(() =&gt; { if (!hasAutoScrolled) scrollTitleIntoView(false); }, 60);&#10;    });&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [gem.id]);&#10;&#10;  // Se l'immagine carica dopo e non abbiamo ancora auto-scrollato, riallinea&#10;  const handleImageLoad = () =&gt; {&#10;    if (!hasAutoScrolled) scrollTitleIntoView(false);&#10;  };&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  useEffect(()=&gt;{&#10;    let mounted = true;&#10;    fetchGeneratedQuestionsByGem(gem.id).then(qs=&gt;{ if(mounted){ setGeneratedQuestions(qs); } }).catch(e=&gt;console.error('Err fetch questions', e));&#10;    return ()=&gt;{ mounted=false; };&#10;  },[gem.id]);&#10;&#10;  // Funzioni domande per sezione&#10;  const getSectionQuestions = (section: string, stepIndex?: number) =&gt; {&#10;    return generatedQuestions.filter(q =&gt; q.section === section &amp;&amp; (section !== 'step' || q.stepIndex === stepIndex)).slice(0,3);&#10;  };&#10;  const generalQuestions = generatedQuestions.filter(q =&gt; q.section === 'general').slice(0,3);&#10;&#10;  const renderMiniThread = (content: any) =&gt; {&#10;    const steps = Array.isArray(content.steps) ? content.steps : [];&#10;    const openChat = (section: string, index: number | undefined, qs: any[]) =&gt; {&#10;      const enriched = qs.map(q =&gt; {&#10;        if (section === 'step' &amp;&amp; typeof index === 'number') {&#10;          const step = steps[index] || {};&#10;          return { ...q, element: { name: section, index, title: step.title || null, test: step.body || null } };&#10;        }&#10;        if (section === 'payoff') {&#10;          return { ...q, element: { name: section, title: 'Payoff', test: content.payoff || null } };&#10;        }&#10;        return { ...q, element: { name: section } };&#10;      });&#10;      // Aggiungi sempre le domande generali alle domande di sezione&#10;      const generalEnriched = generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }}));&#10;      const allQuestions = [...enriched, ...generalEnriched];&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-open', { detail: { questions: allQuestions } }));&#10;    };&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {steps.map((s: any, idx: number) =&gt; {&#10;            const qs = getSectionQuestions('step', idx);&#10;            return (&#10;              &lt;div key={idx} className=&quot;relative pl-10&quot;&gt;&#10;                &lt;div className=&quot;absolute left-0 top-0 flex flex-col items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-8 h-8 rounded-full bg-indigo-600 text-white flex items-center justify-center text-sm font-semibold shadow&quot;&gt;{idx+1}&lt;/div&gt;&#10;                  {idx &lt; steps.length -1 &amp;&amp; &lt;div className=&quot;flex-1 w-px bg-gradient-to-b from-indigo-400 via-indigo-300 to-transparent mt-1&quot;/&gt;}&#10;                &lt;/div&gt;&#10;                {qs.length &gt; 0 &amp;&amp; (&#10;                  &lt;button&#10;                    onClick={() =&gt; openChat('step', idx, qs)}&#10;                    title=&quot;Domande / Approfondisci&quot;&#10;                    className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;                  &gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;/button&gt;&#10;                )}&#10;                &lt;h3 className=&quot;text-lg font-semibold text-slate-900 dark:text-white&quot;&gt;{s.title}&lt;/h3&gt;&#10;                &lt;p className=&quot;mt-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{s.body}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;        {content.payoff &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-emerald-500/10 via-emerald-500/5 to-indigo-500/10 border border-emerald-400/30 dark:border-emerald-400/20 relative&quot;&gt;&#10;            {getSectionQuestions('payoff').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('payoff', undefined, getSectionQuestions('payoff'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;div className=&quot;flex items-start&quot;&gt;&#10;              &lt;SparklesIcon className=&quot;w-6 h-6 text-emerald-500 mr-3 mt-0.5&quot;/&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-sm uppercase tracking-wide font-semibold text-emerald-600 dark:text-emerald-400&quot;&gt;Payoff&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1 font-medium text-slate-900 dark:text-slate-100 leading-relaxed&quot;&gt;{content.payoff}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderMythVsReality = (content: any) =&gt; {&#10;    const openChat = (section: string, qs: any[]) =&gt; {&#10;      const enriched = qs.map(q =&gt; {&#10;        switch(section){&#10;          case 'myth': return { ...q, element: { name: section, title: 'Mito', test: content.myth || null } };&#10;          case 'reality': return { ...q, element: { name: section, title: 'Realtà', test: content.reality || null } };&#10;          case 'evidence': return { ...q, element: { name: section, title: 'Evidenze', test: content.evidence || null } };&#10;          case 'why_it_matters': return { ...q, element: { name: section, title: 'Perché conta', test: content.why_it_matters || null } };&#10;          default: return { ...q, element: { name: section } };&#10;        }&#10;      });&#10;      // Aggiungi sempre le domande generali alle domande di sezione&#10;      const generalEnriched = generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }}));&#10;      const allQuestions = [...enriched, ...generalEnriched];&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-open', { detail: { questions: allQuestions } }));&#10;    };&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800 relative&quot;&gt;&#10;            {getSectionQuestions('myth').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('myth', getSectionQuestions('myth'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-600 dark:text-rose-300&quot;&gt;Mito&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-rose-800 dark:text-rose-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.myth}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 relative overflow-hidden&quot;&gt;&#10;            {getSectionQuestions('reality').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('reality', getSectionQuestions('reality'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;div className=&quot;absolute inset-0 pointer-events-none bg-[radial-gradient(circle_at_80%_20%,rgba(16,185,129,0.15),transparent_60%)]&quot;/&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-600 dark:text-emerald-300&quot;&gt;Realtà&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-emerald-800 dark:text-emerald-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.reality}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.evidence &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 relative&quot;&gt;&#10;            {getSectionQuestions('evidence').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('evidence', getSectionQuestions('evidence'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Evidenze&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.evidence}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.why_it_matters &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-violet-500/10 to-fuchsia-500/10 border border-indigo-300/30 dark:border-indigo-300/20 relative&quot;&gt;&#10;            {getSectionQuestions('why_it_matters').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('why_it_matters', getSectionQuestions('why_it_matters'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Perché conta&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 leading-relaxed whitespace-pre-wrap&quot;&gt;{content.why_it_matters}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderFactCard = (content: any) =&gt; {&#10;    const facts: string[] = Array.isArray(content.facts) ? content.facts : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-5&quot;&gt;&#10;        {content.hook &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-br from-indigo-600 to-violet-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-semibold tracking-wide uppercase opacity-90&quot;&gt;Dato Chiave&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-lg leading-snug font-bold whitespace-pre-wrap&quot;&gt;{content.hook}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {facts.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;grid gap-3&quot;&gt;&#10;            {facts.map((f, i) =&gt; (&#10;              &lt;div key={i} className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex&quot;&gt;&#10;                &lt;div className=&quot;mr-3 mt-0.5 text-indigo-500 font-semibold text-xs&quot;&gt;FACT {i+1}&lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{f}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.implication &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-amber-700 dark:text-amber-300&quot;&gt;Implicazione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-amber-900 dark:text-amber-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.implication}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.action &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Azione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm font-medium text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.action}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderProsCons = (content: any) =&gt; {&#10;    const pros: string[] = Array.isArray(content.pros) ? content.pros : [];&#10;    const cons: string[] = Array.isArray(content.cons) ? content.cons : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.scenario &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Scenario&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.scenario}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Pro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-emerald-900 dark:text-emerald-100&quot;&gt;&#10;              {pros.map((p,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-emerald-500 font-semibold&quot;&gt;+&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{p}&lt;/span&gt;&lt;/li&gt;))}&#10;              {pros.length===0 &amp;&amp; &lt;li className=&quot;text-emerald-700/70 dark:text-emerald-300/60 italic&quot;&gt;Nessun pro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Contro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-rose-900 dark:text-rose-100&quot;&gt;&#10;              {cons.map((c,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-rose-500 font-semibold&quot;&gt;-&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{c}&lt;/span&gt;&lt;/li&gt;))}&#10;              {cons.length===0 &amp;&amp; &lt;li className=&quot;text-rose-700/70 dark:text-rose-300/60 italic&quot;&gt;Nessun contro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.advice &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-sky-500/10 to-emerald-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Sintesi / Consiglio&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.advice}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderQuickExplainer = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.analogy &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-indigo-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide opacity-80&quot;&gt;Analogia Guida&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-lg font-bold leading-snug whitespace-pre-wrap&quot;&gt;{content.analogy}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.definition &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Definizione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.definition}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          {content.example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Esempio&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {content.anti_example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Non È Questo&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-rose-900 dark:text-rose-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.anti_example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        {content.takeaway &amp;&amp; (&#10;            &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10 border border-fuchsia-300/30 dark:border-fuchsia-300/20&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-fuchsia-600 dark:text-fuchsia-300&quot;&gt;Takeaway&lt;/p&gt;&#10;              &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.takeaway}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return renderMiniThread(content);&#10;      case 'myth_vs_reality':&#10;        return renderMythVsReality(content);&#10;      case 'fact_card':&#10;        return renderFactCard(content);&#10;      case 'pros_cons':&#10;        return renderProsCons(content);&#10;      case 'quick_explainer':&#10;        return renderQuickExplainer(content);&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  // --- fine rendering contenuti template ---&#10;&#10;  // Testo completo del saggio (nuovo: può essere in gem.content.description)&#10;  const fullDescription: string | undefined = (gem as any)?.content?.description;&#10;&#10;  // Utility: segmentazione in paragrafi leggibili (solo visualizzazione)&#10;  const buildParagraphs = (text?: string): string[] =&gt; {&#10;    if (!text) return [];&#10;    const normalized = text.replace(/\r\n?/g, '\n').trim();&#10;    // Se l'autore ha già usato paragrafi (doppie newline) rispetta quelli&#10;    const explicit = normalized.split(/\n{2,}/).map(p =&gt; p.trim()).filter(Boolean);&#10;    if (explicit.length &gt; 1) return explicit;&#10;    // Altrimenti suddividi per punto + spazio + Maiuscola (mantieni il punto)&#10;    const periodSplit = normalized&#10;      // comprime whitespace multiplo a singolo spazio per consistenza&#10;      .replace(/\n+/g, ' ')&#10;      .replace(/\s{2,}/g, ' ')&#10;      .split(/(?&lt;=\.)\s+(?=[A-ZÀ-ÖØ-Ý])/)&#10;      .map(s =&gt; s.trim())&#10;      .filter(Boolean);&#10;    if (periodSplit.length &gt; 1) return periodSplit;&#10;    // fallback: ritorna intero blocco&#10;    return [normalized];&#10;  };&#10;&#10;  const paragraphs = buildParagraphs(fullDescription);&#10;&#10;  // Calcolo tempo di lettura (200 wpm medio)&#10;  const readingTime = (() =&gt; {&#10;    if (!fullDescription) return null;&#10;    const words = fullDescription.trim().split(/\s+/).filter(Boolean).length;&#10;    const WPM = 200; // media adulti IT&#10;    const minutesFloat = words / WPM;&#10;    const minutes = Math.floor(minutesFloat);&#10;    const seconds = Math.round((minutesFloat - minutes) * 60);&#10;    const display = minutes &lt; 1 ? `${seconds &lt; 10 ? '~15s' : `${seconds}s`}` : `${minutes} min${minutes === 1 ? '' : ''}${seconds &gt;= 30 &amp;&amp; minutes &lt; 10 ? ' +' : ''}`;&#10;    return { words, minutes, seconds, display };&#10;  })();&#10;&#10;  useEffect(() =&gt; {&#10;    // Log JWT Firebase solo per admin quando si accede al dettaglio di una gemma&#10;    if (user?.role === 'admin') { // confronto stringa per evitare dipendenza aggiuntiva da enum&#10;      getIdToken()&#10;        .then(token =&gt; {&#10;          if (token) {&#10;            console.log('[ADMIN][JWT] Firebase ID Token:', token);&#10;          } else {&#10;            console.log('[ADMIN][JWT] Nessun token disponibile.');&#10;          }&#10;        })&#10;        .catch(err =&gt; console.warn('[ADMIN][JWT] Errore recupero token:', err));&#10;    }&#10;  }, [user?.role, gem.id]);&#10;&#10;  const refreshSessions = async () =&gt; {&#10;    if(!currentUserId) return;&#10;    setLoadingSessions(true);&#10;    try { const data = await fetchDeepTopicSessions(gem.id, currentUserId, 100); setDeepSessions(data); } catch(e){ console.warn('Err fetch sessions', e);} finally { setLoadingSessions(false);} };&#10;  useEffect(()=&gt;{ refreshSessions(); }, [currentUserId, gem.id]);&#10;  useEffect(()=&gt;{&#10;    const handler = () =&gt; refreshSessions();&#10;    window.addEventListener('curiow-chat-refresh-sessions', handler);&#10;    return () =&gt; window.removeEventListener('curiow-chat-refresh-sessions', handler);&#10;  }, [currentUserId, gem.id]);&#10;  useEffect(()=&gt;{&#10;    const handler = (ev: any) =&gt; { setCurrentChatSessionId(ev.detail?.sessionId || null); };&#10;    window.addEventListener('curiow-chat-current-session', handler);&#10;    return ()=&gt; window.removeEventListener('curiow-chat-current-session', handler);&#10;  },[]);&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={onBack}&#10;        /&gt;&#10;        &lt;article&gt;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                {/* Immagine prima */}&#10;                &lt;img ref={imgRef} src={gem.imageUrl} alt={gem.title} onLoad={handleImageLoad} className=&quot;w-full h-auto object-cover md:rounded-lg&quot; /&gt;&#10;                {/* Titolo sotto immagine (ancora) */}&#10;                &lt;h1 id=&quot;gem-title&quot; className=&quot;mt-4 text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={()=&gt; setShowShareBar(v=&gt;{const nv=!v; trackEvent('share_bar_toggle',{ open: nv, gem_id: gem.id }); return nv;})}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {navigator.share &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={handleNativeShare}&#10;                        className=&quot;hidden sm:inline-flex items-center space-x-1.5 text-slate-500 dark:text-slate-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-xs&quot;&#10;                      &gt;&#10;                        &lt;span&gt;Share rapido&lt;/span&gt;&#10;                      &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center animate-fade-in&quot;&gt;&#10;                    &lt;a href={facebookUrl} onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Facebook&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot; aria-label=&quot;Condividi su Facebook&quot;&gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={()=&gt;{handleCopyLink(); trackEvent('share',{channel:'instagram_copy', gem_id: gem.id});}} title=&quot;Instagram (copia link)&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot; aria-label=&quot;Condividi su Instagram (copia link)&quot;&gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a href={whatsappUrl} onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;WhatsApp&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot; aria-label=&quot;Condividi su WhatsApp&quot;&gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a href={emailUrl} onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id})} title=&quot;Email&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot; aria-label=&quot;Condividi via Email&quot;&gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={handleCopyLink} title=&quot;Copia link&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300 transition-colors&quot; aria-label=&quot;Copia link&quot;&gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Tabs Tips / Saggio */}&#10;                &lt;div className=&quot;mt-8 flex justify-end&quot;&gt;&#10;                  &lt;div className=&quot;inline-flex items-center gap-1 rounded-full bg-slate-100 dark:bg-slate-800 p-1 shadow-inner ring-1 ring-slate-200/60 dark:ring-slate-700/60&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('tips')}&#10;                      aria-pressed={activeTab==='tips'}&#10;                      title=&quot;Vista Tips (strutturata)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='tips' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;LightBulbIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='tips' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('saggio')}&#10;                      aria-pressed={activeTab==='saggio'}&#10;                      title=&quot;Vista Saggio (testo completo)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='saggio' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;BookOpenIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='saggio' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('approfondimenti')}&#10;                      aria-pressed={activeTab==='approfondimenti'}&#10;                      title=&quot;Vista Approfondimenti (sessioni)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='approfondimenti' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;MagnifyingGlassIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='approfondimenti' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;mt-6 relative&quot; style={{ height: contentHeight ? contentHeight : undefined }}&gt;&#10;                  {/* Pannello Tips */}&#10;                  &lt;div&#10;                    ref={tipsRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='tips' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {(() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                      &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription || ''}&lt;/p&gt;&#10;                    ); })()}&#10;                  &lt;/div&gt;&#10;                  {/* Pannello Saggio */}&#10;                  &lt;div&#10;                    ref={saggioRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='saggio' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {fullDescription ? (&#10;                      paragraphs.length &gt; 0 ? (&#10;                        &lt;div className=&quot;prose prose-slate dark:prose-invert max-w-none&quot;&gt;&#10;                          {readingTime &amp;&amp; (&#10;                            &lt;div className=&quot;mb-6 flex items-center text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400 gap-3&quot;&gt;&#10;                              &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 font-semibold&quot;&gt;⏱ {readingTime.display}&lt;/span&gt;&#10;                              &lt;span className=&quot;text-slate-400 dark:text-slate-500&quot;&gt;{readingTime.words} parole&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                          {paragraphs.map((p, i) =&gt; {&#10;                            const isKey = p.includes(':') || /—/.test(p);&#10;                            return (&#10;                              &lt;p&#10;                                key={i}&#10;                                className={`text-base md:text-lg leading-relaxed md:leading-loose tracking-[0.015em] text-slate-700 dark:text-slate-300 text-justify hyphens-auto break-words mb-5 last:mb-0 ${i===0 ? 'first-letter:text-4xl first-letter:font-semibold first-letter:float-left first-letter:mr-2 first-letter:mt-1 first-letter:leading-[0.9]' : ''} ${isKey ? 'border-l-2 border-indigo-300 dark:border-indigo-500 pl-3 bg-indigo-50/40 dark:bg-indigo-500/5 rounded-sm' : ''}`}&#10;                                style={{ hyphens: 'auto' }}&#10;                              &gt;&#10;                                {p}&#10;                              &lt;/p&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription}&lt;/p&gt;&#10;                      )&#10;                    ) : (&#10;                      &lt;p className=&quot;italic text-slate-500 dark:text-slate-400&quot;&gt;Nessun testo disponibile.&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                  {/* Pannello Approfondimenti */}&#10;                  &lt;div className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='approfondimenti' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-auto px-1 py-1`}&gt;&#10;                    {!isLoggedIn &amp;&amp; &lt;p className=&quot;text-sm text-slate-500 dark:text-slate-400&quot;&gt;Accedi per vedere le tue sessioni di approfondimento.&lt;/p&gt;}&#10;                    {isLoggedIn &amp;&amp; (&#10;                      &lt;div className=&quot;space-y-4&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                          &lt;h3 className=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Sessioni Approfondimenti&lt;/h3&gt;&#10;                          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;button onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-new-session', {&#10;                              detail: { questions: generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }})) }&#10;                            }))} className=&quot;px-2 py-1 text-xs rounded-md bg-indigo-600 text-white hover:bg-indigo-700&quot;&gt;Nuova&lt;/button&gt;&#10;                            &lt;button onClick={refreshSessions} className=&quot;px-2 py-1 text-xs rounded-md bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600&quot;&gt;Refresh&lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        {loadingSessions &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Caricamento sessioni...&lt;/p&gt;}&#10;                        {!loadingSessions &amp;&amp; deepSessions.length===0 &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Nessuna sessione ancora. Crea una nuova conversazione nella chat a destra.&lt;/p&gt;}&#10;                        &lt;ul className=&quot;divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md overflow-hidden&quot;&gt;&#10;                          {deepSessions.map(s =&gt; {&#10;                            const modified = (s as any).modifiedAt?.seconds ? new Date((s as any).modifiedAt.seconds*1000) : (s.modifiedAt instanceof Date ? s.modifiedAt : new Date());&#10;                            const titleRaw = (s as any).firstQuestion || 'Sessione';&#10;                            const title = titleRaw.length &gt; 80 ? titleRaw.slice(0,77)+'…' : titleRaw;&#10;                            const isActive = currentChatSessionId &amp;&amp; (currentChatSessionId === (s.sessionId||s.id));&#10;                            return (&#10;                              &lt;li key={s.id} className={`p-3 hover:bg-indigo-50 dark:hover:bg-slate-800 cursor-pointer flex items-start gap-3 group ${isActive ? 'bg-indigo-50 dark:bg-slate-800/60' : ''}`}&#10;                                  onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-use-session',{ detail:{ sessionId: s.sessionId||s.id }}))}&gt;&#10;                                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                  &lt;p className=&quot;text-xs font-medium text-slate-700 dark:text-slate-200 line-clamp-2&quot; title={titleRaw}&gt;{title}&lt;/p&gt;&#10;                                  &lt;p className=&quot;text-[10px] text-slate-500 dark:text-slate-400&quot;&gt;Aggiornata: {modified.toLocaleString()}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex flex-col items-end gap-2&quot;&gt;&#10;                                  &lt;button&#10;                                    onClick={(e)=&gt;{ e.stopPropagation(); if(window.confirm('Eliminare definitivamente questa chat?')) { deleteDeepTopicSession(s.sessionId||s.id, currentUserId! ).then(()=&gt;{ if(currentChatSessionId === (s.sessionId||s.id)) { window.dispatchEvent(new CustomEvent('curiow-chat-new-session',{ detail:{ questions: [] }})); } refreshSessions(); }); } }}&#10;                                    className=&quot;opacity-0 group-hover:opacity-100 transition text-red-500 hover:text-red-600 text-[10px] font-semibold&quot;&#10;                                  &gt;Elimina&lt;/button&gt;&#10;                                  &lt;SparklesIcon className=&quot;w-4 h-4 text-indigo-500&quot; /&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/li&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/ul&gt;&#10;                        &lt;p className=&quot;text-[10px] text-slate-400 dark:text-slate-500&quot;&gt;Le sessioni si aggiornano quando invii nuove domande.&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Domande generate */}&#10;                {false &amp;&amp; generatedQuestions.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mt-8&quot;&gt;{/* Blocco disattivato - duplicato */}&lt;/div&gt;&#10;                )}&#10;&#10;                {/* Domande Generali (prima delle fonti) */}&#10;                {false &amp;&amp; generalQuestions.length&gt;0 &amp;&amp; (&#10;                  &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6 relative space-y-4&quot;&gt;&#10;                    {/* Sezione disattivata: ora sidepanel dedicato */}&#10;                  &lt;/section&gt;&#10;                )}&#10;&#10;                {/* Fonti */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;      &lt;/div&gt;&#10;      &lt;SectionQuestionsChat&#10;        gemId={gem.id}&#10;        elementName=&quot;general&quot;&#10;        questions={generalQuestions.map(q=&gt;({...q, element:{ name: 'general', index:0, title: null, test: null }}))}&#10;        gemTitle={gem.title}&#10;        gemDescription={rawDescription || rawSummary || ''}&#10;        userId={currentUserId}&#10;      /&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon, LightBulbIcon, BookOpenIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon, MagnifyingGlassIcon, TrashIcon } from './icons';&#10;import { trackEvent, getIdToken } from '../services/firebase';&#10;import { usePageMeta } from '../hooks/usePageMeta';&#10;import Header from './Header';&#10;import { fetchGeneratedQuestionsByGem, fetchDeepTopicSessions, DeepTopicSession, deleteDeepTopicSession, getSessionTitle } from '../services/firestoreService';&#10;import AdminConfirmationModal from './admin/AdminConfirmationModal';&#10;import SectionQuestionsChat from './SectionQuestionsChat';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;  currentUserId?: string; // nuovo per sessioni approfondimenti&#10;}&#10;&#10;const UserQuestionItem: React.FC&lt;{ userQuestion: UserQuestion }&gt; = ({ userQuestion }) =&gt; (&#10;    &lt;div className=&quot;mt-4 p-4 bg-slate-100 dark:bg-slate-800 rounded-lg&quot;&gt;&#10;        &lt;p className=&quot;font-semibold text-sm text-slate-600 dark:text-slate-300&quot;&gt;Domanda: &lt;span className=&quot;font-normal&quot;&gt;{userQuestion.question}&lt;/span&gt;&lt;/p&gt;&#10;        &lt;div className=&quot;mt-2 text-sm text-slate-800 dark:text-slate-200&quot;&gt;&#10;            {userQuestion.isGenerating ? (&#10;                 &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4 animate-pulse text-indigo-400&quot; /&gt;&#10;                    &lt;span&gt;Generazione risposta...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{userQuestion.answer}&lt;/p&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels, currentUserId }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;  const [hasAutoScrolled, setHasAutoScrolled] = useState(false);&#10;  const imgRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;  // nuovo stato per tab&#10;  const [activeTab, setActiveTab] = useState&lt;'tips' | 'saggio' | 'approfondimenti'&gt;('tips');&#10;  // refs per animazione cross-fade&#10;  const tipsRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const saggioRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const [contentHeight, setContentHeight] = useState&lt;number&gt;(0);&#10;  const [showShareBar, setShowShareBar] = useState(false);&#10;  const [generatedQuestions, setGeneratedQuestions] = useState&lt;(any)[]&gt;([]);&#10;  const [deepSessions, setDeepSessions] = useState&lt;DeepTopicSession[]&gt;([]);&#10;  const [currentChatSessionId, setCurrentChatSessionId] = useState&lt;string | null&gt;(null);&#10;  const [loadingSessions, setLoadingSessions] = useState(false);&#10;  const [sessionTitles, setSessionTitles] = useState&lt;Record&lt;string,string&gt;&gt;({});&#10;  const [pendingSessionsRefresh, setPendingSessionsRefresh] = useState(false);&#10;  const [sessionsLoaded, setSessionsLoaded] = useState(false); // nuovo per evitare loop su 0 risultati&#10;  const [deleteModalOpen, setDeleteModalOpen] = useState(false);&#10;  const [sessionToDelete, setSessionToDelete] = useState&lt;DeepTopicSession | null&gt;(null);&#10;  // RIMOSSI stati vecchia chat generale&#10;  // const [generalChatOpen, setGeneralChatOpen] = useState(false);&#10;  // const [generalAutoQId, setGeneralAutoQId] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalAutoCustom, setGeneralAutoCustom] = useState&lt;string | undefined&gt;(undefined);&#10;  // const [generalCustomInput, setGeneralCustomInput] = useState('');&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const rawSummary: string = (gem as any)?.content?.summary || '';&#10;  const rawDescription: string = (gem as any)?.content?.description || '';&#10;  const baseText = rawSummary || rawDescription;&#10;  const descriptionSnippet = baseText ? baseText.replace(/\s+/g,' ').slice(0,180) : 'Gemme di conoscenza su Curiow.';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;&#10;  usePageMeta({&#10;    title: `${gem.title} | Curiow`,&#10;    description: descriptionSnippet,&#10;    image: gem.imageUrl,&#10;    url: currentUrl,&#10;    type: 'article'&#10;  });&#10;&#10;  const handleCopyLink = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(currentUrl);&#10;    } catch {&#10;      const tmp = document.createElement('input');&#10;      tmp.value = currentUrl; document.body.appendChild(tmp); tmp.select(); document.execCommand('copy'); document.body.removeChild(tmp);&#10;    }&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleNativeShare = async () =&gt; {&#10;    if (navigator.share) {&#10;      trackEvent('share_attempt', { channel: 'web_share', gem_id: gem.id });&#10;      try {&#10;        await navigator.share({ title: gem.title, text: shareText, url: currentUrl });&#10;        trackEvent('share', { channel: 'web_share', gem_id: gem.id });&#10;      } catch { /* annullato */ }&#10;    } else {&#10;      handleCopyLink();&#10;    }&#10;  };&#10;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;  // Instagram non ha share URL web: fallback copia link&#10;&#10;  // funzione misura altezza contenuto attivo&#10;  const measureActiveHeight = () =&gt; {&#10;    const el = activeTab === 'tips' ? tipsRef.current : saggioRef.current;&#10;    if (el) {&#10;      // usa scrollHeight per includere overflow&#10;      const h = el.scrollHeight;&#10;      setContentHeight(h);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    // misura dopo cambio tab / gem&#10;    requestAnimationFrame(() =&gt; measureActiveHeight());&#10;  }, [activeTab, gem.id]);&#10;&#10;  useEffect(() =&gt; {&#10;    // misura al resize per mantenere altezza coerente&#10;    const onResize = () =&gt; measureActiveHeight();&#10;    window.addEventListener('resize', onResize);&#10;    return () =&gt; window.removeEventListener('resize', onResize);&#10;  }, []);&#10;&#10;  // Funzione per scrollare il titolo allineandolo appena sotto l'header sticky&#10;  const scrollTitleIntoView = (smooth = false) =&gt; {&#10;    const titleEl = document.getElementById('gem-title');&#10;    if (!titleEl) return;&#10;    const headerEl = document.querySelector('header');&#10;    const headerHeight = headerEl ? (headerEl as HTMLElement).offsetHeight : 0;&#10;    const buffer = 8; // piccolo margine&#10;    const target = titleEl.getBoundingClientRect().top + window.scrollY - headerHeight - buffer;&#10;    window.scrollTo({ top: target &gt;= 0 ? target : 0, behavior: smooth ? 'smooth' : 'auto' });&#10;    setHasAutoScrolled(true);&#10;  };&#10;&#10;  // Scroll iniziale dopo mount/cambio gem (post layout)&#10;  useEffect(() =&gt; {&#10;    setHasAutoScrolled(false);&#10;    // Usa rAF per attendere layout, poi ulteriore timeout breve per carichi asincroni minimi&#10;    requestAnimationFrame(() =&gt; {&#10;      scrollTitleIntoView(false);&#10;      setTimeout(() =&gt; { if (!hasAutoScrolled) scrollTitleIntoView(false); }, 60);&#10;    });&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [gem.id]);&#10;&#10;  // Se l'immagine carica dopo e non abbiamo ancora auto-scrollato, riallinea&#10;  const handleImageLoad = () =&gt; {&#10;    if (!hasAutoScrolled) scrollTitleIntoView(false);&#10;  };&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  useEffect(()=&gt;{&#10;    let mounted = true;&#10;    fetchGeneratedQuestionsByGem(gem.id).then(qs=&gt;{ if(mounted){ setGeneratedQuestions(qs); } }).catch(e=&gt;console.error('Err fetch questions', e));&#10;    return ()=&gt;{ mounted=false; };&#10;  },[gem.id]);&#10;&#10;  // Funzioni domande per sezione&#10;  const getSectionQuestions = (section: string, stepIndex?: number) =&gt; {&#10;    return generatedQuestions.filter(q =&gt; q.section === section &amp;&amp; (section !== 'step' || q.stepIndex === stepIndex)).slice(0,3);&#10;  };&#10;  const generalQuestions = generatedQuestions.filter(q =&gt; q.section === 'general').slice(0,3);&#10;&#10;  const renderMiniThread = (content: any) =&gt; {&#10;    const steps = Array.isArray(content.steps) ? content.steps : [];&#10;    const openChat = (section: string, index: number | undefined, qs: any[]) =&gt; {&#10;      const enriched = qs.map(q =&gt; {&#10;        if (section === 'step' &amp;&amp; typeof index === 'number') {&#10;          const step = steps[index] || {};&#10;          return { ...q, element: { name: section, index, title: step.title || null, test: step.body || null } };&#10;        }&#10;        if (section === 'payoff') {&#10;          return { ...q, element: { name: section, title: 'Payoff', test: content.payoff || null } };&#10;        }&#10;        return { ...q, element: { name: section } };&#10;      });&#10;      // Aggiungi sempre le domande generali alle domande di sezione&#10;      const generalEnriched = generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }}));&#10;      const allQuestions = [...enriched, ...generalEnriched];&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-open', { detail: { questions: allQuestions } }));&#10;    };&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {steps.map((s: any, idx: number) =&gt; {&#10;            const qs = getSectionQuestions('step', idx);&#10;            return (&#10;              &lt;div key={idx} className=&quot;relative pl-10&quot;&gt;&#10;                &lt;div className=&quot;absolute left-0 top-0 flex flex-col items-center&quot;&gt;&#10;                  &lt;div className=&quot;w-8 h-8 rounded-full bg-indigo-600 text-white flex items-center justify-center text-sm font-semibold shadow&quot;&gt;{idx+1}&lt;/div&gt;&#10;                  {idx &lt; steps.length -1 &amp;&amp; &lt;div className=&quot;flex-1 w-px bg-gradient-to-b from-indigo-400 via-indigo-300 to-transparent mt-1&quot;/&gt;}&#10;                &lt;/div&gt;&#10;                {qs.length &gt; 0 &amp;&amp; (&#10;                  &lt;button&#10;                    onClick={() =&gt; openChat('step', idx, qs)}&#10;                    title=&quot;Domande / Approfondisci&quot;&#10;                    className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;                  &gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;/button&gt;&#10;                )}&#10;                &lt;h3 className=&quot;text-lg font-semibold text-slate-900 dark:text-white&quot;&gt;{s.title}&lt;/h3&gt;&#10;                &lt;p className=&quot;mt-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{s.body}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;        {content.payoff &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-emerald-500/10 via-emerald-500/5 to-indigo-500/10 border border-emerald-400/30 dark:border-emerald-400/20 relative&quot;&gt;&#10;            {getSectionQuestions('payoff').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('payoff', undefined, getSectionQuestions('payoff'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;div className=&quot;flex items-start&quot;&gt;&#10;              &lt;SparklesIcon className=&quot;w-6 h-6 text-emerald-500 mr-3 mt-0.5&quot;/&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-sm uppercase tracking-wide font-semibold text-emerald-600 dark:text-emerald-400&quot;&gt;Payoff&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1 font-medium text-slate-900 dark:text-slate-100 leading-relaxed&quot;&gt;{content.payoff}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderMythVsReality = (content: any) =&gt; {&#10;    const openChat = (section: string, qs: any[]) =&gt; {&#10;      const enriched = qs.map(q =&gt; {&#10;        switch(section){&#10;          case 'myth': return { ...q, element: { name: section, title: 'Mito', test: content.myth || null } };&#10;          case 'reality': return { ...q, element: { name: section, title: 'Realtà', test: content.reality || null } };&#10;          case 'evidence': return { ...q, element: { name: section, title: 'Evidenze', test: content.evidence || null } };&#10;          case 'why_it_matters': return { ...q, element: { name: section, title: 'Perché conta', test: content.why_it_matters || null } };&#10;          default: return { ...q, element: { name: section } };&#10;        }&#10;      });&#10;      // Aggiungi sempre le domande generali alle domande di sezione&#10;      const generalEnriched = generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }}));&#10;      const allQuestions = [...enriched, ...generalEnriched];&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-open', { detail: { questions: allQuestions } }));&#10;    };&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800 relative&quot;&gt;&#10;            {getSectionQuestions('myth').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('myth', getSectionQuestions('myth'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-600 dark:text-rose-300&quot;&gt;Mito&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-rose-800 dark:text-rose-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.myth}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 relative overflow-hidden&quot;&gt;&#10;            {getSectionQuestions('reality').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('reality', getSectionQuestions('reality'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;div className=&quot;absolute inset-0 pointer-events-none bg-[radial-gradient(circle_at_80%_20%,rgba(16,185,129,0.15),transparent_60%)]&quot;/&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-600 dark:text-emerald-300&quot;&gt;Realtà&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-emerald-800 dark:text-emerald-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.reality}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.evidence &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 relative&quot;&gt;&#10;            {getSectionQuestions('evidence').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('evidence', getSectionQuestions('evidence'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Evidenze&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.evidence}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.why_it_matters &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-violet-500/10 to-fuchsia-500/10 border border-indigo-300/30 dark:border-indigo-300/20 relative&quot;&gt;&#10;            {getSectionQuestions('why_it_matters').length &gt; 0 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; openChat('why_it_matters', getSectionQuestions('why_it_matters'))}&#10;                title=&quot;Domande / Approfondisci&quot;&#10;                className=&quot;absolute right-2 top-2 w-8 h-8 rounded-full flex items-center justify-center bg-indigo-600/90 hover:bg-indigo-600 text-white shadow focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-400&quot;&#10;              &gt;&#10;                &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Perché conta&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 leading-relaxed whitespace-pre-wrap&quot;&gt;{content.why_it_matters}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderFactCard = (content: any) =&gt; {&#10;    const facts: string[] = Array.isArray(content.facts) ? content.facts : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-5&quot;&gt;&#10;        {content.hook &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-br from-indigo-600 to-violet-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-semibold tracking-wide uppercase opacity-90&quot;&gt;Dato Chiave&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-lg leading-snug font-bold whitespace-pre-wrap&quot;&gt;{content.hook}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {facts.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;grid gap-3&quot;&gt;&#10;            {facts.map((f, i) =&gt; (&#10;              &lt;div key={i} className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex&quot;&gt;&#10;                &lt;div className=&quot;mr-3 mt-0.5 text-indigo-500 font-semibold text-xs&quot;&gt;FACT {i+1}&lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{f}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.implication &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-amber-700 dark:text-amber-300&quot;&gt;Implicazione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-amber-900 dark:text-amber-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.implication}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.action &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Azione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm font-medium text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.action}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderProsCons = (content: any) =&gt; {&#10;    const pros: string[] = Array.isArray(content.pros) ? content.pros : [];&#10;    const cons: string[] = Array.isArray(content.cons) ? content.cons : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.scenario &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Scenario&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.scenario}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Pro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-emerald-900 dark:text-emerald-100&quot;&gt;&#10;              {pros.map((p,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-emerald-500 font-semibold&quot;&gt;+&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{p}&lt;/span&gt;&lt;/li&gt;))}&#10;              {pros.length===0 &amp;&amp; &lt;li className=&quot;text-emerald-700/70 dark:text-emerald-300/60 italic&quot;&gt;Nessun pro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Contro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-rose-900 dark:text-rose-100&quot;&gt;&#10;              {cons.map((c,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-rose-500 font-semibold&quot;&gt;-&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{c}&lt;/span&gt;&lt;/li&gt;))}&#10;              {cons.length===0 &amp;&amp; &lt;li className=&quot;text-rose-700/70 dark:text-rose-300/60 italic&quot;&gt;Nessun contro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.advice &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-sky-500/10 to-emerald-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Sintesi / Consiglio&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.advice}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderQuickExplainer = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.analogy &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-indigo-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide opacity-80&quot;&gt;Analogia Guida&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-lg font-bold leading-snug whitespace-pre-wrap&quot;&gt;{content.analogy}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.definition &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Definizione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.definition}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          {content.example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Esempio&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {content.anti_example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Non È Questo&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-rose-900 dark:text-rose-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.anti_example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        {content.takeaway &amp;&amp; (&#10;            &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10 border border-fuchsia-300/30 dark:border-fuchsia-300/20&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-fuchsia-600 dark:text-fuchsia-300&quot;&gt;Takeaway&lt;/p&gt;&#10;              &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.takeaway}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return renderMiniThread(content);&#10;      case 'myth_vs_reality':&#10;        return renderMythVsReality(content);&#10;      case 'fact_card':&#10;        return renderFactCard(content);&#10;      case 'pros_cons':&#10;        return renderProsCons(content);&#10;      case 'quick_explainer':&#10;        return renderQuickExplainer(content);&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  // --- fine rendering contenuti template ---&#10;&#10;  // Testo completo del saggio (nuovo: può essere in gem.content.description)&#10;  const fullDescription: string | undefined = (gem as any)?.content?.description;&#10;&#10;  // Utility: segmentazione in paragrafi leggibili (solo visualizzazione)&#10;  const buildParagraphs = (text?: string): string[] =&gt; {&#10;    if (!text) return [];&#10;    const normalized = text.replace(/\r\n?/g, '\n').trim();&#10;    // Se l'autore ha già usato paragrafi (doppie newline) rispetta quelli&#10;    const explicit = normalized.split(/\n{2,}/).map(p =&gt; p.trim()).filter(Boolean);&#10;    if (explicit.length &gt; 1) return explicit;&#10;    // Altrimenti suddividi per punto + spazio + Maiuscola (mantieni il punto)&#10;    const periodSplit = normalized&#10;      // comprime whitespace multiplo a singolo spazio per consistenza&#10;      .replace(/\n+/g, ' ')&#10;      .replace(/\s{2,}/g, ' ')&#10;      .split(/(?&lt;=\.)\s+(?=[A-ZÀ-ÖØ-Ý])/)&#10;      .map(s =&gt; s.trim())&#10;      .filter(Boolean);&#10;    if (periodSplit.length &gt; 1) return periodSplit;&#10;    // fallback: ritorna intero blocco&#10;    return [normalized];&#10;  };&#10;&#10;  const paragraphs = buildParagraphs(fullDescription);&#10;&#10;  // Calcolo tempo di lettura (200 wpm medio)&#10;  const readingTime = (() =&gt; {&#10;    if (!fullDescription) return null;&#10;    const words = fullDescription.trim().split(/\s+/).filter(Boolean).length;&#10;    const WPM = 200; // media adulti IT&#10;    const minutesFloat = words / WPM;&#10;    const minutes = Math.floor(minutesFloat);&#10;    const seconds = Math.round((minutesFloat - minutes) * 60);&#10;    const display = minutes &lt; 1 ? `${seconds &lt; 10 ? '~15s' : `${seconds}s`}` : `${minutes} min${minutes === 1 ? '' : ''}${seconds &gt;= 30 &amp;&amp; minutes &lt; 10 ? ' +' : ''}`;&#10;    return { words, minutes, seconds, display };&#10;  })();&#10;&#10;  useEffect(() =&gt; {&#10;    // Log JWT Firebase solo per admin quando si accede al dettaglio di una gemma&#10;    if (user?.role === 'admin') { // confronto stringa per evitare dipendenza aggiuntiva da enum&#10;      getIdToken()&#10;        .then(token =&gt; {&#10;          if (token) {&#10;            console.log('[ADMIN][JWT] Firebase ID Token:', token);&#10;          } else {&#10;            console.log('[ADMIN][JWT] Nessun token disponibile.');&#10;          }&#10;        })&#10;        .catch(err =&gt; console.warn('[ADMIN][JWT] Errore recupero token:', err));&#10;    }&#10;  }, [user?.role, gem.id]);&#10;&#10;  const refreshSessions = async () =&gt; {&#10;    if(!currentUserId) return;&#10;    setLoadingSessions(true);&#10;    try {&#10;      const data = await fetchDeepTopicSessions(gem.id, currentUserId, 100);&#10;      setDeepSessions(data);&#10;      const entries = await Promise.all(&#10;        data.map(async s =&gt; {&#10;          try { const title = await getSessionTitle(s.sessionId || s.id, currentUserId, gem.id); return [s.sessionId || s.id, title] as [string,string]; } catch { return [s.sessionId || s.id, 'Sessione']; }&#10;        })&#10;      );&#10;      setSessionTitles(prev =&gt; ({ ...prev, ...Object.fromEntries(entries) }));&#10;    } catch(e){ console.warn('Err fetch sessions', e);} finally { setLoadingSessions(false); setSessionsLoaded(true); }&#10;  }&#10;  useEffect(()=&gt;{&#10;    const handler = () =&gt; {&#10;      if (activeTab === 'approfondimenti') refreshSessions(); else setPendingSessionsRefresh(true);&#10;    };&#10;    window.addEventListener('curiow-chat-refresh-sessions', handler);&#10;    return () =&gt; window.removeEventListener('curiow-chat-refresh-sessions', handler);&#10;  }, [currentUserId, gem.id, activeTab]);&#10;  useEffect(()=&gt;{&#10;    if (activeTab === 'approfondimenti') {&#10;      if (!sessionsLoaded &amp;&amp; !loadingSessions) {&#10;        refreshSessions();&#10;      } else if (pendingSessionsRefresh &amp;&amp; !loadingSessions) {&#10;        setPendingSessionsRefresh(false);&#10;        refreshSessions();&#10;      }&#10;    }&#10;  }, [activeTab, deepSessions.length, loadingSessions, pendingSessionsRefresh, currentUserId, gem.id, sessionsLoaded]);&#10;  useEffect(()=&gt;{&#10;    const handler = (ev: any) =&gt; { setCurrentChatSessionId(ev.detail?.sessionId || null); };&#10;    window.addEventListener('curiow-chat-current-session', handler);&#10;    return ()=&gt; window.removeEventListener('curiow-chat-current-session', handler);&#10;  },[]);&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={onBack}&#10;        /&gt;&#10;        &lt;article&gt;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                {/* Immagine prima */}&#10;                &lt;img ref={imgRef} src={gem.imageUrl} alt={gem.title} onLoad={handleImageLoad} className=&quot;w-full h-auto object-cover md:rounded-lg&quot; /&gt;&#10;                {/* Titolo sotto immagine (ancora) */}&#10;                &lt;h1 id=&quot;gem-title&quot; className=&quot;mt-4 text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={()=&gt; setShowShareBar(v=&gt;{const nv=!v; trackEvent('share_bar_toggle',{ open: nv, gem_id: gem.id }); return nv;})}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {navigator.share &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={handleNativeShare}&#10;                        className=&quot;hidden sm:inline-flex items-center space-x-1.5 text-slate-500 dark:text-slate-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-xs&quot;&#10;                      &gt;&#10;                        &lt;span&gt;Share rapido&lt;/span&gt;&#10;                      &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center animate-fade-in&quot;&gt;&#10;                    &lt;a href={facebookUrl} onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Facebook&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot; aria-label=&quot;Condividi su Facebook&quot;&gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={()=&gt;{handleCopyLink(); trackEvent('share',{channel:'instagram_copy', gem_id: gem.id});}} title=&quot;Instagram (copia link)&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot; aria-label=&quot;Condividi su Instagram (copia link)&quot;&gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a href={whatsappUrl} onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;WhatsApp&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot; aria-label=&quot;Condividi su WhatsApp&quot;&gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a href={emailUrl} onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id})} title=&quot;Email&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot; aria-label=&quot;Condividi via Email&quot;&gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={handleCopyLink} title=&quot;Copia link&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300 transition-colors&quot; aria-label=&quot;Copia link&quot;&gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Tabs Tips / Saggio */}&#10;                &lt;div className=&quot;mt-8 flex justify-end&quot;&gt;&#10;                  &lt;div className=&quot;inline-flex items-center gap-1 rounded-full bg-slate-100 dark:bg-slate-800 p-1 shadow-inner ring-1 ring-slate-200/60 dark:ring-slate-700/60&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('tips')}&#10;                      aria-pressed={activeTab==='tips'}&#10;                      title=&quot;Vista Tips (strutturata)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='tips' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;LightBulbIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='tips' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('saggio')}&#10;                      aria-pressed={activeTab==='saggio'}&#10;                      title=&quot;Vista Saggio (testo completo)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='saggio' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;BookOpenIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='saggio' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('approfondimenti')}&#10;                      aria-pressed={activeTab==='approfondimenti'}&#10;                      title=&quot;Vista Approfondimenti (sessioni)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='approfondimenti' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;MagnifyingGlassIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='approfondimenti' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;mt-6 relative&quot; style={{ height: contentHeight ? contentHeight : undefined }}&gt;&#10;                  {/* Pannello Tips */}&#10;                  &lt;div&#10;                    ref={tipsRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='tips' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {(() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                      &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription || ''}&lt;/p&gt;&#10;                    ); })()}&#10;                  &lt;/div&gt;&#10;                  {/* Pannello Saggio */}&#10;                  &lt;div&#10;                    ref={saggioRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='saggio' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {fullDescription ? (&#10;                      paragraphs.length &gt; 0 ? (&#10;                        &lt;div className=&quot;prose prose-slate dark:prose-invert max-w-none&quot;&gt;&#10;                          {readingTime &amp;&amp; (&#10;                            &lt;div className=&quot;mb-6 flex items-center text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400 gap-3&quot;&gt;&#10;                              &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 font-semibold&quot;&gt;⏱ {readingTime.display}&lt;/span&gt;&#10;                              &lt;span className=&quot;text-slate-400 dark:text-slate-500&quot;&gt;{readingTime.words} parole&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                          {paragraphs.map((p, i) =&gt; {&#10;                            const isKey = p.includes(':') || /—/.test(p);&#10;                            return (&#10;                              &lt;p&#10;                                key={i}&#10;                                className={`text-base md:text-lg leading-relaxed md:leading-loose tracking-[0.015em] text-slate-700 dark:text-slate-300 text-justify hyphens-auto break-words mb-5 last:mb-0 ${i===0 ? 'first-letter:text-4xl first-letter:font-semibold first-letter:float-left first-letter:mr-2 first-letter:mt-1 first-letter:leading-[0.9]' : ''} ${isKey ? 'border-l-2 border-indigo-300 dark:border-indigo-500 pl-3 bg-indigo-50/40 dark:bg-indigo-500/5 rounded-sm' : ''}`}&#10;                                style={{ hyphens: 'auto' }}&#10;                              &gt;&#10;                                {p}&#10;                              &lt;/p&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription}&lt;/p&gt;&#10;                      )&#10;                    ) : (&#10;                      &lt;p className=&quot;italic text-slate-500 dark:text-slate-400&quot;&gt;Nessun testo disponibile.&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                  {/* Pannello Approfondimenti */}&#10;                  &lt;div className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='approfondimenti' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-auto px-1 py-1`}&gt;&#10;                    {!isLoggedIn &amp;&amp; &lt;p className=&quot;text-sm text-slate-500 dark:text-slate-400&quot;&gt;Accedi per vedere le tue sessioni di approfondimento.&lt;/p&gt;}&#10;                    {isLoggedIn &amp;&amp; (&#10;                      &lt;div className=&quot;space-y-4&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                          &lt;h3 className=&quot;text-sm font-semibold text-slate-700 dark:text-slate-200&quot;&gt;Sessioni Approfondimenti&lt;/h3&gt;&#10;                          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                            &lt;button onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-new-session', {&#10;                              detail: { questions: generalQuestions.map(q =&gt; ({...q, element: { name: 'general', title: null, test: null }})) }&#10;                            }))} className=&quot;px-2 py-1 text-xs rounded-md bg-indigo-600 text-white hover:bg-indigo-700&quot;&gt;Nuova&lt;/button&gt;&#10;                            &lt;button onClick={refreshSessions} className=&quot;px-2 py-1 text-xs rounded-md bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600&quot;&gt;Refresh&lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        {loadingSessions &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Caricamento sessioni...&lt;/p&gt;}&#10;                        {!loadingSessions &amp;&amp; deepSessions.length===0 &amp;&amp; sessionsLoaded &amp;&amp; &lt;p className=&quot;text-xs text-slate-500&quot;&gt;Non sono ancora presenti approfondimenti.&lt;/p&gt;}&#10;                        &lt;ul className=&quot;divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md overflow-hidden&quot;&gt;&#10;                          {deepSessions.map(s =&gt; {&#10;                            const modified = (s as any).modifiedAt?.seconds ? new Date((s as any).modifiedAt.seconds*1000) : (s.modifiedAt instanceof Date ? s.modifiedAt : new Date());&#10;                            const titleRaw = sessionTitles[s.sessionId||s.id] || (s as any).firstQuestion || 'Sessione';&#10;                            const title = titleRaw.length &gt; 80 ? titleRaw.slice(0,77)+'…' : titleRaw;&#10;                            const isActive = currentChatSessionId &amp;&amp; (currentChatSessionId === (s.sessionId||s.id));&#10;                            return (&#10;                              &lt;li key={s.id} className={`p-3 hover:bg-indigo-50 dark:hover:bg-slate-800 cursor-pointer flex items-start gap-3 group ${isActive ? 'bg-indigo-50 dark:bg-slate-800/60' : ''}`}&#10;                                  onClick={()=&gt;window.dispatchEvent(new CustomEvent('curiow-chat-use-session',{ detail:{ sessionId: s.sessionId||s.id }}))}&gt;&#10;                                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                  &lt;p className=&quot;text-xs font-medium text-slate-700 dark:text-slate-200 line-clamp-2&quot; title={titleRaw}&gt;{title}&lt;/p&gt;&#10;                                  &lt;p className=&quot;text-[10px] text-slate-500 dark:text-slate-400&quot;&gt;Aggiornata: {modified.toLocaleString()}&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex flex-col items-end gap-2&quot;&gt;&#10;                                  &lt;button&#10;                                    onClick={(e)=&gt;{ e.stopPropagation(); setSessionToDelete(s); setDeleteModalOpen(true); }}&#10;                                    className=&quot;opacity-0 group-hover:opacity-100 transition text-slate-500 hover:text-red-600&quot;&#10;                                    title=&quot;Elimina sessione&quot;&#10;                                  &gt;&#10;                                    &lt;TrashIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                                  &lt;/button&gt;&#10;                                  &lt;SparklesIcon className=&quot;w-4 h-4 text-indigo-500&quot; /&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/li&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/ul&gt;&#10;                        &lt;p className=&quot;text-[10px] text-slate-400 dark:text-slate-500&quot;&gt;Le sessioni si aggiornano quando invii nuove domande.&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Domande generate */}&#10;                {false &amp;&amp; generatedQuestions.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;mt-8&quot;&gt;{/* Blocco disattivato - duplicato */}&lt;/div&gt;&#10;                )}&#10;&#10;                {/* Domande Generali (prima delle fonti) */}&#10;                {false &amp;&amp; generalQuestions.length&gt;0 &amp;&amp; (&#10;                  &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6 relative space-y-4&quot;&gt;&#10;                    {/* Sezione disattivata: ora sidepanel dedicato */}&#10;                  &lt;/section&gt;&#10;                )}&#10;&#10;                {/* Fonti */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;      &lt;/div&gt;&#10;      &lt;SectionQuestionsChat&#10;        gemId={gem.id}&#10;        elementName=&quot;general&quot;&#10;        questions={generalQuestions.map(q=&gt;({...q, element:{ name: 'general', index:0, title: null, test: null }}))}&#10;        gemTitle={gem.title}&#10;        gemDescription={rawDescription || rawSummary || ''}&#10;        userId={currentUserId}&#10;      /&gt;&#10;      &lt;AdminConfirmationModal&#10;        isOpen={deleteModalOpen}&#10;        onClose={()=&gt;{ setDeleteModalOpen(false); setSessionToDelete(null); }}&#10;        onConfirm={()=&gt;{ if(sessionToDelete &amp;&amp; currentUserId){ deleteDeepTopicSession(sessionToDelete.sessionId||sessionToDelete.id, currentUserId).then(()=&gt;{ if(currentChatSessionId === (sessionToDelete.sessionId||sessionToDelete.id)) { window.dispatchEvent(new CustomEvent('curiow-chat-new-session',{ detail:{ questions: [] }})); } refreshSessions(); }); }}}&#10;        title=&quot;Elimina sessione&quot;&#10;        message=&quot;Sei sicuro di voler eliminare definitivamente questa sessione di approfondimento? L'operazione non è reversibile.&quot;&#10;        actionText=&quot;Elimina&quot;&#10;        actionType=&quot;danger&quot;&#10;      /&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SectionQuestionsChat.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SectionQuestionsChat.css" />
              <option name="originalContent" value=".curiow-section-questions-chat {&#10;  position: fixed;&#10;  bottom: 1rem;&#10;  right: 1rem;&#10;  z-index: 9999;&#10;  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif;&#10;}&#10;&#10;.curiow-section-questions-chat .curiow-trigger {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: .5rem;&#10;  background: linear-gradient(135deg,#6366f1,#8b5cf6);&#10;  color: #fff;&#10;  padding: .75rem 1rem;&#10;  border-radius: 999px;&#10;  cursor: pointer;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,.18);&#10;  font-weight: 600;&#10;  transition: transform .15s ease, box-shadow .2s ease, background .3s ease;&#10;}&#10;.curiow-section-questions-chat .curiow-trigger:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 16px rgba(0,0,0,.25);&#10;}&#10;&#10;/* Overlay */&#10;.curiow-overlay {&#10;  position: fixed;&#10;  inset: 0;&#10;  background: rgba(15,23,42,0.35);&#10;  backdrop-filter: blur(2px);&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  padding: 0;&#10;  z-index: 9998;&#10;}&#10;&#10;/* Chat Container */&#10;.curiow-chat-container {&#10;  background: #ffffff;&#10;  width: 380px;&#10;  max-width: 100%;&#10;  height: 100%;&#10;  max-height: 100vh;&#10;  display: flex;&#10;  flex-direction: column;&#10;  box-shadow: -4px 0 16px -2px rgba(0,0,0,.25);&#10;  border-left: 1px solid #e2e8f0;&#10;  animation: slideIn .28s cubic-bezier(.4,0,.2,1);&#10;  position: relative;&#10;}&#10;@media (max-width: 640px) {&#10;  .curiow-chat-container { width: 100%; }&#10;}&#10;@keyframes slideIn {&#10;  from { transform: translateX(20px); opacity: 0; }&#10;  to { transform: translateX(0); opacity: 1; }&#10;}&#10;&#10;.curiow-header {&#10;  padding: .9rem 1rem .75rem;&#10;  border-bottom: 1px solid #e2e8f0;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  background: linear-gradient(90deg,#f8fafc,#f1f5f9);&#10;}&#10;.curiow-title { font-size: .95rem; font-weight: 600; color:#1e293b; }&#10;.curiow-close {&#10;  background: none;&#10;  border: none;&#10;  font-size: 1.25rem;&#10;  line-height: 1;&#10;  cursor: pointer;&#10;  color: #64748b;&#10;  padding: .25rem .4rem;&#10;  border-radius: .5rem;&#10;  transition: background .15s ease, color .2s;&#10;}&#10;.curiow-close:hover { background:#e2e8f0; color:#334155; }&#10;&#10;.curiow-content { flex: 1; display:flex; flex-direction:column; overflow:hidden; }&#10;.curiow-messages { flex:1; overflow-y:auto; padding: 1rem .9rem 1rem 1rem; display:flex; flex-direction:column; gap:.9rem; }&#10;.curiow-messages::-webkit-scrollbar { width:6px; }&#10;.curiow-messages::-webkit-scrollbar-track { background: transparent; }&#10;.curiow-messages::-webkit-scrollbar-thumb { background:#cbd5e1; border-radius:3px; }&#10;&#10;.curiow-message { background:#f1f5f9; border-radius: .85rem; padding:.75rem .85rem; font-size:.85rem; line-height:1.35; color:#334155; position:relative; }&#10;.curiow-message.loading { opacity:.7; }&#10;.curiow-message-question { font-weight:600; margin-bottom:.45rem; color:#1e293b; }&#10;.curiow-message-answer { white-space:pre-wrap; font-weight:400; }&#10;.curiow-message-loading { font-style:italic; margin-top:.4rem; font-size:.75rem; color:#475569; }&#10;.curiow-message-error { margin-top:.4rem; font-size:.75rem; color:#dc2626; font-weight:600; }&#10;&#10;.curiow-followups { margin-top:.7rem; padding-top:.6rem; border-top:1px solid #e2e8f0; display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-followups-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; }&#10;.curiow-followup { font-size:.7rem; background:#ffffff; padding:.45rem .55rem; border-radius:.65rem; border:1px solid #e2e8f0; cursor:pointer; line-height:1.2; color:#334155; transition: background .15s, border-color .2s; }&#10;.curiow-followup:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;&#10;.curiow-input-container { display:flex; gap:.6rem; padding:.65rem .85rem .75rem; border-top:1px solid #e2e8f0; background:#ffffff; }&#10;.curiow-input { flex:1; border:1px solid #cbd5e1; border-radius: .75rem; padding:.6rem .8rem; font-size:.8rem; outline:none; transition:border-color .2s, box-shadow .2s; }&#10;.curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.25); }&#10;.curiow-send { background:linear-gradient(135deg,#6366f1,#8b5cf6); color:#fff; border:none; border-radius:.75rem; padding:.55rem .85rem; cursor:pointer; display:flex; align-items:center; justify-content:center; transition:filter .2s ease, transform .15s ease; }&#10;.curiow-send:hover { filter:brightness(1.08); transform:translateY(-2px); }&#10;.curiow-send-icon { width:18px; height:18px; stroke: currentColor; }&#10;.curiow-send:disabled { opacity:.45; cursor:not-allowed; transform:none; filter:none; }&#10;.curiow-send:disabled .curiow-send-icon { opacity:.8; }&#10;&#10;.curiow-initial-suggestions { padding: .4rem 1rem 1rem; display:flex; flex-direction:column; gap:1rem; overflow-y:auto; max-height:220px; }&#10;.curiow-suggestions-container { display:flex; flex-direction:column; gap:.55rem; }&#10;.curiow-suggestions-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; margin-bottom:.1rem; }&#10;.curiow-suggestion { display:flex; align-items:flex-start; gap:.55rem; background:#ffffff; border:1px solid #e2e8f0; padding:.55rem .65rem; border-radius:.8rem; cursor:pointer; transition: background .15s, border-color .2s; font-size:.75rem; line-height:1.2; color:#334155; }&#10;.curiow-suggestion:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;.curiow-suggestion-index { width:1.1rem; height:1.1rem; background:#6366f1; color:#fff; font-size:.6rem; display:flex; align-items:center; justify-content:center; border-radius:50%; font-weight:600; flex-shrink:0; margin-top:.1rem; }&#10;.curiow-suggestion-text { flex:1; }&#10;&#10;.curiow-top-suggestions { padding: .65rem 1rem .4rem; border-bottom:1px solid #e2e8f0; max-height: 40%; overflow-y:auto; display:flex; flex-direction:column; gap:.9rem; background:#ffffff; }&#10;.curiow-suggestions-group { display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-suggestions-group-title { font-size:.6rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; padding-left:.2rem; }&#10;&#10;/* Small helper state when closed (just button) */&#10;.curiow-section-questions-chat:not(.open) .curiow-overlay { display:none; }&#10;&#10;/* Dark mode (usa media prefers-color-scheme) */&#10;@media (prefers-color-scheme: dark) {&#10;  .curiow-chat-container { background:#0f172a; border-left-color:#1e293b; }&#10;  .curiow-header { background:linear-gradient(90deg,#0f172a,#1e293b); border-bottom-color:#1e293b; }&#10;  .curiow-title { color:#e2e8f0; }&#10;  .curiow-close { color:#94a3b8; }&#10;  .curiow-close:hover { background:#1e293b; color:#f1f5f9; }&#10;  .curiow-message { background:#1e293b; color:#cbd5e1; }&#10;  .curiow-message-question { color:#f1f5f9; }&#10;  .curiow-message-loading { color:#94a3b8; }&#10;  .curiow-followup { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-followup:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-input-container { background:#0f172a; border-top-color:#1e293b; }&#10;  .curiow-input { background:#0f172a; border-color:#334155; color:#e2e8f0; }&#10;  .curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.35); }&#10;  .curiow-suggestion { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-suggestion:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-initial-suggestions { scrollbar-color:#334155 transparent; }&#10;  .curiow-messages::-webkit-scrollbar-thumb { background:#334155; }&#10;  .curiow-top-suggestions { background:#0f172a; border-bottom-color:#1e293b; }&#10;  .curiow-suggestions-group-title { color:#94a3b8; }&#10;}&#10;" />
              <option name="updatedContent" value=".curiow-section-questions-chat {&#10;  position: fixed;&#10;  bottom: 1rem;&#10;  right: 1rem;&#10;  z-index: 9999;&#10;  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Arial, sans-serif;&#10;}&#10;&#10;.curiow-section-questions-chat .curiow-trigger {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: .5rem;&#10;  background: linear-gradient(135deg,#6366f1,#8b5cf6);&#10;  color: #fff;&#10;  padding: .75rem 1rem;&#10;  border-radius: 999px;&#10;  cursor: pointer;&#10;  box-shadow: 0 4px 12px rgba(0,0,0,.18);&#10;  font-weight: 600;&#10;  transition: transform .15s ease, box-shadow .2s ease, background .3s ease;&#10;}&#10;.curiow-section-questions-chat .curiow-trigger:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 6px 16px rgba(0,0,0,.25);&#10;}&#10;&#10;/* Overlay */&#10;.curiow-overlay {&#10;  position: fixed;&#10;  inset: 0;&#10;  background: rgba(15,23,42,0.35);&#10;  backdrop-filter: blur(2px);&#10;  display: flex;&#10;  justify-content: flex-end;&#10;  padding: 0;&#10;  z-index: 9998;&#10;}&#10;&#10;/* Chat Container */&#10;.curiow-chat-container {&#10;  background: #ffffff;&#10;  width: 380px;&#10;  max-width: 100%;&#10;  height: 100%;&#10;  max-height: 100vh;&#10;  display: flex;&#10;  flex-direction: column;&#10;  box-shadow: -4px 0 16px -2px rgba(0,0,0,.25);&#10;  border-left: 1px solid #e2e8f0;&#10;  animation: slideIn .28s cubic-bezier(.4,0,.2,1);&#10;  position: relative;&#10;}&#10;@media (max-width: 640px) {&#10;  .curiow-chat-container { width: 100%; }&#10;}&#10;@keyframes slideIn {&#10;  from { transform: translateX(20px); opacity: 0; }&#10;  to { transform: translateX(0); opacity: 1; }&#10;}&#10;&#10;.curiow-header {&#10;  padding: .9rem 1rem .75rem;&#10;  border-bottom: 1px solid #e2e8f0;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: space-between;&#10;  background: linear-gradient(90deg,#f8fafc,#f1f5f9);&#10;}&#10;.curiow-title { font-size: .95rem; font-weight: 600; color:#1e293b; }&#10;.curiow-close {&#10;  background: none;&#10;  border: none;&#10;  font-size: 1.25rem;&#10;  line-height: 1;&#10;  cursor: pointer;&#10;  color: #64748b;&#10;  padding: .25rem .4rem;&#10;  border-radius: .5rem;&#10;  transition: background .15s ease, color .2s;&#10;}&#10;.curiow-close:hover { background:#e2e8f0; color:#334155; }&#10;&#10;.curiow-content { flex: 1; display:flex; flex-direction:column; overflow:hidden; }&#10;.curiow-messages { flex:1; overflow-y:auto; padding: 1rem .9rem 1rem 1rem; display:flex; flex-direction:column; gap:.9rem; }&#10;.curiow-messages::-webkit-scrollbar { width:6px; }&#10;.curiow-messages::-webkit-scrollbar-track { background: transparent; }&#10;.curiow-messages::-webkit-scrollbar-thumb { background:#cbd5e1; border-radius:3px; }&#10;&#10;.curiow-message { background:#f1f5f9; border-radius: .85rem; padding:.75rem .85rem; font-size:.85rem; line-height:1.35; color:#334155; position:relative; }&#10;.curiow-message.loading { opacity:.7; }&#10;.curiow-message-question { font-weight:600; margin-bottom:.45rem; color:#1e293b; }&#10;.curiow-message-answer { white-space:pre-wrap; font-weight:400; }&#10;.curiow-message-loading { font-style:italic; margin-top:.4rem; font-size:.75rem; color:#475569; }&#10;.curiow-message-error { margin-top:.4rem; font-size:.75rem; color:#dc2626; font-weight:600; }&#10;&#10;.curiow-followups { margin-top:.7rem; padding-top:.6rem; border-top:1px solid #e2e8f0; display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-followups-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; }&#10;.curiow-followup { font-size:.7rem; background:#ffffff; padding:.45rem .55rem; border-radius:.65rem; border:1px solid #e2e8f0; cursor:pointer; line-height:1.2; color:#334155; transition: background .15s, border-color .2s; }&#10;.curiow-followup:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;&#10;.curiow-input-container { display:flex; gap:.6rem; padding:.65rem .85rem .75rem; border-top:1px solid #e2e8f0; background:#ffffff; }&#10;.curiow-input { flex:1; border:1px solid #cbd5e1; border-radius: .75rem; padding:.6rem .8rem; font-size:.8rem; outline:none; transition:border-color .2s, box-shadow .2s; }&#10;.curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.25); }&#10;.curiow-send { background:linear-gradient(135deg,#6366f1,#8b5cf6); color:#fff; border:none; border-radius:.75rem; padding:.55rem .85rem; cursor:pointer; display:flex; align-items:center; justify-content:center; transition:filter .2s ease, transform .15s ease; }&#10;.curiow-send:hover { filter:brightness(1.08); transform:translateY(-2px); }&#10;.curiow-send-icon { width:18px; height:18px; stroke: currentColor; }&#10;.curiow-send:disabled { opacity:.45; cursor:not-allowed; transform:none; filter:none; }&#10;.curiow-send:disabled .curiow-send-icon { opacity:.8; }&#10;&#10;.curiow-initial-suggestions { padding: .4rem 1rem 1rem; display:flex; flex-direction:column; gap:1rem; overflow-y:auto; max-height:220px; }&#10;.curiow-suggestions-container { display:flex; flex-direction:column; gap:.55rem; }&#10;.curiow-suggestions-title { font-size:.65rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; margin-bottom:.1rem; }&#10;.curiow-suggestion { display:flex; align-items:flex-start; gap:.55rem; background:#ffffff; border:1px solid #e2e8f0; padding:.55rem .65rem; border-radius:.8rem; cursor:pointer; transition: background .15s, border-color .2s; font-size:.75rem; line-height:1.2; color:#334155; }&#10;.curiow-suggestion:hover { background:#f1f5f9; border-color:#cbd5e1; }&#10;.curiow-suggestion-index { width:1.1rem; height:1.1rem; background:#6366f1; color:#fff; font-size:.6rem; display:flex; align-items:center; justify-content:center; border-radius:50%; font-weight:600; flex-shrink:0; margin-top:.1rem; }&#10;.curiow-suggestion-text { flex:1; }&#10;&#10;.curiow-top-suggestions { padding: .65rem 1rem .4rem; border-bottom:1px solid #e2e8f0; max-height: 40%; overflow-y:auto; display:flex; flex-direction:column; gap:.9rem; background:#ffffff; }&#10;.curiow-suggestions-group { display:flex; flex-direction:column; gap:.4rem; }&#10;.curiow-suggestions-group-title { font-size:.6rem; font-weight:700; text-transform:uppercase; letter-spacing:.05em; color:#64748b; padding-left:.2rem; }&#10;&#10;/* Small helper state when closed (just button) */&#10;.curiow-section-questions-chat:not(.open) .curiow-overlay { display:none; }&#10;&#10;/* Dark mode (usa media prefers-color-scheme) */&#10;@media (prefers-color-scheme: dark) {&#10;  .curiow-chat-container { background:#0f172a; border-left-color:#1e293b; }&#10;  .curiow-header { background:linear-gradient(90deg,#0f172a,#1e293b); border-bottom-color:#1e293b; }&#10;  .curiow-title { color:#e2e8f0; }&#10;  .curiow-close { color:#94a3b8; }&#10;  .curiow-close:hover { background:#1e293b; color:#f1f5f9; }&#10;  .curiow-message { background:#1e293b; color:#cbd5e1; }&#10;  .curiow-message-question { color:#f1f5f9; }&#10;  .curiow-message-loading { color:#94a3b8; }&#10;  .curiow-followup { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-followup:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-input-container { background:#0f172a; border-top-color:#1e293b; }&#10;  .curiow-input { background:#0f172a; border-color:#334155; color:#e2e8f0; }&#10;  .curiow-input:focus { border-color:#6366f1; box-shadow:0 0 0 2px rgba(99,102,241,0.35); }&#10;  .curiow-suggestion { background:#0f172a; border-color:#1e293b; color:#cbd5e1; }&#10;  .curiow-suggestion:hover { background:#1e293b; border-color:#334155; }&#10;  .curiow-initial-suggestions { scrollbar-color:#334155 transparent; }&#10;  .curiow-messages::-webkit-scrollbar-thumb { background:#334155; }&#10;  .curiow-top-suggestions { background:#0f172a; border-bottom-color:#1e293b; }&#10;  .curiow-suggestions-group-title { color:#94a3b8; }&#10;}&#10;&#10;.curiow-header-left { display:flex; align-items:center; gap:.55rem; min-width:0; }&#10;.curiow-gem-thumb { width:32px; height:32px; object-fit:cover; border-radius:8px; flex-shrink:0; box-shadow:0 0 0 1px rgba(0,0,0,0.05), 0 2px 4px -1px rgba(0,0,0,0.15); }&#10;@media (min-width: 640px) { .curiow-gem-thumb { display:none; } }&#10;@media (prefers-color-scheme: dark) {&#10;  .curiow-gem-thumb { box-shadow:0 0 0 1px rgba(255,255,255,0.08), 0 2px 4px -1px rgba(0,0,0,0.6); }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SectionQuestionsChat.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SectionQuestionsChat.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { callCuriowApi } from '../services/apiService';&#10;import { SparklesIcon } from './icons';&#10;import { PaperAirplaneIcon } from './icons';&#10;import { createDeepTopicSession, touchDeepTopicSession, fetchDeepTopicHistory } from '../services/firestoreService';&#10;import './SectionQuestionsChat.css'; // aggiunto&#10;&#10;export interface SectionQuestionData {&#10;  id: string;&#10;  testo: string;&#10;  tipologia?: string;&#10;  element?: { name: string; index?: number; title?: string|null; test?: string|null }; // arricchito con title/test&#10;}&#10;&#10;interface SectionQuestionsChatProps {&#10;  gemId: string;&#10;  elementName: string; // 'general'&#10;  questions: SectionQuestionData[];&#10;  autoQuestionId?: string;&#10;  autoCustomQuestionText?: string;&#10;  hideTrigger?: boolean;&#10;  gemTitle?: string;&#10;  gemDescription?: string; // nuovo: per body description&#10;  userId?: string; // nuovo per creare sessione su Firestore&#10;}&#10;&#10;interface ChatMessage { id: string; question: string; answer?: string; loading: boolean; error?: string; origin: 'suggested' | 'custom'; element?: { name: string; index?: number; title?: string|null; test?: string|null }; followUps?: string[]; historyId?: string; createdAt?: Date; }&#10;&#10;// Utility: sessionId giornaliero persistente&#10;const getDailySessionId = (): string =&gt; {&#10;  if (typeof window === 'undefined') return 'session-server';&#10;  const todayKey = new Date().toISOString().slice(0,10); // YYYY-MM-DD&#10;  const storageKey = 'curiowChatSession:' + todayKey;&#10;  let sid = localStorage.getItem(storageKey);&#10;  if (!sid) {&#10;    sid = (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)) + '-d';&#10;    localStorage.setItem(storageKey, sid);&#10;  }&#10;  return sid;&#10;};&#10;&#10;const SectionQuestionsChat: React.FC&lt;SectionQuestionsChatProps&gt; = ({&#10;  gemId,&#10;  elementName,&#10;  questions,&#10;  autoQuestionId,&#10;  autoCustomQuestionText,&#10;  hideTrigger,&#10;  gemTitle,&#10;  gemDescription,&#10;  userId&#10;}) =&gt; {&#10;  const [open, setOpen] = useState(false);&#10;  const [messages, setMessages] = useState&lt;ChatMessage[]&gt;([]);&#10;  const [customInput, setCustomInput] = useState('');&#10;  const [dynamicSuggestions, setDynamicSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [baseSuggestions, setBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [sectionBaseSuggestions, setSectionBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [hideInitialSuggestions, setHideInitialSuggestions] = useState(false);&#10;  const [sessionCreated, setSessionCreated] = useState(false);&#10;  const [firstQuestionSet, setFirstQuestionSet] = useState(false);&#10;  const [hasExistingHistory, setHasExistingHistory] = useState(false);&#10;  const messagesEndRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const autoFiredRef = useRef&lt;string | null&gt;(null);&#10;  const sessionIdRef = useRef&lt;string&gt;('');&#10;  const messagesRef = useRef&lt;ChatMessage[]&gt;([]);&#10;&#10;  useEffect(() =&gt; { messagesRef.current = messages; }, [messages]);&#10;&#10;  const ensureSession = async (forcedId?: string) =&gt; {&#10;    const makeId = () =&gt; (forcedId ? forcedId : (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)));&#10;    if (!sessionIdRef.current || forcedId) {&#10;      sessionIdRef.current = makeId();&#10;      console.log('[chat][ensureSession] sessionId set', sessionIdRef.current, { forcedId });&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId: sessionIdRef.current } }));&#10;    } else {&#10;      console.log('[chat][ensureSession] reuse existing sessionId', sessionIdRef.current);&#10;    }&#10;  };&#10;&#10;  const buildBody = (testo: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    return {&#10;      apitype: 'deep-question',&#10;      gemId,&#10;      description: gemDescription || '',&#10;      questionText: testo,&#10;      element: {&#10;        name: elementCtx?.name || elementName,&#10;        title: (elementCtx?.title ?? null) || null,&#10;        test: (elementCtx?.test ?? null) || null&#10;      },&#10;      sessionId: sessionIdRef.current&#10;    };&#10;  };&#10;&#10;  const callApi = async (id: string, testo: string, origin: 'suggested'|'custom', elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    try {&#10;      await ensureSession();&#10;      const body = buildBody(testo, elementCtx);&#10;      const resp = await callCuriowApi(body);&#10;      const answer = resp.response || resp.answer || resp.result || resp.text || JSON.stringify(resp);&#10;      const followUps: string[] | undefined = Array.isArray(resp.questions) ? resp.questions : undefined;&#10;      setMessages(m =&gt; m.map(msg =&gt; msg.id === id ? { ...msg, loading: false, answer, followUps } : msg));&#10;      touchDeepTopicSession(sessionIdRef.current).then(() =&gt; {&#10;        window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: sessionIdRef.current } }));&#10;      });&#10;      // RIMOSSO: nessun salvataggio history - viene gestito altrove&#10;    } catch (e: any) {&#10;      const msg = e.message || 'Errore';&#10;      setMessages(m =&gt; m.map(ms =&gt; ms.id === id ? { ...ms, loading: false, error: msg } : ms));&#10;    }&#10;  };&#10;&#10;  const ask = async (testo: string, origin: 'suggested'|'custom', presetId?: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    await ensureSession();&#10;    if (!sessionCreated &amp;&amp; userId) {&#10;      const sid = sessionIdRef.current;&#10;      console.log('[chat][ask] creating session if needed', sid);&#10;      if (sid) {&#10;        try {&#10;          const createdId = await createDeepTopicSession(sid, gemId, userId);&#10;          console.log('[chat][ask] session created', createdId);&#10;          setSessionCreated(true);&#10;          window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: createdId } }));&#10;        } catch(e) {&#10;          console.error('[chat][ask] error creating session', e);&#10;        }&#10;      }&#10;    }&#10;&#10;    const id = crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2);&#10;    const newMsg: ChatMessage = {&#10;      id,&#10;      question: testo,&#10;      loading: true,&#10;      origin,&#10;      element: elementCtx,&#10;      createdAt: new Date()&#10;    };&#10;&#10;    setMessages(m =&gt; [...m, newMsg]);&#10;    setHideInitialSuggestions(true);&#10;&#10;    // RIMOSSO: nessuna creazione di history entry - il salvataggio viene gestito altrove&#10;    await callApi(id, testo, origin, elementCtx);&#10;  };&#10;&#10;  const showFollowUp = (followUp: string) =&gt; {&#10;    ask(followUp, 'custom');&#10;  };&#10;&#10;  // Normalizza una entry di history esterna&#10;  const normalizeHistoryEntry = (h: any): ChatMessage =&gt; {&#10;    const answer = h.answer || h.response || undefined;&#10;    const followUps = Array.isArray(h.followUps) ? h.followUps : (Array.isArray(h.questions) ? h.questions : undefined);&#10;    const createdAt = h.createdAt instanceof Date ? h.createdAt : new Date(h.createdAt?.seconds ? h.createdAt.seconds * 1000 : Date.now());&#10;    return {&#10;      id: h.id,&#10;      question: h.question || h.prompt || '(domanda)',&#10;      answer,&#10;      followUps,&#10;      origin: 'custom',&#10;      loading: false,&#10;      element: h.element || undefined,&#10;      historyId: h.id,&#10;      createdAt&#10;    };&#10;  };&#10;&#10;  // Genera solo l'ID sessione quando cambia la gemma o l'utente&#10;  useEffect(() =&gt; {&#10;    sessionIdRef.current = '';&#10;    setSessionCreated(false);&#10;    setFirstQuestionSet(false);&#10;    if (userId) {&#10;      ensureSession();&#10;    }&#10;  }, [userId, gemId]);&#10;&#10;  // Scroll verso il fondo quando nuovi messaggi&#10;  useEffect(() =&gt; {&#10;    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });&#10;  }, [messages]);&#10;&#10;  // Ascolta eventi globali di apertura dal resto dell'app&#10;  useEffect(() =&gt; {&#10;    const handler = (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const sug: SectionQuestionData[] = (detail.questions || []).filter(q =&gt; q.element?.name !== 'general');&#10;      setDynamicSuggestions(sug);&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;    window.addEventListener('curiow-chat-open', handler as EventListener);&#10;    return () =&gt; window.removeEventListener('curiow-chat-open', handler as EventListener);&#10;  }, []);&#10;&#10;  // Aggiorna sessionId se cambia giorno&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(() =&gt; {&#10;      const current = sessionIdRef.current.split(':')[0];&#10;      const today = new Date().toISOString().slice(0,10);&#10;      if (!sessionIdRef.current.includes(today)) {&#10;        sessionIdRef.current = getDailySessionId();&#10;      }&#10;    }, 1000 * 60 * 60);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  // Listener per cambiare sessione&#10;  useEffect(() =&gt; {&#10;    const useSessionHandler = async (ev: Event) =&gt; {&#10;      const { sessionId } = (ev as CustomEvent).detail || {};&#10;      if (!sessionId) return;&#10;      sessionIdRef.current = sessionId;&#10;      setMessages([]);&#10;      setOpen(true);&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId } }));&#10;&#10;      if (userId) {&#10;        try {&#10;          const hist = await fetchDeepTopicHistory(sessionId, userId, gemId);&#10;          const ordered = hist.map(h =&gt; normalizeHistoryEntry(h));&#10;          setMessages(ordered);&#10;          setFirstQuestionSet(ordered.length &gt; 0);&#10;          setHasExistingHistory(ordered.length &gt; 0);&#10;        } catch(e) { /* ignore */ }&#10;      }&#10;    };&#10;&#10;    const newSessionHandler = async (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const questions: SectionQuestionData[] = detail.questions || [];&#10;      sessionIdRef.current = '';&#10;      await ensureSession();&#10;      setMessages([]);&#10;      if (questions.length &gt; 0 &amp;&amp; questions[0]?.element?.name === 'general') {&#10;        setBaseSuggestions(questions.filter(q =&gt; q.element?.name === 'general'));&#10;        setDynamicSuggestions([]);&#10;      } else {&#10;        setDynamicSuggestions(questions.filter(q =&gt; q.element?.name !== 'general'));&#10;      }&#10;      setHideInitialSuggestions(false);&#10;      setHasExistingHistory(false);&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;&#10;    window.addEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;    window.addEventListener('curiow-chat-new-session', newSessionHandler);&#10;    return () =&gt; {&#10;      window.removeEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;      window.removeEventListener('curiow-chat-new-session', newSessionHandler);&#10;    };&#10;  }, [userId, gemId]);&#10;&#10;  // Split tra generali e sezione dalle props originarie&#10;  useEffect(() =&gt; {&#10;    const generals = questions.filter(q =&gt; q.element?.name === 'general');&#10;    const sectionQs = questions.filter(q =&gt; q.element?.name !== 'general');&#10;    setBaseSuggestions(generals);&#10;    setSectionBaseSuggestions(sectionQs);&#10;  }, [questions]);&#10;&#10;  // Auto-fire domanda se specificata&#10;  useEffect(() =&gt; {&#10;    if (autoQuestionId &amp;&amp; autoQuestionId !== autoFiredRef.current) {&#10;      const q = questions.find(q =&gt; q.id === autoQuestionId);&#10;      if (q) {&#10;        console.log('[chat] auto-firing question', q.testo);&#10;        ask(q.testo, 'suggested', q.id, q.element);&#10;        autoFiredRef.current = autoQuestionId;&#10;        setOpen(true);&#10;      }&#10;    }&#10;  }, [autoQuestionId, questions]);&#10;&#10;  // Auto-fire custom text se specificato&#10;  useEffect(() =&gt; {&#10;    if (autoCustomQuestionText &amp;&amp; autoCustomQuestionText !== autoFiredRef.current) {&#10;      console.log('[chat] auto-firing custom text', autoCustomQuestionText);&#10;      ask(autoCustomQuestionText, 'custom');&#10;      autoFiredRef.current = autoCustomQuestionText;&#10;      setOpen(true);&#10;    }&#10;  }, [autoCustomQuestionText]);&#10;&#10;  // Carica history se la chat viene aperta e non abbiamo ancora messaggi ma esiste sessione&#10;  useEffect(() =&gt; {&#10;    const loadOnOpen = async () =&gt; {&#10;      if (open &amp;&amp; messages.length === 0 &amp;&amp; sessionIdRef.current &amp;&amp; userId) {&#10;        try {&#10;          const hist = await fetchDeepTopicHistory(sessionIdRef.current, userId, gemId);&#10;          if (hist.length &gt; 0) {&#10;            setMessages(hist.map(h =&gt; normalizeHistoryEntry(h)));&#10;            setHasExistingHistory(true);&#10;          }&#10;        } catch(e) { /* ignore */ }&#10;      }&#10;    };&#10;    loadOnOpen();&#10;  }, [open, messages.length, userId, gemId]);&#10;&#10;  // Renderizza i suggerimenti dinamici (esclusi i generali)&#10;  const renderDynamicSuggestions = () =&gt; {&#10;    if (dynamicSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Suggerite per questa sessione&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {dynamicSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di base (solo generali)&#10;  const renderBaseSuggestions = () =&gt; {&#10;    if (baseSuggestions.length === 0) return null;&#10;    if (hasExistingHistory) return null; // nasconde generali se c'è history preesistente&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Domande generali&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {baseSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di sezione (dalle props)&#10;  const renderSectionSuggestions = () =&gt; {&#10;    if (sectionBaseSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Domande per questa sezione&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {sectionBaseSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`curiow-section-questions-chat ${open ? 'open' : ''}`}&gt;&#10;      {!hideTrigger &amp;&amp; (&#10;        &lt;div className=&quot;curiow-trigger&quot; onClick={() =&gt; setOpen(true)}&gt;&#10;          &lt;SparklesIcon /&gt;&#10;          &lt;span&gt;Fai una domanda&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {open &amp;&amp; (&#10;        &lt;div className=&quot;curiow-overlay&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;          &lt;div className=&quot;curiow-chat-container&quot; onClick={e =&gt; e.stopPropagation()}&gt;&#10;            &lt;div className=&quot;curiow-header&quot;&gt;&#10;              &lt;div className=&quot;curiow-title&quot;&gt;{gemTitle || 'Chat'}&lt;/div&gt;&#10;              &lt;button className=&quot;curiow-close&quot; onClick={() =&gt; setOpen(false)}&gt;×&lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;curiow-content&quot;&gt;&#10;              {!hideInitialSuggestions &amp;&amp; (&#10;                &lt;div className=&quot;curiow-top-suggestions&quot;&gt;&#10;                  {renderDynamicSuggestions()}&#10;                  {renderSectionSuggestions()}&#10;                  {renderBaseSuggestions()}&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;curiow-messages&quot;&gt;&#10;                {messages.map(msg =&gt; (&#10;                  &lt;div key={msg.id} className={`curiow-message ${msg.loading ? 'loading' : ''}`}&gt;&#10;                    &lt;div className=&quot;curiow-message-question&quot;&gt;{msg.question}&lt;/div&gt;&#10;                    {msg.answer &amp;&amp; (&#10;                      &lt;div className=&quot;curiow-message-answer&quot;&gt;&#10;                        {msg.answer}&#10;                        {msg.followUps &amp;&amp; msg.followUps.length &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;curiow-followups&quot;&gt;&#10;                            &lt;div className=&quot;curiow-followups-title&quot;&gt;Domande correlate:&lt;/div&gt;&#10;                            {msg.followUps.map((fu, idx) =&gt; (&#10;                              &lt;div key={idx} className=&quot;curiow-followup&quot; onClick={() =&gt; showFollowUp(fu)}&gt;&#10;                                {fu}&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    {msg.loading &amp;&amp; &lt;div className=&quot;curiow-message-loading&quot;&gt;Pensando...&lt;/div&gt;}&#10;                    {msg.error &amp;&amp; &lt;div className=&quot;curiow-message-error&quot;&gt;{msg.error}&lt;/div&gt;}&#10;                  &lt;/div&gt;&#10;                ))}&#10;                &lt;div ref={messagesEndRef} /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;curiow-input-container&quot;&gt;&#10;                &lt;input&#10;                  id=&quot;curiow-chat-input&quot;&#10;                  className=&quot;curiow-input&quot;&#10;                  type=&quot;text&quot;&#10;                  placeholder=&quot;Fai una domanda...&quot;&#10;                  value={customInput}&#10;                  onChange={e =&gt; setCustomInput(e.target.value)}&#10;                  onKeyDown={e =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; customInput.trim() !== '') {&#10;                      ask(customInput.trim(), 'custom');&#10;                      setCustomInput('');&#10;                    }&#10;                  }}&#10;                /&gt;&#10;                &lt;button className=&quot;curiow-send&quot; type=&quot;button&quot; aria-label=&quot;Invia domanda&quot; disabled={customInput.trim()===''} onClick={() =&gt; {&#10;                  if (customInput.trim() !== '') {&#10;                    ask(customInput.trim(), 'custom');&#10;                    setCustomInput('');&#10;                  }&#10;                }}&gt;&#10;                  &lt;PaperAirplaneIcon className=&quot;curiow-send-icon&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SectionQuestionsChat;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { callCuriowApi } from '../services/apiService';&#10;import { SparklesIcon } from './icons';&#10;import { PaperAirplaneIcon } from './icons';&#10;import { createDeepTopicSession, touchDeepTopicSession, fetchDeepTopicHistory } from '../services/firestoreService';&#10;import './SectionQuestionsChat.css'; // aggiunto&#10;&#10;export interface SectionQuestionData {&#10;  id: string;&#10;  testo: string;&#10;  tipologia?: string;&#10;  element?: { name: string; index?: number; title?: string|null; test?: string|null }; // arricchito con title/test&#10;}&#10;&#10;interface SectionQuestionsChatProps {&#10;  gemId: string;&#10;  elementName: string; // 'general'&#10;  questions: SectionQuestionData[];&#10;  autoQuestionId?: string;&#10;  autoCustomQuestionText?: string;&#10;  hideTrigger?: boolean;&#10;  gemTitle?: string;&#10;  gemDescription?: string; // nuovo: per body description&#10;  userId?: string; // nuovo per creare sessione su Firestore&#10;  gemImageUrl?: string; // nuovo: thumbnail&#10;}&#10;&#10;interface ChatMessage { id: string; question: string; answer?: string; loading: boolean; error?: string; origin: 'suggested' | 'custom'; element?: { name: string; index?: number; title?: string|null; test?: string|null }; followUps?: string[]; historyId?: string; createdAt?: Date; }&#10;&#10;// Utility: sessionId giornaliero persistente&#10;const getDailySessionId = (): string =&gt; {&#10;  if (typeof window === 'undefined') return 'session-server';&#10;  const todayKey = new Date().toISOString().slice(0,10); // YYYY-MM-DD&#10;  const storageKey = 'curiowChatSession:' + todayKey;&#10;  let sid = localStorage.getItem(storageKey);&#10;  if (!sid) {&#10;    sid = (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)) + '-d';&#10;    localStorage.setItem(storageKey, sid);&#10;  }&#10;  return sid;&#10;};&#10;&#10;const SectionQuestionsChat: React.FC&lt;SectionQuestionsChatProps&gt; = ({&#10;  gemId,&#10;  elementName,&#10;  questions,&#10;  autoQuestionId,&#10;  autoCustomQuestionText,&#10;  hideTrigger,&#10;  gemTitle,&#10;  gemDescription,&#10;  userId,&#10;  gemImageUrl&#10;}) =&gt; {&#10;  const [open, setOpen] = useState(false);&#10;  const [messages, setMessages] = useState&lt;ChatMessage[]&gt;([]);&#10;  const [customInput, setCustomInput] = useState('');&#10;  const [dynamicSuggestions, setDynamicSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [baseSuggestions, setBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [sectionBaseSuggestions, setSectionBaseSuggestions] = useState&lt;SectionQuestionData[]&gt;([]);&#10;  const [hideInitialSuggestions, setHideInitialSuggestions] = useState(false);&#10;  const [sessionCreated, setSessionCreated] = useState(false);&#10;  const [firstQuestionSet, setFirstQuestionSet] = useState(false);&#10;  const [hasExistingHistory, setHasExistingHistory] = useState(false);&#10;  const messagesEndRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const autoFiredRef = useRef&lt;string | null&gt;(null);&#10;  const sessionIdRef = useRef&lt;string&gt;('');&#10;  const messagesRef = useRef&lt;ChatMessage[]&gt;([]);&#10;&#10;  useEffect(() =&gt; { messagesRef.current = messages; }, [messages]);&#10;&#10;  const ensureSession = async (forcedId?: string) =&gt; {&#10;    const makeId = () =&gt; (forcedId ? forcedId : (crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2)));&#10;    if (!sessionIdRef.current || forcedId) {&#10;      sessionIdRef.current = makeId();&#10;      console.log('[chat][ensureSession] sessionId set', sessionIdRef.current, { forcedId });&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId: sessionIdRef.current } }));&#10;    } else {&#10;      console.log('[chat][ensureSession] reuse existing sessionId', sessionIdRef.current);&#10;    }&#10;  };&#10;&#10;  const buildBody = (testo: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    return {&#10;      apitype: 'deep-question',&#10;      gemId,&#10;      description: gemDescription || '',&#10;      questionText: testo,&#10;      element: {&#10;        name: elementCtx?.name || elementName,&#10;        title: (elementCtx?.title ?? null) || null,&#10;        test: (elementCtx?.test ?? null) || null&#10;      },&#10;      sessionId: sessionIdRef.current&#10;    };&#10;  };&#10;&#10;  const callApi = async (id: string, testo: string, origin: 'suggested'|'custom', elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    try {&#10;      await ensureSession();&#10;      const body = buildBody(testo, elementCtx);&#10;      const resp = await callCuriowApi(body);&#10;      const answer = resp.response || resp.answer || resp.result || resp.text || JSON.stringify(resp);&#10;      const followUps: string[] | undefined = Array.isArray(resp.questions) ? resp.questions : undefined;&#10;      setMessages(m =&gt; m.map(msg =&gt; msg.id === id ? { ...msg, loading: false, answer, followUps } : msg));&#10;      touchDeepTopicSession(sessionIdRef.current).then(() =&gt; {&#10;        window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: sessionIdRef.current } }));&#10;      });&#10;      // RIMOSSO: nessun salvataggio history - viene gestito altrove&#10;    } catch (e: any) {&#10;      const msg = e.message || 'Errore';&#10;      setMessages(m =&gt; m.map(ms =&gt; ms.id === id ? { ...ms, loading: false, error: msg } : ms));&#10;    }&#10;  };&#10;&#10;  const ask = async (testo: string, origin: 'suggested'|'custom', presetId?: string, elementCtx?: { name: string; index?: number; title?: string|null; test?: string|null }) =&gt; {&#10;    await ensureSession();&#10;    if (!sessionCreated &amp;&amp; userId) {&#10;      const sid = sessionIdRef.current;&#10;      console.log('[chat][ask] creating session if needed', sid);&#10;      if (sid) {&#10;        try {&#10;          const createdId = await createDeepTopicSession(sid, gemId, userId);&#10;          console.log('[chat][ask] session created', createdId);&#10;          setSessionCreated(true);&#10;          window.dispatchEvent(new CustomEvent('curiow-chat-refresh-sessions', { detail: { sessionId: createdId } }));&#10;        } catch(e) {&#10;          console.error('[chat][ask] error creating session', e);&#10;        }&#10;      }&#10;    }&#10;&#10;    const id = crypto?.randomUUID ? crypto.randomUUID() : Math.random().toString(36).slice(2);&#10;    const newMsg: ChatMessage = {&#10;      id,&#10;      question: testo,&#10;      loading: true,&#10;      origin,&#10;      element: elementCtx,&#10;      createdAt: new Date()&#10;    };&#10;&#10;    setMessages(m =&gt; [...m, newMsg]);&#10;    setHideInitialSuggestions(true);&#10;&#10;    // RIMOSSO: nessuna creazione di history entry - il salvataggio viene gestito altrove&#10;    await callApi(id, testo, origin, elementCtx);&#10;  };&#10;&#10;  const showFollowUp = (followUp: string) =&gt; {&#10;    ask(followUp, 'custom');&#10;  };&#10;&#10;  // Normalizza una entry di history esterna&#10;  const normalizeHistoryEntry = (h: any): ChatMessage =&gt; {&#10;    const answer = h.answer || h.response || undefined;&#10;    const followUps = Array.isArray(h.followUps) ? h.followUps : (Array.isArray(h.questions) ? h.questions : undefined);&#10;    const createdAt = h.createdAt instanceof Date ? h.createdAt : new Date(h.createdAt?.seconds ? h.createdAt.seconds * 1000 : Date.now());&#10;    return {&#10;      id: h.id,&#10;      question: h.question || h.prompt || '(domanda)',&#10;      answer,&#10;      followUps,&#10;      origin: 'custom',&#10;      loading: false,&#10;      element: h.element || undefined,&#10;      historyId: h.id,&#10;      createdAt&#10;    };&#10;  };&#10;&#10;  // Genera solo l'ID sessione quando cambia la gemma o l'utente&#10;  useEffect(() =&gt; {&#10;    sessionIdRef.current = '';&#10;    setSessionCreated(false);&#10;    setFirstQuestionSet(false);&#10;    if (userId) {&#10;      ensureSession();&#10;    }&#10;  }, [userId, gemId]);&#10;&#10;  // Scroll verso il fondo quando nuovi messaggi&#10;  useEffect(() =&gt; {&#10;    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });&#10;  }, [messages]);&#10;&#10;  // Ascolta eventi globali di apertura dal resto dell'app&#10;  useEffect(() =&gt; {&#10;    const handler = (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const sug: SectionQuestionData[] = (detail.questions || []).filter(q =&gt; q.element?.name !== 'general');&#10;      setDynamicSuggestions(sug);&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;    window.addEventListener('curiow-chat-open', handler as EventListener);&#10;    return () =&gt; window.removeEventListener('curiow-chat-open', handler as EventListener);&#10;  }, []);&#10;&#10;  // Aggiorna sessionId se cambia giorno&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(() =&gt; {&#10;      const current = sessionIdRef.current.split(':')[0];&#10;      const today = new Date().toISOString().slice(0,10);&#10;      if (!sessionIdRef.current.includes(today)) {&#10;        sessionIdRef.current = getDailySessionId();&#10;      }&#10;    }, 1000 * 60 * 60);&#10;    return () =&gt; clearInterval(interval);&#10;  }, []);&#10;&#10;  // Listener per cambiare sessione&#10;  useEffect(() =&gt; {&#10;    const useSessionHandler = async (ev: Event) =&gt; {&#10;      const { sessionId } = (ev as CustomEvent).detail || {};&#10;      if (!sessionId) return;&#10;      sessionIdRef.current = sessionId;&#10;      setMessages([]);&#10;      setOpen(true);&#10;      window.dispatchEvent(new CustomEvent('curiow-chat-current-session', { detail: { sessionId } }));&#10;&#10;      if (userId) {&#10;        try {&#10;          const hist = await fetchDeepTopicHistory(sessionId, userId, gemId);&#10;          const ordered = hist.map(h =&gt; normalizeHistoryEntry(h));&#10;          setMessages(ordered);&#10;          setFirstQuestionSet(ordered.length &gt; 0);&#10;          setHasExistingHistory(ordered.length &gt; 0);&#10;        } catch(e) { /* ignore */ }&#10;      }&#10;    };&#10;&#10;    const newSessionHandler = async (ev: Event) =&gt; {&#10;      const detail = (ev as CustomEvent).detail || {};&#10;      const questions: SectionQuestionData[] = detail.questions || [];&#10;      sessionIdRef.current = '';&#10;      await ensureSession();&#10;      setMessages([]);&#10;      if (questions.length &gt; 0 &amp;&amp; questions[0]?.element?.name === 'general') {&#10;        setBaseSuggestions(questions.filter(q =&gt; q.element?.name === 'general'));&#10;        setDynamicSuggestions([]);&#10;      } else {&#10;        setDynamicSuggestions(questions.filter(q =&gt; q.element?.name !== 'general'));&#10;      }&#10;      setHideInitialSuggestions(false);&#10;      setHasExistingHistory(false);&#10;      setOpen(true);&#10;      setTimeout(() =&gt; {&#10;        const input = document.getElementById('curiow-chat-input');&#10;        (input as HTMLInputElement | null)?.focus();&#10;      }, 50);&#10;    };&#10;&#10;    window.addEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;    window.addEventListener('curiow-chat-new-session', newSessionHandler);&#10;    return () =&gt; {&#10;      window.removeEventListener('curiow-chat-use-session', useSessionHandler as EventListener);&#10;      window.removeEventListener('curiow-chat-new-session', newSessionHandler);&#10;    };&#10;  }, [userId, gemId]);&#10;&#10;  // Split tra generali e sezione dalle props originarie&#10;  useEffect(() =&gt; {&#10;    const generals = questions.filter(q =&gt; q.element?.name === 'general');&#10;    const sectionQs = questions.filter(q =&gt; q.element?.name !== 'general');&#10;    setBaseSuggestions(generals);&#10;    setSectionBaseSuggestions(sectionQs);&#10;  }, [questions]);&#10;&#10;  // Auto-fire domanda se specificata&#10;  useEffect(() =&gt; {&#10;    if (autoQuestionId &amp;&amp; autoQuestionId !== autoFiredRef.current) {&#10;      const q = questions.find(q =&gt; q.id === autoQuestionId);&#10;      if (q) {&#10;        console.log('[chat] auto-firing question', q.testo);&#10;        ask(q.testo, 'suggested', q.id, q.element);&#10;        autoFiredRef.current = autoQuestionId;&#10;        setOpen(true);&#10;      }&#10;    }&#10;  }, [autoQuestionId, questions]);&#10;&#10;  // Auto-fire custom text se specificato&#10;  useEffect(() =&gt; {&#10;    if (autoCustomQuestionText &amp;&amp; autoCustomQuestionText !== autoFiredRef.current) {&#10;      console.log('[chat] auto-firing custom text', autoCustomQuestionText);&#10;      ask(autoCustomQuestionText, 'custom');&#10;      autoFiredRef.current = autoCustomQuestionText;&#10;      setOpen(true);&#10;    }&#10;  }, [autoCustomQuestionText]);&#10;&#10;  // Carica history se la chat viene aperta e non abbiamo ancora messaggi ma esiste sessione&#10;  useEffect(() =&gt; {&#10;    const loadOnOpen = async () =&gt; {&#10;      if (open &amp;&amp; messages.length === 0 &amp;&amp; sessionIdRef.current &amp;&amp; userId) {&#10;        try {&#10;          const hist = await fetchDeepTopicHistory(sessionIdRef.current, userId, gemId);&#10;          if (hist.length &gt; 0) {&#10;            setMessages(hist.map(h =&gt; normalizeHistoryEntry(h)));&#10;            setHasExistingHistory(true);&#10;          }&#10;        } catch(e) { /* ignore */ }&#10;      }&#10;    };&#10;    loadOnOpen();&#10;  }, [open, messages.length, userId, gemId]);&#10;&#10;  // Renderizza i suggerimenti dinamici (esclusi i generali)&#10;  const renderDynamicSuggestions = () =&gt; {&#10;    if (dynamicSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Suggerite per questa sessione&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {dynamicSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di base (solo generali)&#10;  const renderBaseSuggestions = () =&gt; {&#10;    if (baseSuggestions.length === 0) return null;&#10;    if (hasExistingHistory) return null; // nasconde generali se c'è history preesistente&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Domande generali&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {baseSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Renderizza i suggerimenti di sezione (dalle props)&#10;  const renderSectionSuggestions = () =&gt; {&#10;    if (sectionBaseSuggestions.length === 0) return null;&#10;    return (&#10;      &lt;div className=&quot;curiow-suggestions-group&quot;&gt;&#10;        &lt;div className=&quot;curiow-suggestions-group-title&quot;&gt;Domande per questa sezione&lt;/div&gt;&#10;        &lt;div className=&quot;curiow-suggestions-container&quot;&gt;&#10;          {sectionBaseSuggestions.map((q, idx) =&gt; (&#10;            &lt;div key={q.id} className=&quot;curiow-suggestion&quot; onClick={() =&gt; ask(q.testo, 'suggested', q.id, q.element)}&gt;&#10;              &lt;div className=&quot;curiow-suggestion-index&quot;&gt;{idx + 1}&lt;/div&gt;&#10;              &lt;div className=&quot;curiow-suggestion-text&quot;&gt;{q.testo}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`curiow-section-questions-chat ${open ? 'open' : ''}`}&gt;&#10;      {!hideTrigger &amp;&amp; (&#10;        &lt;div className=&quot;curiow-trigger&quot; onClick={() =&gt; setOpen(true)}&gt;&#10;          &lt;SparklesIcon /&gt;&#10;          &lt;span&gt;Fai una domanda&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {open &amp;&amp; (&#10;        &lt;div className=&quot;curiow-overlay&quot; onClick={() =&gt; setOpen(false)}&gt;&#10;          &lt;div className=&quot;curiow-chat-container&quot; onClick={e =&gt; e.stopPropagation()}&gt;&#10;            &lt;div className=&quot;curiow-header&quot;&gt;&#10;              &lt;div className=&quot;curiow-header-left&quot;&gt;&#10;                {gemImageUrl &amp;&amp; (&#10;                  &lt;img src={gemImageUrl} alt={gemTitle || 'Gem'} className=&quot;curiow-gem-thumb&quot; loading=&quot;lazy&quot; /&gt;&#10;                )}&#10;                &lt;div className=&quot;curiow-title&quot;&gt;{gemTitle || 'Chat'}&lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;button className=&quot;curiow-close&quot; onClick={() =&gt; setOpen(false)}&gt;×&lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;curiow-content&quot;&gt;&#10;              {!hideInitialSuggestions &amp;&amp; (&#10;                &lt;div className=&quot;curiow-top-suggestions&quot;&gt;&#10;                  {renderDynamicSuggestions()}&#10;                  {renderSectionSuggestions()}&#10;                  {renderBaseSuggestions()}&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;curiow-messages&quot;&gt;&#10;                {messages.map(msg =&gt; (&#10;                  &lt;div key={msg.id} className={`curiow-message ${msg.loading ? 'loading' : ''}`}&gt;&#10;                    &lt;div className=&quot;curiow-message-question&quot;&gt;{msg.question}&lt;/div&gt;&#10;                    {msg.answer &amp;&amp; (&#10;                      &lt;div className=&quot;curiow-message-answer&quot;&gt;&#10;                        {msg.answer}&#10;                        {msg.followUps &amp;&amp; msg.followUps.length &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;curiow-followups&quot;&gt;&#10;                            &lt;div className=&quot;curiow-followups-title&quot;&gt;Domande correlate:&lt;/div&gt;&#10;                            {msg.followUps.map((fu, idx) =&gt; (&#10;                              &lt;div key={idx} className=&quot;curiow-followup&quot; onClick={() =&gt; showFollowUp(fu)}&gt;&#10;                                {fu}&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    )}&#10;                    {msg.loading &amp;&amp; &lt;div className=&quot;curiow-message-loading&quot;&gt;Pensando...&lt;/div&gt;}&#10;                    {msg.error &amp;&amp; &lt;div className=&quot;curiow-message-error&quot;&gt;{msg.error}&lt;/div&gt;}&#10;                  &lt;/div&gt;&#10;                ))}&#10;                &lt;div ref={messagesEndRef} /&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;curiow-input-container&quot;&gt;&#10;                &lt;input&#10;                  id=&quot;curiow-chat-input&quot;&#10;                  className=&quot;curiow-input&quot;&#10;                  type=&quot;text&quot;&#10;                  placeholder=&quot;Fai una domanda...&quot;&#10;                  value={customInput}&#10;                  onChange={e =&gt; setCustomInput(e.target.value)}&#10;                  onKeyDown={e =&gt; {&#10;                    if (e.key === 'Enter' &amp;&amp; customInput.trim() !== '') {&#10;                      ask(customInput.trim(), 'custom');&#10;                      setCustomInput('');&#10;                    }&#10;                  }}&#10;                /&gt;&#10;                &lt;button className=&quot;curiow-send&quot; type=&quot;button&quot; aria-label=&quot;Invia domanda&quot; disabled={customInput.trim()===''} onClick={() =&gt; {&#10;                  if (customInput.trim() !== '') {&#10;                    ask(customInput.trim(), 'custom');&#10;                    setCustomInput('');&#10;                  }&#10;                }}&gt;&#10;                  &lt;PaperAirplaneIcon className=&quot;curiow-send-icon&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default SectionQuestionsChat;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/icons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/icons.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronRightIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m8.25 4.5 7.5 7.5-7.5 7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const XMarkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18 18 6M6 6l12 12&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const LightBulbIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 2.25c-3.728 0-6.75 2.94-6.75 6.563 0 2.278 1.148 4.043 2.505 5.332.516.486.84 1.13.84 1.828v.432c0 .414.336.75.75.75h5.31c.414 0 .75-.336.75-.75v-.432c0-.698.324-1.342.84-1.828 1.357-1.29 2.505-3.054 2.505-5.332C18.75 5.19 15.728 2.25 12 2.25Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 18.75h4.5M10.5 21h3&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const BookOpenIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 6.75c-1.148-.766-2.51-1.5-4.125-1.5S4.898 5.984 3.75 6.75v10.5c1.148-.766 2.51-1.5 4.125-1.5S10.852 16.484 12 17.25m0-10.5c1.148-.766 2.51-1.5 4.125-1.5s2.977.734 4.125 1.5v10.5c-1.148-.766-2.51-1.5-4.125-1.5S13.148 16.484 12 17.25m0-10.5v10.5&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const FacebookIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M22 12.06C22 6.48 17.52 2 11.94 2S1.88 6.48 1.88 12.06c0 4.99 3.64 9.13 8.4 9.94v-7.03H7.9v-2.91h2.38v-2.22c0-2.35 1.4-3.65 3.55-3.65 1.03 0 2.1.18 2.1.18v2.31h-1.18c-1.16 0-1.52.72-1.52 1.46v1.92h2.59l-.41 2.91h-2.18V22c4.76-.81 8.4-4.95 8.4-9.94Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const InstagramIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M12 7.35A4.65 4.65 0 1 0 12 16.65 4.65 4.65 0 1 0 12 7.35Zm0 7.65A3 3 0 1 1 12 9a3 3 0 0 1 0 6Zm5.85-7.79a1.09 1.09 0 1 1 0-2.18 1.09 1.09 0 0 1 0 2.18ZM12 2.16c-2.52 0-2.84.01-3.84.06-1 .05-1.68.21-2.28.45a4.6 4.6 0 0 0-1.66 1.08 4.6 4.6 0 0 0-1.08 1.66c-.24.6-.4 1.28-.45 2.28-.05 1-.06 1.32-.06 3.84s.01 2.84.06 3.84c.05 1 .21 1.68.45 2.28.24.6.54 1.11 1.08 1.66.55.54 1.06.84 1.66 1.08.6.24 1.28.4 2.28.45 1 .05 1.32.06 3.84.06s2.84-.01 3.84-.06c1-.05 1.68-.21 2.28-.45a4.6 4.6 0 0 0 1.66-1.08 4.6 4.6 0 0 0 1.08-1.66c.24-.6.4-1.28.45-2.28.05-1 .06-1.32.06-3.84s-.01-2.84-.06-3.84c-.05-1-.21-1.68-.45-2.28a4.6 4.6 0 0 0-1.08-1.66 4.6 4.6 0 0 0-1.66-1.08c-.6-.24-1.28-.4-2.28-.45-1-.05-1.32-.06-3.84-.06Zm0 1.62c2.47 0 2.76.01 3.74.05.9.04 1.39.19 1.72.31.43.17.74.37 1.06.69.32.32.52.63.69 1.06.12.33.27.82.31 1.72.04.98.05 1.27.05 3.74s-.01 2.76-.05 3.74c-.04.9-.19 1.39-.31 1.72a2.98 2.98 0 0 1-.69 1.06c-.32.32-.63.52-1.06.69-.33.12-.82.27-1.72.31-.98.04-1.27.05-3.74.05s-2.76-.01-3.74-.05c-.9-.04-1.39-.19-1.72-.31a2.98 2.98 0 0 1-1.06-.69 2.98 2.98 0 0 1-.69-1.06c-.12-.33-.27-.82-.31-1.72-.04-.98-.05-1.27-.05-3.74s.01-2.76.05-3.74c.04-.9.19-1.39.31-1.72.17-.43.37-.74.69-1.06.32-.32.63-.52 1.06-.69.33-.12.82-.27 1.72-.31.98-.04 1.27-.05 3.74-.05Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const WhatsappIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M12.04 2a9.93 9.93 0 0 0-8.52 15.1L2 22l5.07-1.48A9.94 9.94 0 1 0 12.04 2Zm5.83 14.23c-.25.7-1.45 1.34-2.01 1.42-.52.08-1.18.11-1.9-.12-.44-.14-1-.33-1.72-.65-3.03-1.31-5-4.36-5.15-4.56-.15-.2-1.23-1.64-1.23-3.13 0-1.48.78-2.2 1.06-2.5.27-.29.59-.36.79-.36.2 0 .4 0 .57.01.18.01.43-.07.68.52.25.59.86 2.06.94 2.21.08.15.13.32.02.52-.11.2-.17.32-.31.49-.14.16-.3.37-.13.7.18.32.8 1.32 1.72 2.14 1.18 1.05 2.17 1.37 2.49 1.52.31.15.49.13.67-.08.18-.2.77-.9.97-1.21.2-.32.41-.27.68-.16.27.11 1.72.81 2.01.95.29.14.48.21.55.33.07.12.07.7-.18 1.4Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const MailIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M2.25 6.75A2.25 2.25 0 0 1 4.5 4.5h15a2.25 2.25 0 0 1 2.25 2.25v10.5A2.25 2.25 0 0 1 19.5 19.5h-15a2.25 2.25 0 0 1-2.25-2.25V6.75Zm2.402-.75 7.098 5.213L18.848 6H4.652Zm-.652 1.401v9.099h15v-9.1l-7.35 5.4a.75.75 0 0 1-.9 0L4 7.401Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const CopyIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M8.25 3A2.25 2.25 0 0 0 6 5.25v9A2.25 2.25 0 0 0 8.25 16.5h7.5A2.25 2.25 0 0 0 18 14.25v-9A2.25 2.25 0 0 0 15.75 3h-7.5Zm-3 3h-.75A2.25 2.25 0 0 0 2.25 8.25v9A2.25 2.25 0 0 0 4.5 19.5h9a2.25 2.25 0 0 0 2.25-2.25v-.75h-.75a2.25 2.25 0 0 1-2.25-2.25V8.25A2.25 2.25 0 0 0 10.5 6h-5.25Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const MagnifyingGlassIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronRightIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m8.25 4.5 7.5 7.5-7.5 7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const XMarkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18 18 6M6 6l12 12&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const LightBulbIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 2.25c-3.728 0-6.75 2.94-6.75 6.563 0 2.278 1.148 4.043 2.505 5.332.516.486.84 1.13.84 1.828v.432c0 .414.336.75.75.75h5.31c.414 0 .75-.336.75-.75v-.432c0-.698.324-1.342.84-1.828 1.357-1.29 2.505-3.054 2.505-5.332C18.75 5.19 15.728 2.25 12 2.25Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 18.75h4.5M10.5 21h3&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const BookOpenIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 6.75c-1.148-.766-2.51-1.5-4.125-1.5S4.898 5.984 3.75 6.75v10.5c1.148-.766 2.51-1.5 4.125-1.5S10.852 16.484 12 17.25m0-10.5c1.148-.766 2.51-1.5 4.125-1.5s2.977.734 4.125 1.5v10.5c-1.148-.766-2.51-1.5-4.125-1.5S13.148 16.484 12 17.25m0-10.5v10.5&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const FacebookIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M22 12.06C22 6.48 17.52 2 11.94 2S1.88 6.48 1.88 12.06c0 4.99 3.64 9.13 8.4 9.94v-7.03H7.9v-2.91h2.38v-2.22c0-2.35 1.4-3.65 3.55-3.65 1.03 0 2.1.18 2.1.18v2.31h-1.18c-1.16 0-1.52.72-1.52 1.46v1.92h2.59l-.41 2.91h-2.18V22c4.76-.81 8.4-4.95 8.4-9.94Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const InstagramIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M12 7.35A4.65 4.65 0 1 0 12 16.65 4.65 4.65 0 1 0 12 7.35Zm0 7.65A3 3 0 1 1 12 9a3 3 0 0 1 0 6Zm5.85-7.79a1.09 1.09 0 1 1 0-2.18 1.09 1.09 0 0 1 0 2.18ZM12 2.16c-2.52 0-2.84.01-3.84.06-1 .05-1.68.21-2.28.45a4.6 4.6 0 0 0-1.66 1.08 4.6 4.6 0 0 0-1.08 1.66c-.24.6-.4 1.28-.45 2.28-.05 1-.06 1.32-.06 3.84s.01 2.84.06 3.84c.05 1 .21 1.68.45 2.28.24.6.54 1.11 1.08 1.66.55.54 1.06.84 1.66 1.08.6.24 1.28.4 2.28.45 1 .05 1.32.06 3.84.06s2.84-.01 3.84-.06c1-.05 1.68-.21 2.28-.45a4.6 4.6 0 0 0 1.66-1.08 4.6 4.6 0 0 0 1.08-1.66c.24-.6.4-1.28.45-2.28.05-1 .06-1.32.06-3.84s-.01-2.84-.06-3.84c-.05-1-.21-1.68-.45-2.28a4.6 4.6 0 0 0-1.08-1.66 4.6 4.6 0 0 0-1.66-1.08c-.6-.24-1.28-.4-2.28-.45-1-.05-1.32-.06-3.84-.06Zm0 1.62c2.47 0 2.76.01 3.74.05.9.04 1.39.19 1.72.31.43.17.74.37 1.06.69.32.32.52.63.69 1.06.12.33.27.82.31 1.72.04.98.05 1.27.05 3.74s-.01 2.76-.05 3.74c-.04.9-.19 1.39-.31 1.72a2.98 2.98 0 0 1-.69 1.06c-.32.32-.63.52-1.06.69-.33.12-.82.27-1.72.31-.98.04-1.27.05-3.74.05s-2.76-.01-3.74-.05c-.9-.04-1.39-.19-1.72-.31a2.98 2.98 0 0 1-1.06-.69 2.98 2.98 0 0 1-.69-1.06c-.12-.33-.27-.82-.31-1.72-.04-.98-.05-1.27-.05-3.74s.01-2.76.05-3.74c.04-.9.19-1.39.31-1.72.17-.43.37-.74.69-1.06.32-.32.63-.52 1.06-.69.33-.12.82-.27 1.72-.31.98-.04 1.27-.05 3.74-.05Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const WhatsappIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M12.04 2a9.93 9.93 0 0 0-8.52 15.1L2 22l5.07-1.48A9.94 9.94 0 1 0 12.04 2Zm5.83 14.23c-.25.7-1.45 1.34-2.01 1.42-.52.08-1.18.11-1.9-.12-.44-.14-1-.33-1.72-.65-3.03-1.31-5-4.36-5.15-4.56-.15-.2-1.23-1.64-1.23-3.13 0-1.48.78-2.2 1.06-2.5.27-.29.59-.36.79-.36.2 0 .4 0 .57.01.18.01.43-.07.68.52.25.59.86 2.06.94 2.21.08.15.13.32.02.52-.11.2-.17.32-.31.49-.14.16-.3.37-.13.7.18.32.8 1.32 1.72 2.14 1.18 1.05 2.17 1.37 2.49 1.52.31.15.49.13.67-.08.18-.2.77-.9.97-1.21.2-.32.41-.27.68-.16.27.11 1.72.81 2.01.95.29.14.48.21.55.33.07.12.07.7-.18 1.4Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const MailIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M2.25 6.75A2.25 2.25 0 0 1 4.5 4.5h15a2.25 2.25 0 0 1 2.25 2.25v10.5A2.25 2.25 0 0 1 19.5 19.5h-15a2.25 2.25 0 0 1-2.25-2.25V6.75Zm2.402-.75 7.098 5.213L18.848 6H4.652Zm-.652 1.401v9.099h15v-9.1l-7.35 5.4a.75.75 0 0 1-.9 0L4 7.401Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const CopyIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M8.25 3A2.25 2.25 0 0 0 6 5.25v9A2.25 2.25 0 0 0 8.25 16.5h7.5A2.25 2.25 0 0 0 18 14.25v-9A2.25 2.25 0 0 0 15.75 3h-7.5Zm-3 3h-.75A2.25 2.25 0 0 0 2.25 8.25v9A2.25 2.25 0 0 0 4.5 19.5h9a2.25 2.25 0 0 0 2.25-2.25v-.75h-.75a2.25 2.25 0 0 1-2.25-2.25V8.25A2.25 2.25 0 0 0 10.5 6h-5.25Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const MagnifyingGlassIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const TrashIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>