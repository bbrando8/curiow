<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/firestore.rules">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/firestore.rules" />
              <option name="updatedContent" value="rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;    // Regole per gli utenti&#10;    match /users/{userId} {&#10;      allow read, write: if request.auth != null &amp;&amp; request.auth.uid == userId;&#10;      // Permetti agli admin di leggere tutti gli utenti&#10;      allow read: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;&#10;        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';&#10;    }&#10;    &#10;    // Regole per le gemme (lettura pubblica, scrittura per admin)&#10;    match /gems/{gemId} {&#10;      allow read: if true; // Lettura pubblica&#10;      allow write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;&#10;        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.canCreateGems == true;&#10;      &#10;      // Domande degli utenti sulle gemme&#10;      match /userQuestions/{questionId} {&#10;        allow read: if true;&#10;        allow write: if request.auth != null;&#10;      }&#10;    }&#10;    &#10;    // Regole per i canali (lettura pubblica)&#10;    match /channels/{channelId} {&#10;      allow read: if true;&#10;      allow write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;&#10;        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';&#10;    }&#10;    &#10;    // Regole per i suggerimenti di argomenti&#10;    match /topicSuggestions/{suggestionId} {&#10;      allow read, write: if request.auth != null;&#10;    }&#10;    &#10;    // ===== REGOLE PER LE NUOVE LISTE =====&#10;    &#10;    // Regole per le liste&#10;    match /lists/{listId} {&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        resource.data.createdBy == request.auth.uid;&#10;      allow create: if request.auth != null;&#10;      allow read: if request.auth != null &amp;&amp; resource.data.isPublic == true;&#10;    }&#10;    &#10;    // Regole per i membri delle liste&#10;    match /list_members/{memberId} {&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        resource.data.userId == request.auth.uid;&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &amp;&amp;&#10;        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.createdBy == request.auth.uid;&#10;    }&#10;    &#10;    // Regole per gli elementi delle liste&#10;    match /list_items/{itemId} {&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &amp;&amp;&#10;        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.createdBy == request.auth.uid;&#10;      allow read: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &amp;&amp;&#10;        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.isPublic == true;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useMemo } from 'react';&#10;import { Gem, User, SavedList, Channel, Filter, Topic, ListWithItems, UserRole } from './types';&#10;import { auth, googleProvider, getIdToken } from './services/firebase';&#10;import { onAuthStateChanged, User as FirebaseUser, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, signInWithPopup } from 'firebase/auth';&#10;import * as firestoreService from './services/firestoreService';&#10;import * as feedbackService from './services/feedbackService';&#10;import Header from './components/Header';&#10;import GemCard from './components/GemCard';&#10;import GemDetailView from './components/GemDetailView';&#10;import LoginModal from './components/LoginModal';&#10;import SavedView from './components/SavedView';&#10;import ProfileView from './components/ProfileView';&#10;import AdminDashboard from './components/admin/AdminDashboard';&#10;import TopicManagement from './components/admin/TopicManagement';&#10;import FeedbackButton from './components/FeedbackButton';&#10;import FeedbackModal from './components/FeedbackModal';&#10;import OnboardingModal from './components/OnboardingModal';&#10;import { SparklesIcon } from './components/icons';&#10;import SaveToListModal from './components/SaveToListModal';&#10;// Import admin utils in development&#10;import './utils/adminUtils';&#10;&#10;type View = 'feed' | 'detail' | 'saved' | 'profile' | 'dashboard' | 'topics';&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [gems, setGems] = useState&lt;Gem[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;Channel[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  &#10;  const [firebaseUser, setFirebaseUser] = useState&lt;FirebaseUser | null&gt;(null);&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [userLists, setUserLists] = useState&lt;ListWithItems[]&gt;([]);&#10;  const [isMigrated, setIsMigrated] = useState(false);&#10;&#10;  const [filter, setFilter] = useState&lt;Filter&gt;({ type: 'all' });&#10;  const [showLoginModal, setShowLoginModal] = useState(false);&#10;  const [currentView, setCurrentView] = useState&lt;View&gt;('feed');&#10;  const [selectedGemId, setSelectedGemId] = useState&lt;string | null&gt;(null);&#10;  &#10;  // Nuovo stato per la modale del dettaglio&#10;  const [showGemDetailModal, setShowGemDetailModal] = useState(false);&#10;&#10;  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);&#10;  const [gemToSaveId, setGemToSaveId] = useState&lt;string | null&gt;(null);&#10;&#10;  // Stati per la modale di onboarding&#10;  const [showOnboardingModal, setShowOnboardingModal] = useState(false);&#10;  const [hasSeenOnboarding, setHasSeenOnboarding] = useState(false);&#10;  const onboardingTriggerRef = React.useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  // Stati per il sistema di feedback&#10;  const [showFeedbackModal, setShowFeedbackModal] = useState(false);&#10;  const feedbackButtonRef = React.useRef&lt;any&gt;(null);&#10;&#10;  const handleSelectGem = async (gemId: string) =&gt; {&#10;    if (auth.currentUser) {&#10;      const token = await getIdToken();&#10;      console.log('Firebase JWT Token:', token);&#10;    } else {&#10;      console.log('Utente non autenticato, nessun JWT token da mostrare.');&#10;    }&#10;    setSelectedGemId(gemId);&#10;    setShowGemDetailModal(true);&#10;  };&#10;&#10;  // Fetch initial static-like data&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;        setIsLoading(true);&#10;        const [fetchedGems, fetchedChannels] = await Promise.all([&#10;            firestoreService.fetchGems(),&#10;            firestoreService.fetchChannels(),&#10;        ]);&#10;        setGems(fetchedGems);&#10;        setChannels(fetchedChannels);&#10;        setIsLoading(false);&#10;    };&#10;    fetchInitialData();&#10;  }, []);&#10;&#10;  // Auth state listener&#10;  useEffect(() =&gt; {&#10;      const unsubscribe = onAuthStateChanged(auth, async (currentUser) =&gt; {&#10;          console.log('Auth state changed - currentUser:', currentUser?.uid);&#10;          setFirebaseUser(currentUser);&#10;          if (currentUser) {&#10;              // Log del JWT token quando lo stato cambia&#10;              try {&#10;                  const idToken = await currentUser.getIdToken();&#10;                  console.log('JWT Token (Auth State Changed):', idToken);&#10;              } catch (error) {&#10;                  console.error('Errore nel recupero del JWT token:', error);&#10;              }&#10;&#10;              let userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              console.log('Fetched user profile:', userProfile);&#10;&#10;              // Se il profilo non esiste, creane uno nuovo. Utile per utenti già esistenti in Auth ma non in Firestore.&#10;              if (!userProfile) {&#10;                  console.log(`Creating new profile for user ${currentUser.uid}`);&#10;                  const email = currentUser.email || 'no-email@example.com';&#10;                  const [firstName, lastName] = email.split('@')[0].split('.') || [email, ''];&#10;                  await firestoreService.createUserProfile(currentUser.uid, email, firstName, lastName || '');&#10;                  userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;                  console.log('Created new user profile:', userProfile);&#10;              }&#10;&#10;              // Migrazione automatica alle nuove liste&#10;              console.log('Attempting migration to new list structure...');&#10;              const migrationSuccess = await firestoreService.migrateUserToNewListStructure(currentUser.uid);&#10;              setIsMigrated(migrationSuccess);&#10;&#10;              // Carica le liste con la nuova struttura&#10;              const newUserLists = await firestoreService.fetchUserListsNew(currentUser.uid);&#10;              setUser(userProfile);&#10;              setUserLists(newUserLists);&#10;              setShowLoginModal(false);&#10;&#10;              console.log('Migration completed:', migrationSuccess);&#10;              console.log('Loaded user lists:', newUserLists);&#10;          } else {&#10;              // User is signed out&#10;              setUser(null);&#10;              setUserLists([]);&#10;              setIsMigrated(false);&#10;              setFilter({ type: 'all' });&#10;              setCurrentView('feed');&#10;          }&#10;      });&#10;      return () =&gt; unsubscribe();&#10;  }, []);&#10;  &#10;  // Listener for user questions on selected gem&#10;  useEffect(() =&gt; {&#10;    if (!selectedGemId) return;&#10;&#10;    const unsubscribe = firestoreService.listenToUserQuestions(selectedGemId, (questions) =&gt; {&#10;        setGems(prevGems =&gt; prevGems.map(gem =&gt; &#10;            gem.id === selectedGemId ? { ...gem, userQuestions: questions } : gem&#10;        ));&#10;    });&#10;&#10;    return () =&gt; unsubscribe();&#10;  }, [selectedGemId]);&#10;&#10;  const handleSignUpAttempt = async (email: string, pass: string, firstName: string, lastName: string) =&gt; {&#10;      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);&#10;      await firestoreService.createUserProfile(userCredential.user.uid, email, firstName, lastName);&#10;      handleSuccessfulAuth();&#10;  };&#10;&#10;  const handleLoginAttempt = async (email: string, pass: string) =&gt; {&#10;      const userCredential = await signInWithEmailAndPassword(auth, email, pass);&#10;      handleSuccessfulAuth();&#10;      return userCredential;&#10;  };&#10;&#10;  const handleGoogleAuth = async () =&gt; {&#10;    try {&#10;      const result = await signInWithPopup(auth, googleProvider);&#10;      const user = result.user;&#10;&#10;      // Log del JWT token&#10;      const idToken = await user.getIdToken();&#10;      console.log('JWT Token (Google Login):', idToken);&#10;&#10;      // Controlla se il profilo utente esiste già&#10;      let userProfile = await firestoreService.fetchUserProfile(user.uid);&#10;&#10;      if (!userProfile) {&#10;        // Se è la prima volta che l'utente accede con Google, crea il profilo&#10;        const email = user.email || 'no-email@example.com';&#10;        const firstName = user.displayName?.split(' ')[0] || 'Nome';&#10;        const lastName = user.displayName?.split(' ').slice(1).join(' ') || 'Cognome';&#10;&#10;        await firestoreService.createUserProfile(user.uid, email, firstName, lastName);&#10;      }&#10;&#10;      handleSuccessfulAuth();&#10;    } catch (error: any) {&#10;      console.error('Errore nell\'autenticazione Google:', error);&#10;      throw new Error('Errore nell\'autenticazione con Google: ' + error.message);&#10;    }&#10;  };&#10;&#10;  const handleLogout = () =&gt; {&#10;    signOut(auth);&#10;  };&#10;&#10;  const handleNavigate = (view: View) =&gt; {&#10;    console.log('Navigating to:', view); // Debug log&#10;    window.scrollTo(0, 0);&#10;    setCurrentView(view);&#10;  };&#10;  &#10;  const handleLoginRequest = () =&gt; {&#10;    if(!firebaseUser) setShowLoginModal(true);&#10;  }&#10;&#10;  const allFavoriteIds = useMemo(() =&gt; {&#10;    return Array.from(new Set(userLists.flatMap(list =&gt; list.gemIds)));&#10;  }, [userLists]);&#10;&#10;  const handleSaveRequest = (gemId: string) =&gt; {&#10;    setGemToSaveId(gemId);&#10;    setIsSaveModalOpen(true);&#10;  };&#10;&#10;  // Aggiorna le liste dell'utente con la nuova struttura&#10;  const updateUserLists = async (updatedLists: ListWithItems[]) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUserLists(updatedLists);&#10;      // Non serve più salvare nel documento utente, le liste sono in collezioni separate&#10;  };&#10;&#10;  const handleSaveToList = async (listId: string) =&gt; {&#10;    if (!gemToSaveId || !firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.addGemToUserList(firebaseUser.uid, listId, gemToSaveId);&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === listId &amp;&amp; !list.gemIds.includes(gemToSaveId)) {&#10;          return {&#10;            ...list,&#10;            gemIds: [...list.gemIds, gemToSaveId],&#10;            itemCount: list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error saving to list:', error);&#10;      alert('Errore nel salvare nella lista');&#10;    }&#10;  };&#10;  &#10;  const handleCreateListAndSave = async (listName: string) =&gt; {&#10;      if (!gemToSaveId || !firebaseUser) return;&#10;&#10;      try {&#10;        const newListId = await firestoreService.createNewList(firebaseUser.uid, listName);&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, newListId, gemToSaveId);&#10;&#10;        // Aggiungi la nuova lista allo stato locale&#10;        const newList: ListWithItems = {&#10;          id: newListId,&#10;          name: listName,&#10;          isPublic: false,&#10;          createdBy: firebaseUser.uid,&#10;          createdAt: new Date(),&#10;          updatedAt: new Date(),&#10;          gemIds: [gemToSaveId],&#10;          itemCount: 1,&#10;          userRole: 'owner'&#10;        };&#10;        setUserLists([...userLists, newList]);&#10;      } catch (error) {&#10;        console.error('Error creating list and saving:', error);&#10;        alert('Errore nella creazione della lista');&#10;      }&#10;  };&#10;&#10;  // Crea una nuova lista tramite il servizio e ricarica le liste&#10;  const handleCreateNewList = async (listName: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.createNewList(firebaseUser.uid, listName);&#10;&#10;      // Ricarica le liste dopo la creazione&#10;      const updatedLists = await firestoreService.fetchUserListsNew(firebaseUser.uid);&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error creating new list:', error);&#10;      throw error; // Rilancia l'errore per gestirlo nel componente&#10;    }&#10;  };&#10;&#10;  const handleToggleFavorite = async (gemId: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    const favoritesList = userLists.find(list =&gt; list.name === 'Preferiti' || list.id === 'default');&#10;    if (!favoritesList) return;&#10;&#10;    const isFav = favoritesList.gemIds.includes(gemId);&#10;&#10;    try {&#10;      if (isFav) {&#10;        await firestoreService.removeGemFromUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      } else {&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      }&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === favoritesList.id) {&#10;          return {&#10;            ...list,&#10;            gemIds: isFav&#10;              ? list.gemIds.filter(id =&gt; id !== gemId)&#10;              : [...list.gemIds, gemId],&#10;            itemCount: isFav ? list.itemCount - 1 : list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error toggling favorite:', error);&#10;      alert('Errore nel modificare i preferiti');&#10;    }&#10;  };&#10;  &#10;  const handleAddUserQuestion = async (gemId: string, question: string) =&gt; {&#10;      await firestoreService.addUserQuestion(gemId, question);&#10;  };&#10;&#10;  const handleSelectTag = (tag: string) =&gt; {&#10;      setFilter({ type: 'tag', value: tag });&#10;      setShowGemDetailModal(false);&#10;  };&#10;  &#10;  const handleUpdateUser = async (updatedUser: User) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUser(updatedUser);&#10;      await firestoreService.updateUserProfile(firebaseUser.uid, {&#10;          firstName: updatedUser.firstName,&#10;          lastName: updatedUser.lastName,&#10;      });&#10;      alert(&quot;Profilo aggiornato!&quot;);&#10;  }&#10;&#10;  // Funzioni per il sistema di feedback&#10;  const getCurrentSection = (): string =&gt; {&#10;    switch (currentView) {&#10;      case 'feed':&#10;        return 'Feed principale';&#10;      case 'detail':&#10;        return `Dettaglio gem: ${selectedGem?.title || 'Sconosciuto'}`;&#10;      case 'saved':&#10;        return 'Liste salvate';&#10;      case 'profile':&#10;        return 'Profilo utente';&#10;      case 'dashboard':&#10;        return 'Dashboard amministratore';&#10;      case 'topics':&#10;        return 'Gestione argomenti';&#10;      default:&#10;        return 'Sezione sconosciuta';&#10;    }&#10;  };&#10;&#10;  const handleFeedbackSubmit = async (section: string, message: string) =&gt; {&#10;    if (!firebaseUser || !user) return;&#10;&#10;    try {&#10;      const userName = `${user.firstName} ${user.lastName}`;&#10;      await feedbackService.createFeedback(&#10;        firebaseUser.uid,&#10;        user.email,&#10;        userName,&#10;        section,&#10;        message&#10;      );&#10;      // Mostra animazione di successo sul pulsante invece dell'alert&#10;      if (feedbackButtonRef.current?.showSuccess) {&#10;        feedbackButtonRef.current.showSuccess();&#10;      }&#10;    } catch (error) {&#10;      console.error('Errore nell\'invio del feedback:', error);&#10;      throw error; // Permette alla modale di gestire l'errore&#10;    }&#10;  };&#10;&#10;  const filteredGems = useMemo(() =&gt; {&#10;    if (filter.type === 'all') return gems;&#10;    if (filter.type === 'channel') return gems.filter(g =&gt; g.channelId === filter.id);&#10;    if (filter.type === 'topic') return gems.filter(g =&gt; g.topic === filter.id);&#10;    if (filter.type === 'tag') return gems.filter(g =&gt; g.tags?.includes(filter.id));&#10;    return gems;&#10;  }, [gems, filter]);&#10;&#10;  // Effetto per l'Intersection Observer della modale di onboarding&#10;  useEffect(() =&gt; {&#10;    // Attiva l'observer solo se l'utente non è loggato e non ha già visto la modale in questa sessione&#10;    if (firebaseUser || hasSeenOnboarding || isLoading) {&#10;      return;&#10;    }&#10;&#10;    const observer = new IntersectionObserver(&#10;      (entries) =&gt; {&#10;        if (entries[0].isIntersecting) {&#10;          setShowOnboardingModal(true);&#10;          setHasSeenOnboarding(true);&#10;          observer.disconnect(); // Smette di osservare dopo aver mostrato la modale una volta&#10;        }&#10;      },&#10;      {&#10;        root: null, // Osserva rispetto al viewport&#10;        threshold: 0.5, // Si attiva quando il 50% dell'elemento è visibile&#10;      }&#10;    );&#10;&#10;    const trigger = onboardingTriggerRef.current;&#10;    if (trigger) {&#10;      observer.observe(trigger);&#10;    }&#10;&#10;    return () =&gt; {&#10;      if (trigger) {&#10;        observer.unobserve(trigger);&#10;      }&#10;    };&#10;  }, [firebaseUser, hasSeenOnboarding, isLoading, filteredGems]); // Le dipendenze assicurano che l'observer si riattivi se il filtro cambia&#10;&#10;&#10;  // Verifica se l'utente può vedere il pulsante feedback&#10;  const canShowFeedbackButton = useMemo(() =&gt; {&#10;    return user &amp;&amp; (user.role === UserRole.ADMIN || user.role === UserRole.BETATESTER);&#10;  }, [user]);&#10;&#10;  /* HO SPOSTATO LA DICHIARAZIONE DI filteredGems PRIMA DELLO USEEFFECT PER RISOLVERE IL BUG */&#10;&#10;  // Limita le gems visualizzate per utenti non loggati&#10;  const GEMS_LIMIT_FOR_UNLOGGED_USERS = 7;&#10;  const displayedGems = !firebaseUser&#10;    ? filteredGems.slice(0, GEMS_LIMIT_FOR_UNLOGGED_USERS)&#10;    : filteredGems;&#10;&#10;  const selectedGem = gems.find(gem =&gt; gem.id === selectedGemId);&#10;&#10;  const renderFeed = () =&gt; (&#10;    &lt;&gt;&#10;        &lt;Header&#10;            isLoggedIn={!!firebaseUser}&#10;            user={user}&#10;            onLogin={() =&gt; setShowLoginModal(true)}&#10;            onLogout={handleLogout}&#10;            selectedFilter={filter}&#10;            onSelectFilter={setFilter}&#10;            onNavigate={handleNavigate}&#10;            channels={channels}&#10;        /&gt;&#10;        &lt;main className=&quot;max-w-xl mx-auto py-8 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {isLoading &amp;&amp; gems.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center text-center text-slate-500 dark:text-slate-400 pt-20&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-16 h-16 animate-pulse text-indigo-400&quot;/&gt;&#10;            &lt;p className=&quot;mt-4 text-lg font-semibold&quot;&gt;Stiamo preparando Curiow per te...&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm&quot;&gt;Un momento, stiamo cercando spunti interessanti.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {displayedGems.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  {displayedGems.map((gem, index) =&gt; (&#10;                      &lt;React.Fragment key={gem.id}&gt;&#10;                        &lt;GemCard&#10;                          gem={gem}&#10;                          isLoggedIn={!!firebaseUser}&#10;                          isFavorite={allFavoriteIds.includes(gem.id)}&#10;                          onSaveRequest={handleSaveRequest}&#10;                          onSelect={handleSelectGem}&#10;                          onLoginRequest={handleLoginRequest}&#10;                        /&gt;&#10;                        {/* Trigger per la modale di onboarding dopo la 4a card per utenti non loggati */}&#10;                        {!firebaseUser &amp;&amp; index === 3 &amp;&amp; !hasSeenOnboarding &amp;&amp; (&#10;                          &lt;div ref={onboardingTriggerRef} style={{ height: '1px' }} /&gt;&#10;                        )}&#10;                      &lt;/React.Fragment&gt;&#10;                  ))}&#10;                  {/* Mostra il blocco di invito al login se l'utente non è loggato e ci sono più gemme disponibili */}&#10;                  {!firebaseUser &amp;&amp; filteredGems.length &gt; GEMS_LIMIT_FOR_UNLOGGED_USERS &amp;&amp; (&#10;                    &lt;div className=&quot;p-8 text-center bg-gradient-to-br from-indigo-900 via-purple-900 to-slate-900 rounded-2xl shadow-2xl my-8&quot;&gt;&#10;                      &lt;h2 className=&quot;text-3xl font-bold text-white mb-3&quot;&gt;Continua a scoprire&lt;/h2&gt;&#10;                      &lt;p className=&quot;text-indigo-300 text-lg mb-6&quot;&gt;&#10;                        Registrati o accedi per sbloccare tutti i contenuti e salvare le tue gemme preferite.&#10;                      &lt;/p&gt;&#10;                      &lt;div className=&quot;flex flex-col sm:flex-row justify-center gap-4&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setShowLoginModal(true)}&#10;                          className=&quot;w-full sm:w-auto bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-bold py-3 px-8 rounded-full transition-all duration-300 shadow-lg transform hover:scale-105&quot;&#10;                        &gt;&#10;                          Registrati o Accedi&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;            ) : (&#10;                &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma trovata&lt;/h3&gt;&#10;                    &lt;p className=&quot;mt-2&quot;&gt;Prova a selezionare un'altra categoria o filtro.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  const renderContent = () =&gt; {&#10;    switch (currentView) {&#10;        case 'saved':&#10;            return firebaseUser ? &lt;SavedView&#10;                        allGems={gems}&#10;                        allFavoriteIds={allFavoriteIds}&#10;                        savedLists={userLists}&#10;                        onUpdateLists={updateUserLists}&#10;                        onSelectGem={handleSelectGem}&#10;                        onToggleFavorite={handleToggleFavorite}&#10;                        onLoginRequest={handleLoginRequest}&#10;                        onBack={() =&gt; handleNavigate('feed')}&#10;                        onCreateList={handleCreateNewList}&#10;                    /&gt; : renderFeed();&#10;        case 'profile':&#10;            return firebaseUser &amp;&amp; user ? &lt;ProfileView user={user} onUpdateUser={handleUpdateUser} onBack={() =&gt; handleNavigate('feed')} onNavigate={handleNavigate} /&gt; : renderFeed();&#10;        case 'dashboard':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;AdminDashboard&#10;                    currentUser={{ ...user, id: firebaseUser.uid }}&#10;                    onClose={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'topics':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;TopicManagement&#10;                    currentUser={{ ...user, uid: firebaseUser.uid }}&#10;                    onBack={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'feed':&#10;        default:&#10;            return renderFeed();&#10;    }&#10;  }&#10;&#10;  const handleOnboardingLogin = () =&gt; {&#10;    setShowOnboardingModal(false);&#10;    setShowLoginModal(true);&#10;  };&#10;&#10;  const handleOnboardingSignUp = () =&gt; {&#10;    setShowOnboardingModal(false);&#10;    setShowLoginModal(true);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;        {renderContent()}&#10;&#10;        {/* Pulsante feedback flottante per admin e betatester */}&#10;        {canShowFeedbackButton &amp;&amp; (&#10;          &lt;FeedbackButton&#10;            ref={feedbackButtonRef}&#10;            onClick={() =&gt; setShowFeedbackModal(true)}&#10;          /&gt;&#10;        )}&#10;&#10;        {showLoginModal &amp;&amp; &lt;LoginModal&#10;            onLoginAttempt={handleLoginAttempt}&#10;            onSignUpAttempt={handleSignUpAttempt}&#10;            onGoogleAuth={handleGoogleAuth}&#10;            onCancel={() =&gt; setShowLoginModal(false)}&#10;        /&gt;}&#10;&#10;        {showOnboardingModal &amp;&amp; (&#10;          &lt;OnboardingModal&#10;            isOpen={showOnboardingModal}&#10;            onLoginRequest={handleOnboardingLogin}&#10;            onSignUpRequest={handleOnboardingSignUp}&#10;            onClose={() =&gt; setShowOnboardingModal(false)}&#10;          /&gt;&#10;        )}&#10;&#10;        {showFeedbackModal &amp;&amp; (&#10;          &lt;FeedbackModal&#10;            section={getCurrentSection()}&#10;            onSubmit={handleFeedbackSubmit}&#10;            onCancel={() =&gt; setShowFeedbackModal(false)}&#10;            onSuccess={() =&gt; {&#10;              if (feedbackButtonRef.current?.showSuccess) {&#10;                feedbackButtonRef.current.showSuccess();&#10;              }&#10;            }}&#10;          /&gt;&#10;        )}&#10;&#10;        {isSaveModalOpen &amp;&amp; gemToSaveId &amp;&amp; (&#10;            &lt;SaveToListModal&#10;                isOpen={isSaveModalOpen}&#10;                onClose={() =&gt; setIsSaveModalOpen(false)}&#10;                lists={userLists.filter(l =&gt; l.id !== 'default')}&#10;                gemId={gemToSaveId}&#10;                onSaveToList={handleSaveToList}&#10;                onCreateAndSave={handleCreateListAndSave}&#10;                onToggleDefaultFavorite={handleToggleFavorite}&#10;                isSavedToDefault={userLists.find(l=&gt;l.id==='default')?.gemIds.includes(gemToSaveId) ?? false}&#10;            /&gt;&#10;        )}&#10;&#10;        {/* Modale dettaglio gem a schermo intero */}&#10;        {showGemDetailModal &amp;&amp; selectedGem &amp;&amp; (&#10;            &lt;div className=&quot;fixed inset-0 z-50 bg-slate-50 dark:bg-slate-900 overflow-y-auto&quot;&gt;&#10;                &lt;GemDetailView&#10;                    gem={selectedGem}&#10;                    isFavorite={allFavoriteIds.includes(selectedGem.id)}&#10;                    onBack={handleBackToFeed}&#10;                    onSaveRequest={handleSaveRequest}&#10;                    onAddUserQuestion={handleAddUserQuestion}&#10;                    onTagSelect={handleSelectTag}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useMemo } from 'react';&#10;import { Gem, User, SavedList, Channel, Filter, Topic, ListWithItems, UserRole } from './types';&#10;import { auth, googleProvider, getIdToken } from './services/firebase';&#10;import { onAuthStateChanged, User as FirebaseUser, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, signInWithPopup } from 'firebase/auth';&#10;import * as firestoreService from './services/firestoreService';&#10;import * as feedbackService from './services/feedbackService';&#10;import Header from './components/Header';&#10;import GemCard from './components/GemCard';&#10;import GemDetailView from './components/GemDetailView';&#10;import LoginModal from './components/LoginModal';&#10;import SavedView from './components/SavedView';&#10;import ProfileView from './components/ProfileView';&#10;import AdminDashboard from './components/admin/AdminDashboard';&#10;import TopicManagement from './components/admin/TopicManagement';&#10;import FeedbackButton from './components/FeedbackButton';&#10;import FeedbackModal from './components/FeedbackModal';&#10;import OnboardingModal from './components/OnboardingModal';&#10;import { SparklesIcon } from './components/icons';&#10;import SaveToListModal from './components/SaveToListModal';&#10;// Import admin utils in development&#10;import './utils/adminUtils';&#10;&#10;type View = 'feed' | 'detail' | 'saved' | 'profile' | 'dashboard' | 'topics';&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [gems, setGems] = useState&lt;Gem[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;Channel[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  &#10;  const [firebaseUser, setFirebaseUser] = useState&lt;FirebaseUser | null&gt;(null);&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [userLists, setUserLists] = useState&lt;ListWithItems[]&gt;([]);&#10;  const [isMigrated, setIsMigrated] = useState(false);&#10;&#10;  const [filter, setFilter] = useState&lt;Filter&gt;({ type: 'all' });&#10;  const [showLoginModal, setShowLoginModal] = useState(false);&#10;  const [currentView, setCurrentView] = useState&lt;View&gt;('feed');&#10;  const [selectedGemId, setSelectedGemId] = useState&lt;string | null&gt;(null);&#10;  &#10;  // Nuovo stato per la modale del dettaglio&#10;  const [showGemDetailModal, setShowGemDetailModal] = useState(false);&#10;&#10;  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);&#10;  const [gemToSaveId, setGemToSaveId] = useState&lt;string | null&gt;(null);&#10;&#10;  // Stati per la modale di onboarding&#10;  const [showOnboardingModal, setShowOnboardingModal] = useState(false);&#10;  const [hasSeenOnboarding, setHasSeenOnboarding] = useState(false);&#10;  const onboardingTriggerRef = React.useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  // Stati per il sistema di feedback&#10;  const [showFeedbackModal, setShowFeedbackModal] = useState(false);&#10;  const feedbackButtonRef = React.useRef&lt;any&gt;(null);&#10;&#10;  const handleSelectGem = async (gemId: string) =&gt; {&#10;    if (auth.currentUser) {&#10;      const token = await getIdToken();&#10;      console.log('Firebase JWT Token:', token);&#10;    } else {&#10;      console.log('Utente non autenticato, nessun JWT token da mostrare.');&#10;    }&#10;    setSelectedGemId(gemId);&#10;    setShowGemDetailModal(true);&#10;  };&#10;&#10;  // Fetch initial static-like data&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;        setIsLoading(true);&#10;        const [fetchedGems, fetchedChannels] = await Promise.all([&#10;            firestoreService.fetchGems(),&#10;            firestoreService.fetchChannels(),&#10;        ]);&#10;        setGems(fetchedGems);&#10;        setChannels(fetchedChannels);&#10;        setIsLoading(false);&#10;    };&#10;    fetchInitialData();&#10;  }, []);&#10;&#10;  // Auth state listener&#10;  useEffect(() =&gt; {&#10;      const unsubscribe = onAuthStateChanged(auth, async (currentUser) =&gt; {&#10;          console.log('Auth state changed - currentUser:', currentUser?.uid);&#10;          setFirebaseUser(currentUser);&#10;          if (currentUser) {&#10;              // Log del JWT token quando lo stato cambia&#10;              try {&#10;                  const idToken = await currentUser.getIdToken();&#10;                  console.log('JWT Token (Auth State Changed):', idToken);&#10;              } catch (error) {&#10;                  console.error('Errore nel recupero del JWT token:', error);&#10;              }&#10;&#10;              let userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              console.log('Fetched user profile:', userProfile);&#10;&#10;              // Se il profilo non esiste, creane uno nuovo. Utile per utenti già esistenti in Auth ma non in Firestore.&#10;              if (!userProfile) {&#10;                  console.log(`Creating new profile for user ${currentUser.uid}`);&#10;                  const email = currentUser.email || 'no-email@example.com';&#10;                  const [firstName, lastName] = email.split('@')[0].split('.') || [email, ''];&#10;                  await firestoreService.createUserProfile(currentUser.uid, email, firstName, lastName || '');&#10;                  userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;                  console.log('Created new user profile:', userProfile);&#10;              }&#10;&#10;              // Migrazione automatica alle nuove liste&#10;              console.log('Attempting migration to new list structure...');&#10;              const migrationSuccess = await firestoreService.migrateUserToNewListStructure(currentUser.uid);&#10;              setIsMigrated(migrationSuccess);&#10;&#10;              // Carica le liste con la nuova struttura&#10;              const newUserLists = await firestoreService.fetchUserListsNew(currentUser.uid);&#10;              setUser(userProfile);&#10;              setUserLists(newUserLists);&#10;              setShowLoginModal(false);&#10;&#10;              console.log('Migration completed:', migrationSuccess);&#10;              console.log('Loaded user lists:', newUserLists);&#10;          } else {&#10;              // User is signed out&#10;              setUser(null);&#10;              setUserLists([]);&#10;              setIsMigrated(false);&#10;              setFilter({ type: 'all' });&#10;              setCurrentView('feed');&#10;          }&#10;      });&#10;      return () =&gt; unsubscribe();&#10;  }, []);&#10;  &#10;  // Listener for user questions on selected gem&#10;  useEffect(() =&gt; {&#10;    if (!selectedGemId) return;&#10;&#10;    const unsubscribe = firestoreService.listenToUserQuestions(selectedGemId, (questions) =&gt; {&#10;        setGems(prevGems =&gt; prevGems.map(gem =&gt; &#10;            gem.id === selectedGemId ? { ...gem, userQuestions: questions } : gem&#10;        ));&#10;    });&#10;&#10;    return () =&gt; unsubscribe();&#10;  }, [selectedGemId]);&#10;&#10;  const handleSignUpAttempt = async (email: string, pass: string, firstName: string, lastName: string) =&gt; {&#10;      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);&#10;      await firestoreService.createUserProfile(userCredential.user.uid, email, firstName, lastName);&#10;      handleSuccessfulAuth();&#10;  };&#10;&#10;  const handleLoginAttempt = async (email: string, pass: string) =&gt; {&#10;      const userCredential = await signInWithEmailAndPassword(auth, email, pass);&#10;      handleSuccessfulAuth();&#10;      return userCredential;&#10;  };&#10;&#10;  const handleGoogleAuth = async () =&gt; {&#10;    try {&#10;      const result = await signInWithPopup(auth, googleProvider);&#10;      const user = result.user;&#10;&#10;      // Log del JWT token&#10;      const idToken = await user.getIdToken();&#10;      console.log('JWT Token (Google Login):', idToken);&#10;&#10;      // Controlla se il profilo utente esiste già&#10;      let userProfile = await firestoreService.fetchUserProfile(user.uid);&#10;&#10;      if (!userProfile) {&#10;        // Se è la prima volta che l'utente accede con Google, crea il profilo&#10;        const email = user.email || 'no-email@example.com';&#10;        const firstName = user.displayName?.split(' ')[0] || 'Nome';&#10;        const lastName = user.displayName?.split(' ').slice(1).join(' ') || 'Cognome';&#10;&#10;        await firestoreService.createUserProfile(user.uid, email, firstName, lastName);&#10;      }&#10;&#10;      handleSuccessfulAuth();&#10;    } catch (error: any) {&#10;      console.error('Errore nell\'autenticazione Google:', error);&#10;      throw new Error('Errore nell\'autenticazione con Google: ' + error.message);&#10;    }&#10;  };&#10;&#10;  const handleLogout = () =&gt; {&#10;    signOut(auth);&#10;  };&#10;&#10;  const handleNavigate = (view: View) =&gt; {&#10;    console.log('Navigating to:', view); // Debug log&#10;    window.scrollTo(0, 0);&#10;    setCurrentView(view);&#10;  };&#10;  &#10;  const handleLoginRequest = () =&gt; {&#10;    if(!firebaseUser) setShowLoginModal(true);&#10;  }&#10;&#10;  const allFavoriteIds = useMemo(() =&gt; {&#10;    return Array.from(new Set(userLists.flatMap(list =&gt; list.gemIds)));&#10;  }, [userLists]);&#10;&#10;  const handleSaveRequest = (gemId: string) =&gt; {&#10;    setGemToSaveId(gemId);&#10;    setIsSaveModalOpen(true);&#10;  };&#10;&#10;  // Aggiorna le liste dell'utente con la nuova struttura&#10;  const updateUserLists = async (updatedLists: ListWithItems[]) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUserLists(updatedLists);&#10;      // Non serve più salvare nel documento utente, le liste sono in collezioni separate&#10;  };&#10;&#10;  const handleSaveToList = async (listId: string) =&gt; {&#10;    if (!gemToSaveId || !firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.addGemToUserList(firebaseUser.uid, listId, gemToSaveId);&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === listId &amp;&amp; !list.gemIds.includes(gemToSaveId)) {&#10;          return {&#10;            ...list,&#10;            gemIds: [...list.gemIds, gemToSaveId],&#10;            itemCount: list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error saving to list:', error);&#10;      alert('Errore nel salvare nella lista');&#10;    }&#10;  };&#10;  &#10;  const handleCreateListAndSave = async (listName: string) =&gt; {&#10;      if (!gemToSaveId || !firebaseUser) return;&#10;&#10;      try {&#10;        const newListId = await firestoreService.createNewList(firebaseUser.uid, listName);&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, newListId, gemToSaveId);&#10;&#10;        // Aggiungi la nuova lista allo stato locale&#10;        const newList: ListWithItems = {&#10;          id: newListId,&#10;          name: listName,&#10;          isPublic: false,&#10;          createdBy: firebaseUser.uid,&#10;          createdAt: new Date(),&#10;          updatedAt: new Date(),&#10;          gemIds: [gemToSaveId],&#10;          itemCount: 1,&#10;          userRole: 'owner'&#10;        };&#10;        setUserLists([...userLists, newList]);&#10;      } catch (error) {&#10;        console.error('Error creating list and saving:', error);&#10;        alert('Errore nella creazione della lista');&#10;      }&#10;  };&#10;&#10;  // Crea una nuova lista tramite il servizio e ricarica le liste&#10;  const handleCreateNewList = async (listName: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.createNewList(firebaseUser.uid, listName);&#10;&#10;      // Ricarica le liste dopo la creazione&#10;      const updatedLists = await firestoreService.fetchUserListsNew(firebaseUser.uid);&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error creating new list:', error);&#10;      throw error; // Rilancia l'errore per gestirlo nel componente&#10;    }&#10;  };&#10;&#10;  const handleToggleFavorite = async (gemId: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    const favoritesList = userLists.find(list =&gt; list.name === 'Preferiti' || list.id === 'default');&#10;    if (!favoritesList) return;&#10;&#10;    const isFav = favoritesList.gemIds.includes(gemId);&#10;&#10;    try {&#10;      if (isFav) {&#10;        await firestoreService.removeGemFromUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      } else {&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      }&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === favoritesList.id) {&#10;          return {&#10;            ...list,&#10;            gemIds: isFav&#10;              ? list.gemIds.filter(id =&gt; id !== gemId)&#10;              : [...list.gemIds, gemId],&#10;            itemCount: isFav ? list.itemCount - 1 : list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error toggling favorite:', error);&#10;      alert('Errore nel modificare i preferiti');&#10;    }&#10;  };&#10;  &#10;  const handleAddUserQuestion = async (gemId: string, question: string) =&gt; {&#10;      await firestoreService.addUserQuestion(gemId, question);&#10;  };&#10;&#10;  const handleSelectTag = (tag: string) =&gt; {&#10;      setFilter({ type: 'tag', value: tag });&#10;      setShowGemDetailModal(false);&#10;  };&#10;  &#10;  const handleUpdateUser = async (updatedUser: User) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUser(updatedUser);&#10;      await firestoreService.updateUserProfile(firebaseUser.uid, {&#10;          firstName: updatedUser.firstName,&#10;          lastName: updatedUser.lastName,&#10;      });&#10;      alert(&quot;Profilo aggiornato!&quot;);&#10;  }&#10;&#10;  // Funzioni per il sistema di feedback&#10;  const getCurrentSection = (): string =&gt; {&#10;    switch (currentView) {&#10;      case 'feed':&#10;        return 'Feed principale';&#10;      case 'detail':&#10;        return `Dettaglio gem: ${selectedGem?.title || 'Sconosciuto'}`;&#10;      case 'saved':&#10;        return 'Liste salvate';&#10;      case 'profile':&#10;        return 'Profilo utente';&#10;      case 'dashboard':&#10;        return 'Dashboard amministratore';&#10;      case 'topics':&#10;        return 'Gestione argomenti';&#10;      default:&#10;        return 'Sezione sconosciuta';&#10;    }&#10;  };&#10;&#10;  const handleFeedbackSubmit = async (section: string, message: string) =&gt; {&#10;    if (!firebaseUser || !user) return;&#10;&#10;    try {&#10;      const userName = `${user.firstName} ${user.lastName}`;&#10;      await feedbackService.createFeedback(&#10;        firebaseUser.uid,&#10;        user.email,&#10;        userName,&#10;        section,&#10;        message&#10;      );&#10;      // Mostra animazione di successo sul pulsante invece dell'alert&#10;      if (feedbackButtonRef.current?.showSuccess) {&#10;        feedbackButtonRef.current.showSuccess();&#10;      }&#10;    } catch (error) {&#10;      console.error('Errore nell\'invio del feedback:', error);&#10;      throw error; // Permette alla modale di gestire l'errore&#10;    }&#10;  };&#10;&#10;  const filteredGems = useMemo(() =&gt; {&#10;    if (filter.type === 'all') return gems;&#10;    if (filter.type === 'channel') return gems.filter(g =&gt; g.channelId === filter.id);&#10;    if (filter.type === 'topic') return gems.filter(g =&gt; g.topic === filter.id);&#10;    if (filter.type === 'tag') return gems.filter(g =&gt; g.tags?.includes(filter.id));&#10;    return gems;&#10;  }, [gems, filter]);&#10;&#10;  // Effetto per l'Intersection Observer della modale di onboarding&#10;  useEffect(() =&gt; {&#10;    // Attiva l'observer solo se l'utente non è loggato e non ha già visto la modale in questa sessione&#10;    if (firebaseUser || hasSeenOnboarding || isLoading) {&#10;      return;&#10;    }&#10;&#10;    const observer = new IntersectionObserver(&#10;      (entries) =&gt; {&#10;        if (entries[0].isIntersecting) {&#10;          setShowOnboardingModal(true);&#10;          setHasSeenOnboarding(true);&#10;          observer.disconnect(); // Smette di osservare dopo aver mostrato la modale una volta&#10;        }&#10;      },&#10;      {&#10;        root: null, // Osserva rispetto al viewport&#10;        threshold: 0.5, // Si attiva quando il 50% dell'elemento è visibile&#10;      }&#10;    );&#10;&#10;    const trigger = onboardingTriggerRef.current;&#10;    if (trigger) {&#10;      observer.observe(trigger);&#10;    }&#10;&#10;    return () =&gt; {&#10;      if (trigger) {&#10;        observer.unobserve(trigger);&#10;      }&#10;    };&#10;  }, [firebaseUser, hasSeenOnboarding, isLoading, filteredGems]); // Le dipendenze assicurano che l'observer si riattivi se il filtro cambia&#10;&#10;&#10;  // Verifica se l'utente può vedere il pulsante feedback&#10;  const canShowFeedbackButton = useMemo(() =&gt; {&#10;    return user &amp;&amp; (user.role === UserRole.ADMIN || user.role === UserRole.BETATESTER);&#10;  }, [user]);&#10;&#10;  /* HO SPOSTATO LA DICHIARAZIONE DI filteredGems PRIMA DELLO USEEFFECT PER RISOLVERE IL BUG */&#10;&#10;  // Limita le gems visualizzate per utenti non loggati&#10;  const GEMS_LIMIT_FOR_UNLOGGED_USERS = 7;&#10;  const displayedGems = !firebaseUser&#10;    ? filteredGems.slice(0, GEMS_LIMIT_FOR_UNLOGGED_USERS)&#10;    : filteredGems;&#10;&#10;  const selectedGem = gems.find(gem =&gt; gem.id === selectedGemId);&#10;&#10;  const renderFeed = () =&gt; (&#10;    &lt;&gt;&#10;        &lt;Header&#10;            isLoggedIn={!!firebaseUser}&#10;            user={user}&#10;            onLogin={() =&gt; setShowLoginModal(true)}&#10;            onLogout={handleLogout}&#10;            selectedFilter={filter}&#10;            onSelectFilter={setFilter}&#10;            onNavigate={handleNavigate}&#10;            channels={channels}&#10;        /&gt;&#10;        &lt;main className=&quot;max-w-xl mx-auto py-8 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {isLoading &amp;&amp; gems.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center text-center text-slate-500 dark:text-slate-400 pt-20&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-16 h-16 animate-pulse text-indigo-400&quot;/&gt;&#10;            &lt;p className=&quot;mt-4 text-lg font-semibold&quot;&gt;Stiamo preparando Curiow per te...&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm&quot;&gt;Un momento, stiamo cercando spunti interessanti.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {displayedGems.length &gt; 0 ? (&#10;                &lt;&gt;&#10;                  {displayedGems.map((gem, index) =&gt; (&#10;                      &lt;React.Fragment key={gem.id}&gt;&#10;                        &lt;GemCard&#10;                          gem={gem}&#10;                          isLoggedIn={!!firebaseUser}&#10;                          isFavorite={allFavoriteIds.includes(gem.id)}&#10;                          onSaveRequest={handleSaveRequest}&#10;                          onSelect={handleSelectGem}&#10;                          onLoginRequest={handleLoginRequest}&#10;                        /&gt;&#10;                        {/* Trigger per la modale di onboarding dopo la 4a card per utenti non loggati */}&#10;                        {!firebaseUser &amp;&amp; index === 3 &amp;&amp; !hasSeenOnboarding &amp;&amp; (&#10;                          &lt;div ref={onboardingTriggerRef} style={{ height: '1px' }} /&gt;&#10;                        )}&#10;                      &lt;/React.Fragment&gt;&#10;                  ))}&#10;                  {/* Mostra il blocco di invito al login se l'utente non è loggato e ci sono più gemme disponibili */}&#10;                  {!firebaseUser &amp;&amp; filteredGems.length &gt; GEMS_LIMIT_FOR_UNLOGGED_USERS &amp;&amp; (&#10;                    &lt;div className=&quot;p-8 text-center bg-gradient-to-br from-indigo-900 via-purple-900 to-slate-900 rounded-2xl shadow-2xl my-8&quot;&gt;&#10;                      &lt;h2 className=&quot;text-3xl font-bold text-white mb-3&quot;&gt;Continua a scoprire&lt;/h2&gt;&#10;                      &lt;p className=&quot;text-indigo-300 text-lg mb-6&quot;&gt;&#10;                        Registrati o accedi per sbloccare tutti i contenuti e salvare le tue gemme preferite.&#10;                      &lt;/p&gt;&#10;                      &lt;div className=&quot;flex flex-col sm:flex-row justify-center gap-4&quot;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; setShowLoginModal(true)}&#10;                          className=&quot;w-full sm:w-auto bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-bold py-3 px-8 rounded-full transition-all duration-300 shadow-lg transform hover:scale-105&quot;&#10;                        &gt;&#10;                          Registrati o Accedi&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/&gt;&#10;            ) : (&#10;                &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma trovata&lt;/h3&gt;&#10;                    &lt;p className=&quot;mt-2&quot;&gt;Prova a selezionare un'altra categoria o filtro.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  const renderContent = () =&gt; {&#10;    switch (currentView) {&#10;        case 'saved':&#10;            return firebaseUser ? &lt;SavedView&#10;                        allGems={gems}&#10;                        allFavoriteIds={allFavoriteIds}&#10;                        savedLists={userLists}&#10;                        onUpdateLists={updateUserLists}&#10;                        onSelectGem={handleSelectGem}&#10;                        onToggleFavorite={handleToggleFavorite}&#10;                        onLoginRequest={handleLoginRequest}&#10;                        onBack={() =&gt; handleNavigate('feed')}&#10;                        onCreateList={handleCreateNewList}&#10;                    /&gt; : renderFeed();&#10;        case 'profile':&#10;            return firebaseUser &amp;&amp; user ? &lt;ProfileView user={user} onUpdateUser={handleUpdateUser} onBack={() =&gt; handleNavigate('feed')} onNavigate={handleNavigate} /&gt; : renderFeed();&#10;        case 'dashboard':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;AdminDashboard&#10;                    currentUser={{ ...user, id: firebaseUser.uid }}&#10;                    onClose={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'topics':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;TopicManagement&#10;                    currentUser={{ ...user, uid: firebaseUser.uid }}&#10;                    onBack={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'feed':&#10;        default:&#10;            return renderFeed();&#10;    }&#10;  }&#10;&#10;  const handleOnboardingLogin = () =&gt; {&#10;    setShowOnboardingModal(false);&#10;    setShowLoginModal(true);&#10;  };&#10;&#10;  const handleOnboardingSignUp = () =&gt; {&#10;    setShowOnboardingModal(false);&#10;    setShowLoginModal(true);&#10;  };&#10;&#10;  const handleBackToFeed = () =&gt; {&#10;    setShowGemDetailModal(false);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;        {renderContent()}&#10;&#10;        {/* Pulsante feedback flottante per admin e betatester */}&#10;        {canShowFeedbackButton &amp;&amp; (&#10;          &lt;FeedbackButton&#10;            ref={feedbackButtonRef}&#10;            onClick={() =&gt; setShowFeedbackModal(true)}&#10;          /&gt;&#10;        )}&#10;&#10;        {showLoginModal &amp;&amp; &lt;LoginModal&#10;            onLoginAttempt={handleLoginAttempt}&#10;            onSignUpAttempt={handleSignUpAttempt}&#10;            onGoogleAuth={handleGoogleAuth}&#10;            onCancel={() =&gt; setShowLoginModal(false)}&#10;        /&gt;}&#10;&#10;        {showOnboardingModal &amp;&amp; (&#10;          &lt;OnboardingModal&#10;            isOpen={showOnboardingModal}&#10;            onLoginRequest={handleOnboardingLogin}&#10;            onSignUpRequest={handleOnboardingSignUp}&#10;            onClose={() =&gt; setShowOnboardingModal(false)}&#10;          /&gt;&#10;        )}&#10;&#10;        {showFeedbackModal &amp;&amp; (&#10;          &lt;FeedbackModal&#10;            section={getCurrentSection()}&#10;            onSubmit={handleFeedbackSubmit}&#10;            onCancel={() =&gt; setShowFeedbackModal(false)}&#10;            onSuccess={() =&gt; {&#10;              if (feedbackButtonRef.current?.showSuccess) {&#10;                feedbackButtonRef.current.showSuccess();&#10;              }&#10;            }}&#10;          /&gt;&#10;        )}&#10;&#10;        {isSaveModalOpen &amp;&amp; gemToSaveId &amp;&amp; (&#10;            &lt;SaveToListModal&#10;                isOpen={isSaveModalOpen}&#10;                onClose={() =&gt; setIsSaveModalOpen(false)}&#10;                lists={userLists.filter(l =&gt; l.id !== 'default')}&#10;                gemId={gemToSaveId}&#10;                onSaveToList={handleSaveToList}&#10;                onCreateAndSave={handleCreateListAndSave}&#10;                onToggleDefaultFavorite={handleToggleFavorite}&#10;                isSavedToDefault={userLists.find(l=&gt;l.id==='default')?.gemIds.includes(gemToSaveId) ?? false}&#10;            /&gt;&#10;        )}&#10;&#10;        {/* Modale dettaglio gem a schermo intero */}&#10;        {showGemDetailModal &amp;&amp; selectedGem &amp;&amp; (&#10;            &lt;div className=&quot;fixed inset-0 z-50 bg-slate-50 dark:bg-slate-900 overflow-y-auto&quot;&gt;&#10;                &lt;GemDetailView&#10;                    gem={selectedGem}&#10;                    isFavorite={allFavoriteIds.includes(selectedGem.id)}&#10;                    onBack={handleBackToFeed}&#10;                    onSaveRequest={handleSaveRequest}&#10;                    onAddUserQuestion={handleAddUserQuestion}&#10;                    onTagSelect={handleSelectTag}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/FeedbackModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/FeedbackModal.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;&#10;interface FeedbackModalProps {&#10;  section: string;&#10;  onSubmit: (message: string) =&gt; Promise&lt;void&gt;;&#10;  onCancel: () =&gt; void;&#10;  onSuccess?: () =&gt; void;&#10;}&#10;&#10;const FeedbackModal: React.FC&lt;FeedbackModalProps&gt; = ({ section, onSubmit, onCancel, onSuccess }) =&gt; {&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;&#10;interface FeedbackModalProps {&#10;  section: string;&#10;  onSubmit: (section: string, message: string) =&gt; Promise&lt;void&gt;;&#10;  onCancel: () =&gt; void;&#10;  onSuccess?: () =&gt; void;&#10;}&#10;&#10;const FeedbackModal: React.FC&lt;FeedbackModalProps&gt; = ({ section, onSubmit, onCancel, onSuccess }) =&gt; {&#10;  const [currentSection, setCurrentSection] = useState(section);&#10;  const [message, setMessage] = useState('');&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [error, setError] = useState('');&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    &#10;    if (!currentSection.trim()) {&#10;      setError('Inserisci una sezione');&#10;      return;&#10;    }&#10;    &#10;    if (!message.trim()) {&#10;      setError('Inserisci un messaggio di feedback');&#10;      return;&#10;    }&#10;&#10;    setIsLoading(true);&#10;    setError('');&#10;&#10;    try {&#10;      await onSubmit(currentSection.trim(), message.trim());&#10;      onSuccess?.(); // Chiama il callback onSuccess se fornito&#10;      onCancel(); // Chiudi la modale dopo il successo&#10;    } catch (err) {&#10;      setError('Errore nell\'invio del feedback. Riprova.');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-xl max-w-md w-full max-h-[90vh] overflow-y-auto&quot;&gt;&#10;        &lt;div className=&quot;p-6&quot;&gt;&#10;          &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;            &lt;h2 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Feedback Betatester&lt;/h2&gt;&#10;            &lt;button&#10;              onClick={onCancel}&#10;              className=&quot;text-gray-400 hover:text-gray-600 transition-colors&quot;&#10;              disabled={isLoading}&#10;            &gt;&#10;              &lt;svg className=&quot;w-6 h-6&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; strokeWidth={2} d=&quot;M6 18L18 6M6 6l12 12&quot; /&gt;&#10;              &lt;/svg&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;feedback-section&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Sezione *&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                id=&quot;feedback-section&quot;&#10;                type=&quot;text&quot;&#10;                value={currentSection}&#10;                onChange={(e) =&gt; setCurrentSection(e.target.value)}&#10;                placeholder=&quot;Es. Feed principale, Dettaglio gem, ecc.&quot;&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                disabled={isLoading}&#10;                maxLength={100}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;feedback-message&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Messaggio di feedback *&#10;              &lt;/label&gt;&#10;              &lt;textarea&#10;                id=&quot;feedback-message&quot;&#10;                value={message}&#10;                onChange={(e) =&gt; setMessage(e.target.value)}&#10;                placeholder=&quot;Descrivi il tuo feedback, suggerimenti o problemi riscontrati...&quot;&#10;                rows={6}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none&quot;&#10;                disabled={isLoading}&#10;                maxLength={2000}&#10;              /&gt;&#10;              &lt;div className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                {message.length}/2000 caratteri&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;text-red-600 text-sm bg-red-50 p-3 rounded-lg&quot;&gt;&#10;                {error}&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            &lt;div className=&quot;flex space-x-3 pt-4&quot;&gt;&#10;              &lt;button&#10;                type=&quot;button&quot;&#10;                onClick={onCancel}&#10;                className=&quot;flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors&quot;&#10;                disabled={isLoading}&#10;              &gt;&#10;                Annulla&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                disabled={isLoading || !message.trim()}&#10;                className=&quot;flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors&quot;&#10;              &gt;&#10;                {isLoading ? 'Invio...' : 'Invia Feedback'}&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default FeedbackModal;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemCard.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon } from './icons';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onSelect, onLoginRequest }) =&gt; {&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onSelect, onLoginRequest }) =&gt; {&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onSelect, onLoginRequest }) =&gt; {&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        onSaveRequest(gem.id);&#10;    }&#10;  };&#10;  &#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;        alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;    }&#10;  };&#10;&#10;  return (&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;        &lt;/div&gt;&#10;                    &lt;/span&gt;&#10;};&#10;&#10;export default GemCard;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon } from './icons';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onSelect, onLoginRequest, onView }) =&gt; {&#10;&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        onSaveRequest(gem.id);&#10;    }&#10;  };&#10;  &#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;        alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;    }&#10;  };&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  return (&#10;    &lt;div &#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;      &#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={handleShareClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                title=&quot;Condividi&quot;&#10;                aria-label=&quot;Condividi gemma&quot;&#10;              &gt;&#10;                  &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;              &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                    &lt;/span&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header.tsx" />
              <option name="originalContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { TOPICS } from '../constants';&#10;import { Topic, Channel, Filter, User } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, TagIcon, ChevronDownIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  selectedFilter: Filter;&#10;  onSelectFilter: (filter: Filter) =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  channels: Channel[];&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({ isLoggedIn, user, onLogin, onLogout, selectedFilter, onSelectFilter, onNavigate, channels }) =&gt; {&#10;  const [showProfileMenu, setShowProfileMenu] = useState(false);&#10;  const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  const permissions = useUserPermissions(user);&#10;&#10;" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { TOPICS } from '../constants';&#10;import { Topic, Channel, Filter, User } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, TagIcon, ChevronDownIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  selectedFilter: Filter;&#10;  onSelectFilter: (filter: Filter) =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  channels: Channel[];&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({ isLoggedIn, user, onLogin, onLogout, selectedFilter, onSelectFilter, onNavigate, channels }) =&gt; {&#10;  const [showProfileMenu, setShowProfileMenu] = useState(false);&#10;  const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  &#10;  const permissions = useUserPermissions(user);&#10;&#10;  // Debug log per controllare i permessi&#10;  useEffect(() =&gt; {&#10;    console.log('Header - User:', user);&#10;    console.log('Header - Permissions:', permissions);&#10;  }, [user, permissions]);&#10;&#10;  // Chiudi il menu quando si clicca fuori&#10;  useEffect(() =&gt; {&#10;    const handleClickOutside = (event: MouseEvent) =&gt; {&#10;      if (menuRef.current &amp;&amp; !menuRef.current.contains(event.target as Node)) {&#10;        setShowProfileMenu(false);&#10;      }&#10;    };&#10;&#10;    document.addEventListener('mousedown', handleClickOutside);&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleClickOutside);&#10;    };&#10;  }, []);&#10;&#10;  const handleMenuItemClick = (view: 'profile' | 'dashboard' | 'topics') =&gt; {&#10;    setShowProfileMenu(false);&#10;    onNavigate(view);&#10;  };&#10;&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;    &#10;    if (selectedFilter.type === filter.type &amp;&amp; ('value' in selectedFilter &amp;&amp; 'value' in filter ? selectedFilter.value === filter.value : true)) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-md`;&#10;    }&#10;    return `${baseClass} bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700`;&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-30 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;      &lt;div className=&quot;max-w-5xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;          &lt;button onClick={() =&gt; { onSelectFilter({ type: 'all' }); onNavigate('feed'); }} className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-7 h-7 text-indigo-500&quot; /&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Curiow&lt;/h1&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 sm:space-x-4&quot;&gt;&#10;             {isLoggedIn &amp;&amp; (&#10;                 &lt;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; {&#10;                            console.log('Saved button clicked');&#10;                            onNavigate('saved');&#10;                        }}&#10;                        title=&quot;Liste Salvate&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={(e) =&gt; {&#10;                            e.preventDefault();&#10;                            e.stopPropagation();&#10;                            onNavigate('profile');&#10;                        }}&#10;                        title=&quot;Profilo e Impostazioni&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;Cog6ToothIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                 &lt;/&gt;&#10;             )}&#10;             {isLoggedIn ? (&#10;                &lt;div className=&quot;relative&quot; ref={menuRef}&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowProfileMenu(!showProfileMenu)}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                  &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Profilo&lt;/span&gt;&#10;                    &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${showProfileMenu ? 'rotate-180' : ''}`} /&gt;&#10;                  &lt;/button&gt;&#10;                  {showProfileMenu &amp;&amp; (&#10;                    &lt;div className=&quot;absolute right-0 z-20 mt-2 w-48 bg-white dark:bg-slate-800 rounded-md shadow-lg overflow-hidden&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; handleMenuItemClick('profile')}&#10;                        className=&quot;block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&#10;                      &gt;&#10;                        Profilo&#10;                      &lt;/button&gt;&#10;                      {permissions.canViewDashboard &amp;&amp; (&#10;                        &lt;button&#10;                          onClick={() =&gt; handleMenuItemClick('dashboard')}&#10;                          className=&quot;block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&#10;                        &gt;&#10;                          Dashboard&#10;                        &lt;/button&gt;&#10;                      )}&#10;                      &lt;div className=&quot;border-t border-slate-200 dark:border-slate-700&quot;&gt;&lt;/div&gt;&#10;                      &lt;button&#10;                        onClick={onLogout}&#10;                        className=&quot;block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900&quot;&#10;                      &gt;&#10;                        Logout&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;             ) : (&#10;                &lt;button&#10;                    onClick={onLogin}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Login&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;pb-4 overflow-x-auto&quot;&gt;&#10;            &lt;nav className=&quot;flex items-center space-x-2 sm:space-x-3&quot;&gt;&#10;                &lt;button onClick={() =&gt; onSelectFilter({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                {isLoggedIn &amp;&amp; &lt;button onClick={() =&gt; onSelectFilter({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;Preferiti&lt;/button&gt;}&#10;                {selectedFilter.type === 'tag' &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Tag&lt;/span&gt;&#10;                    &lt;button onClick={() =&gt; {}} className={getButtonClass(selectedFilter)}&gt;&#10;                      &lt;TagIcon className=&quot;w-3 h-3 inline-block mr-1.5&quot;/&gt;{selectedFilter.value}&#10;                    &lt;/button&gt;&#10;                  &lt;/&gt;&#10;                )}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Canali&lt;/span&gt;&#10;                {channels.map(channel =&gt; (&#10;                    &lt;button key={channel.id} onClick={() =&gt; onSelectFilter({type: 'channel', value: channel.id})} className={getButtonClass({type: 'channel', value: channel.id})}&gt;&#10;                        {channel.emoji} {channel.name}&#10;                    &lt;/button&gt;&#10;                ))}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Argomenti&lt;/span&gt;&#10;                {TOPICS.map(topic =&gt; (&#10;                    &lt;button key={topic} onClick={() =&gt; onSelectFilter({type: 'topic', value: topic})} className={getButtonClass({type: 'topic', value: topic})}&gt;&#10;                        {topic.split(' ')[0]}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Header;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SavedView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SavedView.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { ListWithItems, Gem } from '../types';&#10;import { ChevronLeftIcon, PlusCircleIcon } from './icons';&#10;import GemCard from './GemCard';&#10;&#10;interface SavedViewProps {&#10;    allGems: Gem[];&#10;    allFavoriteIds: string[];&#10;    savedLists: ListWithItems[];&#10;    onUpdateLists: (lists: ListWithItems[]) =&gt; void;&#10;    onSelectGem: (gemId: string) =&gt; void;&#10;    onToggleFavorite: (gemId: string) =&gt; void;&#10;    onLoginRequest: () =&gt; void;&#10;    onBack: () =&gt; void;&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack }) =&gt; {&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack }) =&gt; {&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack }) =&gt; {&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack }) =&gt; {&#10;    const handleCreateList = (e: React.FormEvent) =&gt; {&#10;    const handleCreateList = (e: React.FormEvent) =&gt; {&#10;    const handleCreateList = (e: React.FormEvent) =&gt; {&#10;    const handleCreateList = (e: React.FormEvent) =&gt; {&#10;            // Ora utilizziamo il tipo ListWithItems invece di SavedList&#10;            // Ora utilizziamo il tipo ListWithItems invece di SavedList&#10;            // Ora utilizziamo il tipo ListWithItems invece di SavedList&#10;            const newList: ListWithItems = {&#10;                id: self.crypto.randomUUID(),&#10;                name: newListName.trim(),&#10;                isPublic: false,&#10;                createdBy: 'current-user', // Questo sarà gestito dall'App.tsx&#10;                createdAt: new Date(),&#10;                updatedAt: new Date(),&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;        }&#10;    };&#10;    &#10;    const getGemsForList = (): Gem[] =&gt; {&#10;        if (selectedListId === 'all') {&#10;            return allGems.filter(gem =&gt; allFavoriteIds.includes(gem.id));&#10;        }&#10;        const list = savedLists.find(l =&gt; l.id === selectedListId);&#10;        return list ? allGems.filter(gem =&gt; list.gemIds.includes(gem.id)) : [];&#10;    };&#10;&#10;    const getButtonClass = (id: string) =&gt; {&#10;        const baseClass = 'px-4 py-2 text-sm font-semibold rounded-lg transition-colors duration-200 text-left';&#10;        if (selectedListId === id) {&#10;            return `${baseClass} bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300`;&#10;        }&#10;        return `${baseClass} text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800`;&#10;    };&#10;&#10;    const gemsInView = getGemsForList();&#10;&#10;    return (&#10;        &lt;div className=&quot;max-w-5xl mx-auto&quot;&gt;&#10;            &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;                &lt;button&#10;                    onClick={onBack}&#10;                    className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Le tue Liste&lt;/h1&gt;&#10;            &lt;/header&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col md:flex-row&quot;&gt;&#10;                &lt;aside className=&quot;w-full md:w-64 lg:w-72 p-4 border-b md:border-b-0 md:border-r border-slate-200 dark:border-slate-700&quot;&gt;&#10;                    &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Liste&lt;/h2&gt;&#10;                    &lt;nav className=&quot;mt-4 flex flex-col space-y-1&quot;&gt;&#10;                        &lt;button onClick={() =&gt; setSelectedListId('all')} className={getButtonClass('all')}&gt;&#10;                            Tutti i Preferiti ({allFavoriteIds.length})&#10;                        &lt;/button&gt;&#10;                        {userLists.map(list =&gt; (&#10;                             &lt;button key={list.id} onClick={() =&gt; setSelectedListId(list.id)} className={getButtonClass(list.id)}&gt;&#10;                                {list.name} ({list.gemIds.length})&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/nav&gt;&#10;&#10;                    &lt;form onSubmit={handleCreateList} className=&quot;mt-6&quot;&gt;&#10;                         &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Nuova Lista&lt;/h2&gt;&#10;                         &lt;div className=&quot;mt-2 flex space-x-2&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                value={newListName}&#10;                                onChange={(e) =&gt; setNewListName(e.target.value)}&#10;                                placeholder=&quot;Nome della lista...&quot;&#10;                                className=&quot;flex-grow bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md py-1.5 px-3 text-sm text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-1 focus:ring-indigo-500&quot;&#10;                            /&gt;&#10;                            &lt;button type=&quot;submit&quot; className=&quot;p-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-indigo-400&quot; disabled={!newListName.trim()}&gt;&#10;                                &lt;PlusCircleIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                            &lt;/button&gt;&#10;                         &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/aside&gt;&#10;                &#10;                &lt;main className=&quot;flex-1 p-4 sm:p-6 lg:p-8&quot;&gt;&#10;                    {gemsInView.length &gt; 0 ? (&#10;                        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-8 max-w-xl mx-auto&quot;&gt;&#10;                           {gemsInView.map(gem =&gt; (&#10;                                &lt;GemCard&#10;                                    key={gem.id}&#10;                                    gem={gem}&#10;                                    isLoggedIn={true}&#10;                                    isFavorite={allFavoriteIds.includes(gem.id)}&#10;                                    onSaveRequest={onToggleFavorite} /* Using onToggleFavorite here to just remove from all lists */&#10;                                    onSelect={onSelectGem}&#10;                                    onLoginRequest={onLoginRequest}&#10;                                /&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                            &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma in questa lista&lt;/h3&gt;&#10;                            &lt;p className=&quot;mt-2 max-w-md mx-auto&quot;&gt;&#10;                                {selectedListId === 'all' &#10;                                    ? &quot;Salva le tue gemme preferite cliccando sul cuore. Le troverai tutte qui.&quot;&#10;                                    : &quot;Aggiungi gemme a questa lista dalla loro pagina di dettaglio o dal popup di salvataggio.&quot;&#10;                                }&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/main&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default SavedView;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { ListWithItems, Gem } from '../types';&#10;import { ChevronLeftIcon, PlusCircleIcon } from './icons';&#10;import GemCard from './GemCard';&#10;&#10;interface SavedViewProps {&#10;    allGems: Gem[];&#10;    allFavoriteIds: string[];&#10;    savedLists: ListWithItems[];&#10;    onUpdateLists: (lists: ListWithItems[]) =&gt; void;&#10;    onSelectGem: (gemId: string) =&gt; void;&#10;    onToggleFavorite: (gemId: string) =&gt; void;&#10;    onLoginRequest: () =&gt; void;&#10;    onBack: () =&gt; void;&#10;    onCreateList: (listName: string) =&gt; Promise&lt;void&gt;; // Nuova prop per creare liste&#10;}&#10;&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack, onCreateList }) =&gt; {&#10;    const [newListName, setNewListName] = useState('');&#10;    const userLists = savedLists.filter(l =&gt; l.id !== 'default');&#10;    const [selectedListId, setSelectedListId] = useState&lt;string&gt;('all');&#10;&#10;    const handleCreateList = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        if (newListName.trim()) {&#10;            try {&#10;                await onCreateList(newListName.trim()); // Usa solo il servizio&#10;                setNewListName('');&#10;            } catch (error) {&#10;                console.error('Error creating list:', error);&#10;                alert('Errore nella creazione della lista');&#10;            }&#10;        }&#10;    };&#10;    &#10;    const getGemsForList = (): Gem[] =&gt; {&#10;        if (selectedListId === 'all') {&#10;            return allGems.filter(gem =&gt; allFavoriteIds.includes(gem.id));&#10;        }&#10;        const list = savedLists.find(l =&gt; l.id === selectedListId);&#10;        return list ? allGems.filter(gem =&gt; list.gemIds.includes(gem.id)) : [];&#10;    };&#10;&#10;    const getButtonClass = (id: string) =&gt; {&#10;        const baseClass = 'px-4 py-2 text-sm font-semibold rounded-lg transition-colors duration-200 text-left';&#10;        if (selectedListId === id) {&#10;            return `${baseClass} bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300`;&#10;        }&#10;        return `${baseClass} text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800`;&#10;    };&#10;&#10;    const gemsInView = getGemsForList();&#10;&#10;    return (&#10;        &lt;div className=&quot;max-w-5xl mx-auto&quot;&gt;&#10;            &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;                &lt;button&#10;                    onClick={onBack}&#10;                    className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Le tue Liste&lt;/h1&gt;&#10;            &lt;/header&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col md:flex-row&quot;&gt;&#10;                &lt;aside className=&quot;w-full md:w-64 lg:w-72 p-4 border-b md:border-b-0 md:border-r border-slate-200 dark:border-slate-700&quot;&gt;&#10;                    &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Liste&lt;/h2&gt;&#10;                    &lt;nav className=&quot;mt-4 flex flex-col space-y-1&quot;&gt;&#10;                        &lt;button onClick={() =&gt; setSelectedListId('all')} className={getButtonClass('all')}&gt;&#10;                            Tutti i Preferiti ({allFavoriteIds.length})&#10;                        &lt;/button&gt;&#10;                        {userLists.map(list =&gt; (&#10;                             &lt;button key={list.id} onClick={() =&gt; setSelectedListId(list.id)} className={getButtonClass(list.id)}&gt;&#10;                                {list.name} ({list.gemIds.length})&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/nav&gt;&#10;&#10;                    &lt;form onSubmit={handleCreateList} className=&quot;mt-6&quot;&gt;&#10;                         &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Nuova Lista&lt;/h2&gt;&#10;                         &lt;div className=&quot;mt-2 flex space-x-2&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                value={newListName}&#10;                                onChange={(e) =&gt; setNewListName(e.target.value)}&#10;                                placeholder=&quot;Nome della lista...&quot;&#10;                                className=&quot;flex-grow bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md py-1.5 px-3 text-sm text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-1 focus:ring-indigo-500&quot;&#10;                            /&gt;&#10;                            &lt;button type=&quot;submit&quot; className=&quot;p-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-indigo-400&quot; disabled={!newListName.trim()}&gt;&#10;                                &lt;PlusCircleIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                            &lt;/button&gt;&#10;                         &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/aside&gt;&#10;                &#10;                &lt;main className=&quot;flex-1 p-4 sm:p-6 lg:p-8&quot;&gt;&#10;                    {gemsInView.length &gt; 0 ? (&#10;                        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-8 max-w-xl mx-auto&quot;&gt;&#10;                           {gemsInView.map(gem =&gt; (&#10;                                &lt;GemCard&#10;                                    key={gem.id}&#10;                                    gem={gem}&#10;                                    isLoggedIn={true}&#10;                                    isFavorite={allFavoriteIds.includes(gem.id)}&#10;                                    onSaveRequest={onToggleFavorite} /* Using onToggleFavorite here to just remove from all lists */&#10;                                    onSelect={onSelectGem}&#10;                                    onLoginRequest={onLoginRequest}&#10;                                /&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                            &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma in questa lista&lt;/h3&gt;&#10;                            &lt;p className=&quot;mt-2 max-w-md mx-auto&quot;&gt;&#10;                                {selectedListId === 'all' &#10;                                    ? &quot;Salva le tue gemme preferite cliccando sul cuore. Le troverai tutte qui.&quot;&#10;                                    : &quot;Aggiungi gemme a questa lista dalla loro pagina di dettaglio o dal popup di salvataggio.&quot;&#10;                                }&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/main&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default SavedView;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/AdminDashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/AdminDashboard.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { User, UserRole } from '../../types';&#10;import { useUserPermissions } from '../../services/roleService';&#10;import ProfileView from '../ProfileView';&#10;import UserManagement from './UserManagement';&#10;import TopicManagement from './TopicManagement';&#10;  onClose: () =&gt; void;&#10;}&#10;&#10;type DashboardView = 'profile' | 'users' | 'topics';&#10;type DashboardView = 'profile' | 'users' | 'topics';&#10;type DashboardView = 'profile' | 'users' | 'topics';&#10;type DashboardView = 'profile' | 'users' | 'topics';&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  const menuItems = [&#10;    {&#10;      id: 'profile' as DashboardView,&#10;      label: 'Il Mio Profilo',&#10;      icon: '',&#10;      description: 'Visualizza e modifica il tuo profilo',&#10;      allowedForAll: true,&#10;    },&#10;    {&#10;      id: 'topics' as DashboardView,&#10;      label: 'Gestione Argomenti',&#10;      icon: '',&#10;      description: 'Crea e gestisci gli argomenti per le gemme',&#10;      allowedForAll: false,&#10;      requiresAdmin: true,&#10;    },&#10;    {&#10;      id: 'users' as DashboardView,&#10;      label: 'Gestione Utenti',&#10;      icon: '',&#10;      description: 'Gestisci ruoli e permessi degli utenti',&#10;      allowedForAll: false,&#10;      requiresAdmin: true,&#10;    },&#10;&#10;    // Converti currentUser nel formato che si aspetta ProfileView&#10;              // TODO: Implementare aggiornamento utente nel dashboard&#10;              console.log('Aggiornamento utente nel dashboard:', updatedUser);&#10;            }}&#10;            onBack={() =&gt; setActiveView('profile')} // Rimane sulla stessa vista&#10;            onNavigate={() =&gt; {}} // Non naviga fuori dal dashboard&#10;          /&gt;&#10;        );&#10;      case 'users':&#10;        return permissions.isAdmin ? &lt;UserManagement currentUser={currentUser} /&gt; : null;&#10;      case 'topics':&#10;        return permissions.isAdmin ? (&#10;          &lt;TopicManagement&#10;            onBack={() =&gt; setActiveView('profile')} // Rimane sulla stessa vista&#10;            onBack={() =&gt; setActiveView('topics')} // Rimane nel dashboard&#10;          /&gt;&#10;        ) : null;&#10;      default:&#10;        return permissions.isAdmin ? &lt;UserManagement currentUser={currentUser} /&gt; : null;&#10;    }&#10;  };&#10;&#10;            onBack={() =&gt; setActiveView('profile')} // Rimane sulla stessa vista&#10;            onBack={() =&gt; setActiveView('topics')} // Rimane nel dashboard&#10;      case UserRole.ADMIN: return 'bg-red-100 text-red-800';&#10;      case UserRole.MODERATOR: return 'bg-yellow-100 text-yellow-800';&#10;    }&#10;        return permissions.isAdmin ? &lt;UserManagement currentUser={currentUser} /&gt; : null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-gray-50 z-50 overflow-hidden&quot;&gt;&#10;            onBack={() =&gt; setActiveView('profile')} // Rimane sulla stessa vista&#10;            onBack={() =&gt; setActiveView('topics')} // Rimane nel dashboard&#10;        &lt;div className=&quot;w-80 bg-white shadow-lg border-r border-gray-200 flex flex-col&quot;&gt;&#10;          {/* Header */}&#10;              &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Dashboard&lt;/h1&gt;&#10;        return permissions.isAdmin ? &lt;UserManagement currentUser={currentUser} /&gt; : null;&#10;                onClick={onClose}&#10;                className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100&quot;&#10;              &gt;&#10;                ✕&#10;            onBack={() =&gt; setActiveView('topics')} // Rimane nel dashboard&#10;            &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                  &lt;span className=&quot;text-blue-600 font-semibold text-lg&quot;&gt;&#10;                    {currentUser.firstName?.[0]}{currentUser.lastName?.[0]}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;font-medium text-gray-900&quot;&gt;&#10;                    {currentUser.firstName} {currentUser.lastName}&#10;                  &lt;/p&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getRoleBadgeColor(currentUser.role)}`}&gt;&#10;                      {currentUser.role}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Menu */}&#10;          &lt;nav className=&quot;flex-1 p-4&quot;&gt;&#10;            &lt;ul className=&quot;space-y-2&quot;&gt;&#10;              {visibleMenuItems.map((item) =&gt; (&#10;                &lt;li key={item.id}&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setActiveView(item.id)}&#10;                    className={`w-full text-left p-4 rounded-lg transition-colors ${&#10;                      activeView === item.id&#10;                        ? 'bg-blue-50 text-blue-700 border border-blue-200'&#10;                        : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'&#10;                    }`}&#10;                  &gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;span className=&quot;text-2xl&quot;&gt;{item.icon}&lt;/span&gt;&#10;                      &lt;div&gt;&#10;                        &lt;p className=&quot;font-medium&quot;&gt;{item.label}&lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{item.description}&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/li&gt;&#10;              ))}&#10;            &lt;/ul&gt;&#10;          &lt;/nav&gt;&#10;&#10;          {/* Footer */}&#10;          &lt;div className=&quot;p-4 border-t border-gray-200&quot;&gt;&#10;            &lt;p className=&quot;text-xs text-gray-500 text-center&quot;&gt;&#10;              Curiow Dashboard v1.0&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Main Content */}&#10;        &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#10;          {renderActiveView()}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#13;&#10;import { User, UserRole } from '../../types';&#13;&#10;import { useUserPermissions } from '../../services/roleService';&#13;&#10;import ProfileView from '../ProfileView';&#13;&#10;import UserManagement from './UserManagement';&#13;&#10;import TopicManagement from './TopicManagement';&#13;&#10;import FeedbackManagement from './FeedbackManagement';&#13;&#10;&#13;&#10;interface AdminDashboardProps {&#13;&#10;  currentUser: User &amp; { id: string } | null;&#13;&#10;  onClose: () =&gt; void;&#13;&#10;}&#13;&#10;&#13;&#10;type DashboardView = 'profile' | 'users' | 'topics' | 'feedback';&#13;&#10;&#13;&#10;const AdminDashboard: React.FC&lt;AdminDashboardProps&gt; = ({ currentUser, onClose }) =&gt; {&#13;&#10;  const [activeView, setActiveView] = useState&lt;DashboardView&gt;('profile');&#13;&#10;  const permissions = useUserPermissions(currentUser);&#13;&#10;&#13;&#10;  const menuItems = [&#13;&#10;    {&#13;&#10;      id: 'profile' as DashboardView,&#13;&#10;      label: 'Il Mio Profilo',&#13;&#10;      icon: '',&#13;&#10;      description: 'Visualizza e modifica il tuo profilo',&#13;&#10;      allowedForAll: true,&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'topics' as DashboardView,&#13;&#10;      label: 'Gestione Argomenti',&#13;&#10;      icon: '',&#13;&#10;      description: 'Crea e gestisci gli argomenti per le gemme',&#13;&#10;      allowedForAll: false,&#13;&#10;      requiresAdmin: true,&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'users' as DashboardView,&#13;&#10;      label: 'Gestione Utenti',&#13;&#10;      icon: '',&#13;&#10;      description: 'Gestisci ruoli e permessi degli utenti',&#13;&#10;      allowedForAll: false,&#13;&#10;      requiresAdmin: true,&#13;&#10;    },&#13;&#10;    {&#13;&#10;      id: 'feedback' as DashboardView,&#13;&#10;      label: 'Feedback Tester',&#13;&#10;      icon: '',&#13;&#10;      description: 'Visualizza e gestisci i feedback dei betatester',&#13;&#10;      allowedForAll: false,&#13;&#10;      requiresAdmin: true,&#13;&#10;    },&#13;&#10;  ];&#13;&#10;&#13;&#10;  const visibleMenuItems = menuItems.filter(item =&gt;&#13;&#10;    item.allowedForAll || (item.requiresAdmin &amp;&amp; permissions.isAdmin)&#13;&#10;  );&#13;&#10;&#13;&#10;  const renderActiveView = () =&gt; {&#13;&#10;    if (!currentUser) return null;&#13;&#10;&#13;&#10;    // Converti currentUser nel formato che si aspetta ProfileView&#13;&#10;    const userForProfileView: User = {&#13;&#10;      firstName: currentUser.firstName,&#13;&#10;      lastName: currentUser.lastName,&#13;&#10;      email: currentUser.email,&#13;&#10;      role: currentUser.role,&#13;&#10;      permissions: currentUser.permissions,&#13;&#10;      createdAt: currentUser.createdAt,&#13;&#10;      lastLoginAt: currentUser.lastLoginAt&#13;&#10;    };&#13;&#10;&#13;&#10;    switch (activeView) {&#13;&#10;      case 'profile':&#13;&#10;        return (&#13;&#10;          &lt;ProfileView&#13;&#10;            user={userForProfileView}&#13;&#10;            onUpdateUser={(updatedUser) =&gt; {&#13;&#10;              // TODO: Implementare aggiornamento utente nel dashboard&#13;&#10;              console.log('Aggiornamento utente nel dashboard:', updatedUser);&#13;&#10;            }}&#13;&#10;            onBack={onClose} // Corretto: torna al feed principale&#13;&#10;            onNavigate={() =&gt; {}} // Non naviga fuori dal dashboard&#13;&#10;          /&gt;&#13;&#10;        );&#13;&#10;      case 'users':&#13;&#10;        return permissions.isAdmin ? &lt;UserManagement currentUser={currentUser} onBack={onClose} /&gt; : null;&#13;&#10;      case 'topics':&#13;&#10;        return permissions.isAdmin ? (&#13;&#10;          &lt;TopicManagement&#13;&#10;            currentUser={{ ...currentUser, uid: currentUser.id }}&#13;&#10;            onBack={() =&gt; setActiveView('profile')}&#13;&#10;          /&gt;&#13;&#10;        ) : null;&#13;&#10;      case 'feedback':&#13;&#10;        return permissions.isAdmin ? &lt;FeedbackManagement /&gt; : null;&#13;&#10;      default:&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const getRoleBadgeColor = (role: UserRole) =&gt; {&#13;&#10;    switch (role) {&#13;&#10;      case UserRole.ADMIN: return 'bg-red-100 text-red-800';&#13;&#10;      case UserRole.MODERATOR: return 'bg-yellow-100 text-yellow-800';&#13;&#10;      case UserRole.USER: return 'bg-green-100 text-green-800';&#13;&#10;      default: return 'bg-gray-100 text-gray-800';&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;fixed inset-0 bg-gray-50 z-50 overflow-hidden&quot;&gt;&#13;&#10;      &lt;div className=&quot;h-full flex&quot;&gt;&#13;&#10;        {/* Sidebar */}&#13;&#10;        &lt;div className=&quot;w-80 bg-white shadow-lg border-r border-gray-200 flex flex-col&quot;&gt;&#13;&#10;          {/* Header */}&#13;&#10;          &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#13;&#10;              &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Dashboard&lt;/h1&gt;&#13;&#10;              &lt;button&#13;&#10;                onClick={onClose}&#13;&#10;                className=&quot;p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100&quot;&#13;&#10;              &gt;&#13;&#10;                ✕&#13;&#10;              &lt;/button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {currentUser &amp;&amp; (&#13;&#10;              &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#13;&#10;                &lt;div className=&quot;w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center&quot;&gt;&#13;&#10;                  &lt;span className=&quot;text-blue-600 font-semibold text-lg&quot;&gt;&#13;&#10;                    {currentUser.firstName?.[0]}{currentUser.lastName?.[0]}&#13;&#10;                  &lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div&gt;&#13;&#10;                  &lt;p className=&quot;font-medium text-gray-900&quot;&gt;&#13;&#10;                    {currentUser.firstName} {currentUser.lastName}&#13;&#10;                  &lt;/p&gt;&#13;&#10;                  &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#13;&#10;                    &lt;span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getRoleBadgeColor(currentUser.role)}`}&gt;&#13;&#10;                      {currentUser.role}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Menu */}&#13;&#10;          &lt;nav className=&quot;flex-1 p-4&quot;&gt;&#13;&#10;            &lt;ul className=&quot;space-y-2&quot;&gt;&#13;&#10;              {visibleMenuItems.map((item) =&gt; (&#13;&#10;                &lt;li key={item.id}&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setActiveView(item.id)}&#13;&#10;                    className={`w-full text-left p-4 rounded-lg transition-colors ${&#13;&#10;                      activeView === item.id&#13;&#10;                        ? 'bg-blue-50 text-blue-700 border border-blue-200'&#13;&#10;                        : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'&#13;&#10;                    }`}&#13;&#10;                  &gt;&#13;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#13;&#10;                      &lt;span className=&quot;text-2xl&quot;&gt;{item.icon}&lt;/span&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;p className=&quot;font-medium&quot;&gt;{item.label}&lt;/p&gt;&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{item.description}&lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/button&gt;&#13;&#10;                &lt;/li&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/ul&gt;&#13;&#10;          &lt;/nav&gt;&#13;&#10;&#13;&#10;          {/* Footer */}&#13;&#10;          &lt;div className=&quot;p-4 border-t border-gray-200&quot;&gt;&#13;&#10;            &lt;p className=&quot;text-xs text-gray-500 text-center&quot;&gt;&#13;&#10;              Curiow Dashboard v1.0&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Main Content */}&#13;&#10;        &lt;div className=&quot;flex-1 overflow-auto&quot;&gt;&#13;&#10;          {renderActiveView()}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default AdminDashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/FeedbackManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/FeedbackManagement.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { BetaFeedback } from '../../types';&#10;import * as feedbackService from '../../services/feedbackService';&#10;const FeedbackManagement: React.FC&lt;FeedbackManagementProps&gt; = ({ onBack }) =&gt; {&#10;  const [feedbacks, setFeedbacks] = useState&lt;BetaFeedback[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [error, setError] = useState('');&#10;&#10;  // Filtri&#10;  const [selectedSection, setSelectedSection] = useState('');&#10;  const [selectedUser, setSelectedUser] = useState('');&#10;  const [selectedStatus, setSelectedStatus] = useState('');&#10;  const [startDate, setStartDate] = useState('');&#10;  const [endDate, setEndDate] = useState('');&#10;&#10;  // Opzioni per i filtri&#10;  const [sections, setSections] = useState&lt;string[]&gt;([]);&#10;  const [users, setUsers] = useState&lt;Array&lt;{userId: string, userEmail: string}&gt;&gt;([]);&#10;&#10;  // Modal di conferma&#10;  const [confirmModal, setConfirmModal] = useState&lt;{&#10;    isOpen: boolean;&#10;    title: string;&#10;    message: string;&#10;    action: string;&#10;    onConfirm: () =&gt; void;&#10;  }&gt;({&#10;    isOpen: false,&#10;    title: '',&#10;    message: '',&#10;    action: '',&#10;    onConfirm: () =&gt; {}&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    loadInitialData();&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    loadFeedbacks();&#10;  }, [selectedSection, selectedUser, selectedStatus, startDate, endDate]);&#10;&#10;  const loadInitialData = async () =&gt; {&#10;    try {&#10;      const [sectionsData, usersData] = await Promise.all([&#10;        feedbackService.getUniqueSections(),&#10;        feedbackService.getUniqueUsers()&#10;      ]);&#10;      setSections(sectionsData);&#10;      setUsers(usersData);&#10;    } catch (err) {&#10;      console.error('Errore nel caricamento dei dati iniziali:', err);&#10;    }&#10;  };&#10;&#10;  const loadFeedbacks = async () =&gt; {&#10;    setIsLoading(true);&#10;    setError('');&#10;&#10;    try {&#10;      const filters: any = {};&#10;&#10;      if (selectedSection) filters.section = selectedSection;&#10;      if (selectedUser) filters.userId = selectedUser;&#10;      if (selectedStatus) filters.status = selectedStatus;&#10;      if (startDate) filters.startDate = new Date(startDate);&#10;      if (endDate) filters.endDate = new Date(endDate);&#10;&#10;      const data = await feedbackService.fetchFeedbacks(filters);&#10;      setFeedbacks(data);&#10;    } catch (err) {&#10;      setError('Errore nel caricamento dei feedback');&#10;      console.error('Errore nel caricamento dei feedback:', err);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const clearFilters = () =&gt; {&#10;    setSelectedSection('');&#10;    setSelectedUser('');&#10;    setSelectedStatus('');&#10;    setStartDate('');&#10;    setEndDate('');&#10;  };&#10;&#10;  const handleStatusChange = async (feedbackId: string, newStatus: 'inviato' | 'letto' | 'risolto') =&gt; {&#10;    try {&#10;      await feedbackService.updateFeedbackStatus(feedbackId, newStatus);&#10;      await loadFeedbacks(); // Ricarica i feedback&#10;    } catch (err) {&#10;      console.error('Errore nell\'aggiornamento dello stato:', err);&#10;      alert('Errore nell\'aggiornamento dello stato');&#10;    }&#10;  };&#10;&#10;  const handleDelete = (feedbackId: string) =&gt; {&#10;    setConfirmModal({&#10;      isOpen: true,&#10;      title: 'Elimina Feedback',&#10;      message: 'Sei sicuro di voler eliminare questo feedback? Questa azione non può essere annullata.',&#10;      action: 'Elimina',&#10;      onConfirm: async () =&gt; {&#10;        try {&#10;          await feedbackService.deleteFeedback(feedbackId);&#10;          await loadFeedbacks(); // Ricarica i feedback&#10;        } catch (err) {&#10;          console.error('Errore nell\'eliminazione del feedback:', err);&#10;          alert('Errore nell\'eliminazione del feedback');&#10;        }&#10;      }&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'inviato':&#10;        return 'bg-blue-100 text-blue-800';&#10;      case 'letto':&#10;        return 'bg-yellow-100 text-yellow-800';&#10;      case 'risolto':&#10;        return 'bg-green-100 text-green-800';&#10;      default:&#10;        return 'bg-gray-100 text-gray-800';&#10;    }&#10;  };&#10;&#10;  const formatDate = (date: Date) =&gt; {&#10;    return new Intl.DateTimeFormat('it-IT', {&#10;      year: 'numeric',&#10;      month: 'short',&#10;      day: 'numeric',&#10;      hour: '2-digit',&#10;      minute: '2-digit'&#10;    }).format(date);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;p-8 h-full bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto&quot;&gt;&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;        {/* Header */}&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { BetaFeedback } from '../../types';&#10;import * as feedbackService from '../../services/feedbackService';&#10;import { ChevronLeftIcon } from '../icons';&#10;&#10;interface FeedbackManagementProps {&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;// Modal di conferma per eliminazione&#10;interface ConfirmationModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  onConfirm: () =&gt; void;&#10;  title: string;&#10;  message: string;&#10;  action: string;&#10;}&#10;&#10;const ConfirmationModal: React.FC&lt;ConfirmationModalProps&gt; = ({&#10;  isOpen, onClose, onConfirm, title, message, action&#10;}) =&gt; {&#10;  if (!isOpen) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-lg max-w-md w-full p-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-2&quot;&gt;{title}&lt;/h3&gt;&#10;        &lt;p className=&quot;text-gray-600 mb-6&quot;&gt;{message}&lt;/p&gt;&#10;        &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={onClose}&#10;            className=&quot;px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors&quot;&#10;          &gt;&#10;            Annulla&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; {&#10;              onConfirm();&#10;              onClose();&#10;            }}&#10;            className=&quot;px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors&quot;&#10;          &gt;&#10;            {action}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;const FeedbackManagement: React.FC&lt;FeedbackManagementProps&gt; = ({ onBack }) =&gt; {&#10;  const [feedbacks, setFeedbacks] = useState&lt;BetaFeedback[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [error, setError] = useState('');&#10;&#10;  // Filtri&#10;  const [selectedSection, setSelectedSection] = useState('');&#10;  const [selectedUser, setSelectedUser] = useState('');&#10;  const [selectedStatus, setSelectedStatus] = useState('');&#10;  const [startDate, setStartDate] = useState('');&#10;  const [endDate, setEndDate] = useState('');&#10;&#10;  // Opzioni per i filtri&#10;  const [sections, setSections] = useState&lt;string[]&gt;([]);&#10;  const [users, setUsers] = useState&lt;Array&lt;{userId: string, userEmail: string}&gt;&gt;([]);&#10;&#10;  // Modal di conferma&#10;  const [confirmModal, setConfirmModal] = useState&lt;{&#10;    isOpen: boolean;&#10;    title: string;&#10;    message: string;&#10;    action: string;&#10;    onConfirm: () =&gt; void;&#10;  }&gt;({&#10;    isOpen: false,&#10;    title: '',&#10;    message: '',&#10;    action: '',&#10;    onConfirm: () =&gt; {}&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    loadInitialData();&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    loadFeedbacks();&#10;  }, [selectedSection, selectedUser, selectedStatus, startDate, endDate]);&#10;&#10;  const loadInitialData = async () =&gt; {&#10;    try {&#10;      const [sectionsData, usersData] = await Promise.all([&#10;        feedbackService.getUniqueSections(),&#10;        feedbackService.getUniqueUsers()&#10;      ]);&#10;      setSections(sectionsData);&#10;      setUsers(usersData);&#10;    } catch (err) {&#10;      console.error('Errore nel caricamento dei dati iniziali:', err);&#10;    }&#10;  };&#10;&#10;  const loadFeedbacks = async () =&gt; {&#10;    setIsLoading(true);&#10;    setError('');&#10;&#10;    try {&#10;      const filters: any = {};&#10;&#10;      if (selectedSection) filters.section = selectedSection;&#10;      if (selectedUser) filters.userId = selectedUser;&#10;      if (selectedStatus) filters.status = selectedStatus;&#10;      if (startDate) filters.startDate = new Date(startDate);&#10;      if (endDate) filters.endDate = new Date(endDate);&#10;&#10;      const data = await feedbackService.fetchFeedbacks(filters);&#10;      setFeedbacks(data);&#10;    } catch (err) {&#10;      setError('Errore nel caricamento dei feedback');&#10;      console.error('Errore nel caricamento dei feedback:', err);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const clearFilters = () =&gt; {&#10;    setSelectedSection('');&#10;    setSelectedUser('');&#10;    setSelectedStatus('');&#10;    setStartDate('');&#10;    setEndDate('');&#10;  };&#10;&#10;  const handleStatusChange = async (feedbackId: string, newStatus: 'inviato' | 'letto' | 'risolto') =&gt; {&#10;    try {&#10;      await feedbackService.updateFeedbackStatus(feedbackId, newStatus);&#10;      await loadFeedbacks(); // Ricarica i feedback&#10;    } catch (err) {&#10;      console.error('Errore nell\'aggiornamento dello stato:', err);&#10;      alert('Errore nell\'aggiornamento dello stato');&#10;    }&#10;  };&#10;&#10;  const handleDelete = (feedbackId: string) =&gt; {&#10;    setConfirmModal({&#10;      isOpen: true,&#10;      title: 'Elimina Feedback',&#10;      message: 'Sei sicuro di voler eliminare questo feedback? Questa azione non può essere annullata.',&#10;      action: 'Elimina',&#10;      onConfirm: async () =&gt; {&#10;        try {&#10;          await feedbackService.deleteFeedback(feedbackId);&#10;          await loadFeedbacks(); // Ricarica i feedback&#10;        } catch (err) {&#10;          console.error('Errore nell\'eliminazione del feedback:', err);&#10;          alert('Errore nell\'eliminazione del feedback');&#10;        }&#10;      }&#10;    });&#10;  };&#10;&#10;  const getStatusBadge = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'inviato':&#10;        return 'bg-blue-100 text-blue-800';&#10;      case 'letto':&#10;        return 'bg-yellow-100 text-yellow-800';&#10;      case 'risolto':&#10;        return 'bg-green-100 text-green-800';&#10;      default:&#10;        return 'bg-gray-100 text-gray-800';&#10;    }&#10;  };&#10;&#10;  const formatDate = (date: Date) =&gt; {&#10;    return new Intl.DateTimeFormat('it-IT', {&#10;      year: 'numeric',&#10;      month: 'short',&#10;      day: 'numeric',&#10;      hour: '2-digit',&#10;      minute: '2-digit'&#10;    }).format(date);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;p-8 h-full bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto&quot;&gt;&#10;        {/* Header con freccia di ritorno */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;div className=&quot;flex items-center mb-4&quot;&gt;&#10;            &lt;button&#10;              onClick={onBack}&#10;              className=&quot;flex items-center text-gray-600 hover:text-gray-900 transition-colors mr-4&quot;&#10;            &gt;&#10;              &lt;ChevronLeftIcon className=&quot;w-5 h-5 mr-1&quot; /&gt;&#10;              Torna alla Dashboard&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Feedback Tester&lt;/h1&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;&#10;            Gestisci i feedback ricevuti dai betatester per migliorare l'applicazione&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;mt-4 text-sm text-gray-600&quot;&gt;&#10;            {feedbacks.length} feedback totali&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filtri */}&#10;        &lt;div className=&quot;bg-white p-6 rounded-lg border border-gray-200 mb-6&quot;&gt;&#10;          &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Filtri&lt;/h3&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;section-filter&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Sezione&#10;              &lt;/label&gt;&#10;              &lt;select&#10;                id=&quot;section-filter&quot;&#10;                value={selectedSection}&#10;                onChange={(e) =&gt; setSelectedSection(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              &gt;&#10;                &lt;option value=&quot;&quot;&gt;Tutte le sezioni&lt;/option&gt;&#10;                {sections.map(section =&gt; (&#10;                  &lt;option key={section} value={section}&gt;{section}&lt;/option&gt;&#10;                ))}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;user-filter&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Utente&#10;              &lt;/label&gt;&#10;              &lt;select&#10;                id=&quot;user-filter&quot;&#10;                value={selectedUser}&#10;                onChange={(e) =&gt; setSelectedUser(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              &gt;&#10;                &lt;option value=&quot;&quot;&gt;Tutti gli utenti&lt;/option&gt;&#10;                {users.map(user =&gt; (&#10;                  &lt;option key={user.userId} value={user.userId}&gt;&#10;                    {user.userEmail}&#10;                  &lt;/option&gt;&#10;                ))}&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;status-filter&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Stato&#10;              &lt;/label&gt;&#10;              &lt;select&#10;                id=&quot;status-filter&quot;&#10;                value={selectedStatus}&#10;                onChange={(e) =&gt; setSelectedStatus(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              &gt;&#10;                &lt;option value=&quot;&quot;&gt;Tutti gli stati&lt;/option&gt;&#10;                &lt;option value=&quot;inviato&quot;&gt;Inviato&lt;/option&gt;&#10;                &lt;option value=&quot;letto&quot;&gt;Letto&lt;/option&gt;&#10;                &lt;option value=&quot;risolto&quot;&gt;Risolto&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;start-date&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Data inizio&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                id=&quot;start-date&quot;&#10;                type=&quot;date&quot;&#10;                value={startDate}&#10;                onChange={(e) =&gt; setStartDate(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;end-date&quot; className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                Data fine&#10;              &lt;/label&gt;&#10;              &lt;input&#10;                id=&quot;end-date&quot;&#10;                type=&quot;date&quot;&#10;                value={endDate}&#10;                onChange={(e) =&gt; setEndDate(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;mt-4&quot;&gt;&#10;            &lt;button&#10;              onClick={clearFilters}&#10;              className=&quot;px-4 py-2 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors&quot;&#10;            &gt;&#10;              Cancella filtri&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Lista feedback */}&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6&quot;&gt;&#10;            {error}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {isLoading ? (&#10;          &lt;div className=&quot;flex justify-center py-8&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {feedbacks.length === 0 ? (&#10;              &lt;div className=&quot;text-center py-8 text-gray-500 bg-white rounded-lg border border-gray-200&quot;&gt;&#10;                Nessun feedback trovato con i filtri selezionati&#10;              &lt;/div&gt;&#10;            ) : (&#10;              feedbacks.map(feedback =&gt; (&#10;                &lt;div key={feedback.id} className=&quot;bg-white border border-gray-200 rounded-lg p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex justify-between items-start mb-4&quot;&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4 mb-2&quot;&gt;&#10;                        &lt;span className=&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800&quot;&gt;&#10;                          {feedback.section}&#10;                        &lt;/span&gt;&#10;                        &lt;span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(feedback.status)}`}&gt;&#10;                          {feedback.status}&#10;                        &lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-600 mb-2&quot;&gt;&#10;                        &lt;span className=&quot;font-medium&quot;&gt;{feedback.userName}&lt;/span&gt;&#10;                        &lt;span&gt;{feedback.userEmail}&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;text-sm text-gray-500&quot;&gt;&#10;                        Creato: {formatDate(feedback.createdAt)}&#10;                        {feedback.updatedAt &amp;&amp; feedback.updatedAt.getTime() !== feedback.createdAt.getTime() &amp;&amp; (&#10;                          &lt;span className=&quot;ml-4&quot;&gt;&#10;                            Aggiornato: {formatDate(feedback.updatedAt)}&#10;                          &lt;/span&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2 ml-4&quot;&gt;&#10;                      &lt;select&#10;                        value={feedback.status}&#10;                        onChange={(e) =&gt; handleStatusChange(feedback.id, e.target.value as any)}&#10;                        className=&quot;text-sm px-2 py-1 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                      &gt;&#10;                        &lt;option value=&quot;inviato&quot;&gt;Inviato&lt;/option&gt;&#10;                        &lt;option value=&quot;letto&quot;&gt;Letto&lt;/option&gt;&#10;                        &lt;option value=&quot;risolto&quot;&gt;Risolto&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; handleDelete(feedback.id)}&#10;                        className=&quot;p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded transition-colors&quot;&#10;                        title=&quot;Elimina feedback&quot;&#10;                      &gt;&#10;                        &lt;svg className=&quot;w-4 h-4&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                          &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; strokeWidth={2} d=&quot;M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16&quot; /&gt;&#10;                        &lt;/svg&gt;&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;bg-gray-50 p-4 rounded-lg&quot;&gt;&#10;                    &lt;p className=&quot;text-gray-900 whitespace-pre-wrap&quot;&gt;&#10;                      {feedback.message}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Modal di conferma */}&#10;      &lt;ConfirmationModal&#10;        isOpen={confirmModal.isOpen}&#10;        onClose={() =&gt; setConfirmModal({ ...confirmModal, isOpen: false })}&#10;        onConfirm={confirmModal.onConfirm}&#10;        title={confirmModal.title}&#10;        message={confirmModal.message}&#10;        action={confirmModal.action}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default FeedbackManagement;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/TopicManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/TopicManagement.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { TopicSuggestion, UserRole } from '../../types';&#10;import {&#10;  fetchTopicSuggestions,&#10;  createTopicSuggestion,&#10;  updateTopicSuggestion,&#10;  deleteTopicSuggestion&#10;} from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;import { generateTopicSuggestionDetails } from '../../services/apiService';&#10;import { ChevronLeftIcon } from '../icons';&#10;&#10;interface TopicManagementProps {&#10;  currentUser: { role: UserRole; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;// Modal di conferma per cambio stato&#10;interface ConfirmationModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  onConfirm: () =&gt; void;&#10;  title: string;&#10;  message: string;&#10;  action: string;&#10;}&#10;&#10;const ConfirmationModal: React.FC&lt;ConfirmationModalProps&gt; = ({&#10;  isOpen, onClose, onConfirm, title, message, action&#10;}) =&gt; {&#10;  if (!isOpen) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-lg max-w-md w-full p-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-2&quot;&gt;{title}&lt;/h3&gt;&#10;        &lt;p className=&quot;text-gray-600 mb-6&quot;&gt;{message}&lt;/p&gt;&#10;        &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={onClose}&#10;            className=&quot;px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors&quot;&#10;          &gt;&#10;            Annulla&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; {&#10;              onConfirm();&#10;              onClose();&#10;            }}&#10;            className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;          &gt;&#10;            {action}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;const TopicManagement: React.FC&lt;TopicManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [topics, setTopics] = useState&lt;TopicSuggestion[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [showCreateModal, setShowCreateModal] = useState(false);&#10;  const [editingTopic, setEditingTopic] = useState&lt;TopicSuggestion | null&gt;(null);&#10;  const [isGenerating, setIsGenerating] = useState(false);&#10;&#10;  // Filtri e ricerca&#10;  const [statusFilter, setStatusFilter] = useState&lt;'all' | 'pending' | 'approved' | 'converted'&gt;('all');&#10;  const [textSearch, setTextSearch] = useState('');&#10;  const [tagSearch, setTagSearch] = useState('');&#10;&#10;  // Paginazione&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [topicsPerPage, setTopicsPerPage] = useState(10);&#10;&#10;  // Confirmation modal state&#10;  const [confirmModal, setConfirmModal] = useState&lt;{&#10;    isOpen: boolean;&#10;    action: () =&gt; void;&#10;    title: string;&#10;    message: string;&#10;    actionText: string;&#10;  }&gt;({&#10;    isOpen: false,&#10;    action: () =&gt; {},&#10;    title: '',&#10;    message: '',&#10;    actionText: ''&#10;  });&#10;&#10;  // Form state&#10;  const [formData, setFormData] = useState({&#10;    originalSuggestion: '',&#10;    title: '',&#10;    objective: '',&#10;    tags: '',&#10;  });&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!permissions.isAdmin) return;&#10;    loadTopics();&#10;  }, [statusFilter, permissions.isAdmin]);&#10;&#10;  const loadTopics = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedTopics = await fetchTopicSuggestions(&#10;        statusFilter === 'all' ? undefined : statusFilter&#10;      );&#10;      setTopics(fetchedTopics);&#10;    } catch (error) {&#10;      console.error('Errore nel caricamento argomenti:', error);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const showConfirmation = (title: string, message: string, action: () =&gt; void, actionText: string) =&gt; {&#10;    setConfirmModal({&#10;      isOpen: true,&#10;      action,&#10;      title,&#10;      message,&#10;      actionText&#10;    });&#10;  };&#10;&#10;  const handleStatusChange = async (topicId: string, newStatus: 'pending' | 'approved' | 'converted') =&gt; {&#10;    const statusLabels = {&#10;      pending: 'In attesa',&#10;      approved: 'Approvato',&#10;      converted: 'Convertito'&#10;    };&#10;&#10;    showConfirmation(&#10;      'Conferma cambio stato',&#10;      `Sei sicuro di voler cambiare lo stato dell'argomento a &quot;${statusLabels[newStatus]}&quot;?`,&#10;      async () =&gt; {&#10;        try {&#10;          await updateTopicSuggestion(topicId, { status: newStatus });&#10;          await loadTopics();&#10;        } catch (error) {&#10;          console.error('Errore nel cambio status:', error);&#10;        }&#10;      },&#10;      'Conferma'&#10;    );&#10;  };&#10;&#10;  const handleDelete = (topicId: string) =&gt; {&#10;    showConfirmation(&#10;      'Conferma eliminazione',&#10;      'Sei sicuro di voler eliminare questo argomento? Questa azione non può essere annullata.',&#10;      async () =&gt; {&#10;        try {&#10;          await deleteTopicSuggestion(topicId);&#10;          await loadTopics();&#10;        } catch (error) {&#10;          console.error('Errore nell\'eliminazione:', error);&#10;        }&#10;      },&#10;      'Elimina'&#10;    );&#10;  };&#10;&#10;  const handleGenerateDetails = async () =&gt; {&#10;    if (!formData.originalSuggestion) return;&#10;    setIsGenerating(true);&#10;    try {&#10;      const details = await generateTopicSuggestionDetails(formData.originalSuggestion);&#10;      setFormData(prev =&gt; ({&#10;        ...prev,&#10;        title: details.title,&#10;        objective: details.objective,&#10;        tags: details.tags.join(', '),&#10;      }));&#10;    } catch (error) {&#10;      console.error('Errore nella generazione dei dettagli:', error);&#10;      // Potresti voler mostrare un messaggio di errore all'utente qui&#10;    }&#10;    setIsGenerating(false);&#10;  };&#10;&#10;  const handleCreate = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!currentUser?.uid) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const tags = formData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag);&#10;      await createTopicSuggestion(&#10;        formData.title,&#10;        formData.objective,&#10;        tags,&#10;        currentUser.uid,&#10;        formData.originalSuggestion&#10;      );&#10;&#10;      setShowCreateModal(false); // Chiudi la modale&#10;      await loadTopics(); // Ricarica i dati&#10;    } catch (error) {&#10;      console.error('Errore nella creazione del suggerimento:', error);&#10;    }&#10;  };&#10;&#10;  const handleUpdate = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!editingTopic) return;&#10;&#10;    try {&#10;      const tags = formData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag);&#10;      await updateTopicSuggestion(editingTopic.id, {&#10;        title: formData.title,&#10;        objective: formData.objective,&#10;        tags,&#10;      });&#10;      setEditingTopic(null); // Chiudi la modale di modifica&#10;      await loadTopics();&#10;    } catch (error) {&#10;      console.error('Errore nell\'aggiornamento:', error);&#10;    }&#10;  };&#10;&#10;  const openEditModal = (topic: TopicSuggestion) =&gt; {&#10;    setEditingTopic(topic);&#10;    setFormData({&#10;      title: topic.title,&#10;      objective: topic.objective,&#10;      tags: topic.tags.join(', '),&#10;      originalSuggestion: topic.originalSuggestion || '',&#10;    });&#10;  };&#10;&#10;  const resetForm = () =&gt; {&#10;    setFormData({ originalSuggestion: '', title: '', objective: '', tags: '' });&#10;    setEditingTopic(null);&#10;    setShowCreateModal(false);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (!showCreateModal &amp;&amp; !editingTopic) {&#10;      resetForm();&#10;    }&#10;  }, [showCreateModal, editingTopic]);&#10;&#10;  // Filtro combinato per ricerca&#10;  const filteredTopics = topics.filter(topic =&gt; {&#10;    const objective = topic.objective || '';&#10;    const title = topic.title || '';&#10;    const tags = topic.tags || [];&#10;&#10;    const matchesText = objective.toLowerCase().includes(textSearch.toLowerCase()) ||&#10;                        title.toLowerCase().includes(textSearch.toLowerCase());&#10;    const matchesTag = tagSearch === '' || tags.some(tag =&gt;&#10;      tag.toLowerCase().includes(tagSearch.toLowerCase())&#10;    );&#10;    return matchesText &amp;&amp; matchesTag;&#10;  });&#10;&#10;  // Paginazione&#10;  const indexOfLastTopic = currentPage * topicsPerPage;&#10;  const indexOfFirstTopic = indexOfLastTopic - topicsPerPage;&#10;  const currentTopics = filteredTopics.slice(indexOfFirstTopic, indexOfLastTopic);&#10;  const totalPages = Math.ceil(filteredTopics.length / topicsPerPage);&#10;&#10;  // Reset pagina quando cambiano i filtri&#10;  useEffect(() =&gt; {&#10;    setCurrentPage(1);&#10;  }, [textSearch, tagSearch, statusFilter, topicsPerPage]);&#10;&#10;  const getStatusBadgeColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';&#10;      case 'approved': return 'bg-green-100 text-green-800 border-green-200';&#10;      case 'converted': return 'bg-blue-100 text-blue-800 border-blue-200';&#10;      default: return 'bg-gray-100 text-gray-800 border-gray-200';&#10;    }&#10;  };&#10;&#10;  const getStatusEmoji = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return '⏳';&#10;      case 'approved': return '✅';&#10;      case 'converted': return '';&#10;      default: return '❓';&#10;    }&#10;  };&#10;&#10;  const getStatusLabel = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return 'In attesa';&#10;      case 'approved': return 'Approvato';&#10;      case 'converted': return 'Convertito in gemma';&#10;      default: return status;&#10;    }&#10;  };&#10;&#10;  const formatDate = (date: any) =&gt; {&#10;    try {&#10;      // Gestisce sia Timestamp di Firestore che Date JavaScript&#10;      const dateObj = date?.toDate ? date.toDate() : new Date(date);&#10;      return dateObj.toLocaleDateString('it-IT', {&#10;        day: '2-digit',&#10;        month: '2-digit',&#10;        year: 'numeric'&#10;      });&#10;    } catch (error) {&#10;      return 'Data non valida';&#10;    }&#10;  };&#10;&#10;  if (!permissions.isAdmin) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;Accesso Negato&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;Solo gli amministratori possono accedere a questa pagina.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-7xl mx-auto&quot;&gt;&#10;      &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;        &lt;button&#10;          onClick={onBack}&#10;          className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;          aria-label=&quot;Torna indietro&quot;&#10;        &gt;&#10;          &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;        &lt;/button&gt;&#10;        &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Gestione Argomenti&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;div className=&quot;px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Statistiche */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-gray-600&quot;&gt;{topics.length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Totali&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;{topics.filter(t =&gt; t.status === 'pending').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;In attesa&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;{topics.filter(t =&gt; t.status === 'approved').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Approvati&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;{topics.filter(t =&gt; t.status === 'converted').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Convertiti&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filtri e ricerca */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow border p-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-5 gap-4&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Ricerca nel testo&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                placeholder=&quot;Cerca negli argomenti...&quot;&#10;                value={textSearch}&#10;                onChange={(e) =&gt; setTextSearch(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Ricerca nei tag&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                placeholder=&quot;Cerca per tag...&quot;&#10;                value={tagSearch}&#10;                onChange={(e) =&gt; setTagSearch(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Filtra per stato&lt;/label&gt;&#10;              &lt;select&#10;                value={statusFilter}&#10;                onChange={(e) =&gt; setStatusFilter(e.target.value as any)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &lt;option value=&quot;all&quot;&gt;Tutti gli stati&lt;/option&gt;&#10;                &lt;option value=&quot;pending&quot;&gt;In attesa&lt;/option&gt;&#10;                &lt;option value=&quot;approved&quot;&gt;Approvati&lt;/option&gt;&#10;                &lt;option value=&quot;converted&quot;&gt;Convertiti&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Elementi per pagina&lt;/label&gt;&#10;              &lt;select&#10;                value={topicsPerPage}&#10;                onChange={(e) =&gt; setTopicsPerPage(Number(e.target.value))}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &lt;option value={5}&gt;5&lt;/option&gt;&#10;                &lt;option value={10}&gt;10&lt;/option&gt;&#10;                &lt;option value={50}&gt;50&lt;/option&gt;&#10;                &lt;option value={100}&gt;100&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-end&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setShowCreateModal(true)}&#10;                className=&quot;w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;              &gt;&#10;                + Nuovo Argomento&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Tabella */}&#10;        {loading ? (&#10;          &lt;div className=&quot;flex justify-center items-center h-64&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;            &lt;span className=&quot;ml-3 text-gray-600&quot;&gt;Caricamento argomenti...&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;bg-white rounded-lg shadow border overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;min-w-full divide-y divide-gray-200&quot;&gt;&#10;                &lt;thead className=&quot;bg-gray-50&quot;&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Argomento&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Tag&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Stato&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Data creazione&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Azioni&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;                  {currentTopics.map((topic) =&gt; (&#10;                    &lt;tr key={topic.id} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                      &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                        &lt;div className=&quot;text-sm font-bold text-gray-900 max-w-md&quot;&gt;&#10;                          {topic.title}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 max-w-md mt-1&quot;&gt;&#10;                          {topic.objective}&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                        &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                          {topic.tags.slice(0, 3).map((tag, index) =&gt; (&#10;                            &lt;span key={index} className=&quot;inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded&quot;&gt;&#10;                              #{tag}&#10;                            &lt;/span&gt;&#10;                          ))}&#10;                          {topic.tags.length &gt; 3 &amp;&amp; (&#10;                            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;+{topic.tags.length - 3}&lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                        &lt;span className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full border ${getStatusBadgeColor(topic.status)}`}&gt;&#10;                          {getStatusEmoji(topic.status)} {topic.status}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 text-sm text-gray-500&quot;&gt;&#10;                        {formatDate(topic.createdAt)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 text-right&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-end space-x-2&quot;&gt;&#10;                          {/* Dropdown per cambio stato */}&#10;                          &lt;select&#10;                            value={topic.status}&#10;                            onChange={(e) =&gt; handleStatusChange(topic.id, e.target.value as any)}&#10;                            className=&quot;text-xs border border-gray-300 rounded px-2 py-1 bg-white&quot;&#10;                          &gt;&#10;                            &lt;option value=&quot;pending&quot;&gt;⏳ In attesa&lt;/option&gt;&#10;                            &lt;option value=&quot;approved&quot;&gt;✅ Approvato&lt;/option&gt;&#10;                            &lt;option value=&quot;converted&quot;&gt; Convertito&lt;/option&gt;&#10;                          &lt;/select&gt;&#10;&#10;                          &lt;button&#10;                            onClick={() =&gt; openEditModal(topic)}&#10;                            className=&quot;text-blue-600 hover:text-blue-800 text-sm px-2 py-1 rounded hover:bg-blue-50&quot;&#10;                            title=&quot;Modifica&quot;&#10;                          &gt;&#10;                            ✏️&#10;                          &lt;/button&gt;&#10;&#10;                          &lt;button&#10;                            onClick={() =&gt; handleDelete(topic.id)}&#10;                            className=&quot;text-red-600 hover:text-red-800 text-sm px-2 py-1 rounded hover:bg-red-50&quot;&#10;                            title=&quot;Elimina&quot;&#10;                          &gt;&#10;                            ️&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Paginazione */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200&quot;&gt;&#10;                &lt;div className=&quot;flex-1 flex justify-between sm:hidden&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#10;                    disabled={currentPage === 1}&#10;                    className=&quot;relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#10;                  &gt;&#10;                    Precedente&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#10;                    disabled={currentPage === totalPages}&#10;                    className=&quot;ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#10;                  &gt;&#10;                    Successivo&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;hidden sm:flex-1 sm:flex sm:items-center sm:justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-700&quot;&gt;&#10;                      Mostrando &lt;span className=&quot;font-medium&quot;&gt;{indexOfFirstTopic + 1}&lt;/span&gt; a{' '}&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{Math.min(indexOfLastTopic, filteredTopics.length)}&lt;/span&gt; di{' '}&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{filteredTopics.length}&lt;/span&gt; risultati&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;nav className=&quot;relative z-0 inline-flex rounded-md shadow-sm -space-x-px&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#10;                        disabled={currentPage === 1}&#10;                        className=&quot;relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50&quot;&#10;                      &gt;&#10;                        ←&#10;                      &lt;/button&gt;&#10;                      {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map((page) =&gt; (&#10;                        &lt;button&#10;                          key={page}&#10;                          onClick={() =&gt; setCurrentPage(page)}&#10;                          className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${&#10;                            page === currentPage&#10;                              ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'&#10;                              : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'&#10;                          }`}&#10;                        &gt;&#10;                          {page}&#10;                        &lt;/button&gt;&#10;                      ))}&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#10;                        disabled={currentPage === totalPages}&#10;                        className=&quot;relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50&quot;&#10;                      &gt;&#10;                        →&#10;                      &lt;/button&gt;&#10;                    &lt;/nav&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Modal Creazione/Modifica */}&#10;        {(showCreateModal || editingTopic) &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto&quot;&gt;&#10;              &lt;div className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold text-gray-900 mb-4&quot;&gt;&#10;                  {editingTopic ? 'Modifica Argomento' : 'Nuovo Argomento'}&#10;                &lt;/h2&gt;&#10;&#10;                &lt;form onSubmit={editingTopic ? handleUpdate : handleCreate}&gt;&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Idea iniziale&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={formData.originalSuggestion}&#10;                      onChange={(e) =&gt; setFormData({...formData, originalSuggestion: e.target.value})}&#10;                      required={!editingTopic}&#10;                      disabled={!!editingTopic || !!formData.title}&#10;                      rows={3}&#10;                      placeholder=&quot;Descrivi l'argomento che vorresti sviluppare in una gemma...&quot;&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {!formData.title &amp;&amp; !editingTopic &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-end mb-4&quot;&gt;&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={handleGenerateDetails}&#10;                        disabled={!formData.originalSuggestion || isGenerating}&#10;                        className=&quot;px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:bg-green-300&quot;&#10;                      &gt;&#10;                        {isGenerating ? 'Generazione...' : 'Genera Dettagli'}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {(formData.title || editingTopic) &amp;&amp; (&#10;                    &lt;&gt;&#10;                      &lt;div className=&quot;mb-4&quot;&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                          Titolo&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          value={formData.title}&#10;                          onChange={(e) =&gt; setFormData({...formData, title: e.target.value})}&#10;                          required&#10;                          placeholder=&quot;Titolo generato per l'argomento&quot;&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;mb-4&quot;&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                          Obiettivo&#10;                        &lt;/label&gt;&#10;                        &lt;textarea&#10;                          value={formData.objective}&#10;                          onChange={(e) =&gt; setFormData({...formData, objective: e.target.value})}&#10;                          required&#10;                          rows={5}&#10;                          placeholder=&quot;Obiettivo generato per l'argomento...&quot;&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;mb-6&quot;&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                          Tag (separati da virgole)&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          value={formData.tags}&#10;                          onChange={(e) =&gt; setFormData({...formData, tags: e.target.value})}&#10;                          placeholder=&quot;es: storia, arte, scienza, tecnologia&quot;&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                        /&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                          I tag aiutano a categorizzare l'argomento&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          type=&quot;button&quot;&#10;                          onClick={() =&gt; editingTopic ? setEditingTopic(null) : setShowCreateModal(false)}&#10;                          className=&quot;px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors&quot;&#10;                        &gt;&#10;                          Annulla&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                          type=&quot;submit&quot;&#10;                          className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;                        &gt;&#10;                          {editingTopic ? 'Aggiorna' : 'Salva Argomento'}&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Modal di conferma */}&#10;        &lt;ConfirmationModal&#10;          isOpen={confirmModal.isOpen}&#10;          onClose={() =&gt; setConfirmModal({...confirmModal, isOpen: false})}&#10;          onConfirm={confirmModal.action}&#10;          title={confirmModal.title}&#10;          message={confirmModal.message}&#10;          action={confirmModal.actionText}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default TopicManagement;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { TopicSuggestion, UserRole } from '../../types';&#10;import {&#10;  fetchTopicSuggestions,&#10;  createTopicSuggestion,&#10;  updateTopicSuggestion,&#10;  deleteTopicSuggestion&#10;} from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;import { generateTopicSuggestionDetails } from '../../services/apiService';&#10;import { ChevronLeftIcon } from '../icons';&#10;&#10;interface TopicManagementProps {&#10;  currentUser: { role: UserRole; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;// Modal di conferma per cambio stato&#10;interface ConfirmationModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  onConfirm: () =&gt; void;&#10;  title: string;&#10;  message: string;&#10;  action: string;&#10;}&#10;&#10;const ConfirmationModal: React.FC&lt;ConfirmationModalProps&gt; = ({&#10;  isOpen, onClose, onConfirm, title, message, action&#10;}) =&gt; {&#10;  if (!isOpen) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;      &lt;div className=&quot;bg-white rounded-lg max-w-md w-full p-6&quot;&gt;&#10;        &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-2&quot;&gt;{title}&lt;/h3&gt;&#10;        &lt;p className=&quot;text-gray-600 mb-6&quot;&gt;{message}&lt;/p&gt;&#10;        &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;          &lt;button&#10;            onClick={onClose}&#10;            className=&quot;px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors&quot;&#10;          &gt;&#10;            Annulla&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            onClick={() =&gt; {&#10;              onConfirm();&#10;              onClose();&#10;            }}&#10;            className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;          &gt;&#10;            {action}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;const TopicManagement: React.FC&lt;TopicManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [topics, setTopics] = useState&lt;TopicSuggestion[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [showCreateModal, setShowCreateModal] = useState(false);&#10;  const [editingTopic, setEditingTopic] = useState&lt;TopicSuggestion | null&gt;(null);&#10;  const [isGenerating, setIsGenerating] = useState(false);&#10;&#10;  // Filtri e ricerca&#10;  const [statusFilter, setStatusFilter] = useState&lt;'all' | 'pending' | 'approved' | 'converted'&gt;('all');&#10;  const [textSearch, setTextSearch] = useState('');&#10;  const [tagSearch, setTagSearch] = useState('');&#10;&#10;  // Paginazione&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [topicsPerPage, setTopicsPerPage] = useState(10);&#10;&#10;  // Confirmation modal state&#10;  const [confirmModal, setConfirmModal] = useState&lt;{&#10;    isOpen: boolean;&#10;    action: () =&gt; void;&#10;    title: string;&#10;    message: string;&#10;    actionText: string;&#10;  }&gt;({&#10;    isOpen: false,&#10;    action: () =&gt; {},&#10;    title: '',&#10;    message: '',&#10;    actionText: ''&#10;  });&#10;&#10;  // Form state&#10;  const [formData, setFormData] = useState({&#10;    originalSuggestion: '',&#10;    title: '',&#10;    objective: '',&#10;    tags: '',&#10;  });&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!permissions.isAdmin) return;&#10;    loadTopics();&#10;  }, [statusFilter, permissions.isAdmin]);&#10;&#10;  const loadTopics = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedTopics = await fetchTopicSuggestions(&#10;        statusFilter === 'all' ? undefined : statusFilter&#10;      );&#10;      setTopics(fetchedTopics);&#10;    } catch (error) {&#10;      console.error('Errore nel caricamento argomenti:', error);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const showConfirmation = (title: string, message: string, action: () =&gt; void, actionText: string) =&gt; {&#10;    setConfirmModal({&#10;      isOpen: true,&#10;      action,&#10;      title,&#10;      message,&#10;      actionText&#10;    });&#10;  };&#10;&#10;  const handleStatusChange = async (topicId: string, newStatus: 'pending' | 'approved' | 'converted') =&gt; {&#10;    const statusLabels = {&#10;      pending: 'In attesa',&#10;      approved: 'Approvato',&#10;      converted: 'Convertito'&#10;    };&#10;&#10;    showConfirmation(&#10;      'Conferma cambio stato',&#10;      `Sei sicuro di voler cambiare lo stato dell'argomento a &quot;${statusLabels[newStatus]}&quot;?`,&#10;      async () =&gt; {&#10;        try {&#10;          await updateTopicSuggestion(topicId, { status: newStatus });&#10;          await loadTopics();&#10;        } catch (error) {&#10;          console.error('Errore nel cambio status:', error);&#10;        }&#10;      },&#10;      'Conferma'&#10;    );&#10;  };&#10;&#10;  const handleDelete = (topicId: string) =&gt; {&#10;    showConfirmation(&#10;      'Conferma eliminazione',&#10;      'Sei sicuro di voler eliminare questo argomento? Questa azione non può essere annullata.',&#10;      async () =&gt; {&#10;        try {&#10;          await deleteTopicSuggestion(topicId);&#10;          await loadTopics();&#10;        } catch (error) {&#10;          console.error('Errore nell\'eliminazione:', error);&#10;        }&#10;      },&#10;      'Elimina'&#10;    );&#10;  };&#10;&#10;  const handleGenerateDetails = async () =&gt; {&#10;    if (!formData.originalSuggestion) return;&#10;    setIsGenerating(true);&#10;    try {&#10;      const details = await generateTopicSuggestionDetails(formData.originalSuggestion);&#10;      setFormData(prev =&gt; ({&#10;        ...prev,&#10;        title: details.title || '',&#10;        objective: details.objective || '',&#10;        tags: Array.isArray(details.tags) ? details.tags.join(', ') : '',&#10;      }));&#10;    } catch (error) {&#10;      console.error('Errore nella generazione dei dettagli:', error);&#10;      // Potresti voler mostrare un messaggio di errore all'utente qui&#10;    }&#10;    setIsGenerating(false);&#10;  };&#10;&#10;  const handleCreate = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!currentUser?.uid) {&#10;      return;&#10;    }&#10;&#10;    try {&#10;      const tags = formData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag);&#10;      await createTopicSuggestion(&#10;        formData.title,&#10;        formData.objective,&#10;        tags,&#10;        currentUser.uid,&#10;        formData.originalSuggestion&#10;      );&#10;&#10;      setShowCreateModal(false); // Chiudi la modale&#10;      await loadTopics(); // Ricarica i dati&#10;    } catch (error) {&#10;      console.error('Errore nella creazione del suggerimento:', error);&#10;    }&#10;  };&#10;&#10;  const handleUpdate = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!editingTopic) return;&#10;&#10;    try {&#10;      const tags = formData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag);&#10;      await updateTopicSuggestion(editingTopic.id, {&#10;        title: formData.title,&#10;        objective: formData.objective,&#10;        tags,&#10;      });&#10;      setEditingTopic(null); // Chiudi la modale di modifica&#10;      await loadTopics();&#10;    } catch (error) {&#10;      console.error('Errore nell\'aggiornamento:', error);&#10;    }&#10;  };&#10;&#10;  const openEditModal = (topic: TopicSuggestion) =&gt; {&#10;    setEditingTopic(topic);&#10;    setFormData({&#10;      title: topic.title,&#10;      objective: topic.objective,&#10;      tags: topic.tags.join(', '),&#10;      originalSuggestion: topic.originalSuggestion || '',&#10;    });&#10;  };&#10;&#10;  const resetForm = () =&gt; {&#10;    setFormData({ originalSuggestion: '', title: '', objective: '', tags: '' });&#10;    setEditingTopic(null);&#10;    setShowCreateModal(false);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (!showCreateModal &amp;&amp; !editingTopic) {&#10;      resetForm();&#10;    }&#10;  }, [showCreateModal, editingTopic]);&#10;&#10;  // Filtro combinato per ricerca&#10;  const filteredTopics = topics.filter(topic =&gt; {&#10;    const objective = topic.objective || '';&#10;    const title = topic.title || '';&#10;    const tags = topic.tags || [];&#10;&#10;    const matchesText = objective.toLowerCase().includes(textSearch.toLowerCase()) ||&#10;                        title.toLowerCase().includes(textSearch.toLowerCase());&#10;    const matchesTag = tagSearch === '' || tags.some(tag =&gt;&#10;      tag.toLowerCase().includes(tagSearch.toLowerCase())&#10;    );&#10;    return matchesText &amp;&amp; matchesTag;&#10;  });&#10;&#10;  // Paginazione&#10;  const indexOfLastTopic = currentPage * topicsPerPage;&#10;  const indexOfFirstTopic = indexOfLastTopic - topicsPerPage;&#10;  const currentTopics = filteredTopics.slice(indexOfFirstTopic, indexOfLastTopic);&#10;  const totalPages = Math.ceil(filteredTopics.length / topicsPerPage);&#10;&#10;  // Reset pagina quando cambiano i filtri&#10;  useEffect(() =&gt; {&#10;    setCurrentPage(1);&#10;  }, [textSearch, tagSearch, statusFilter, topicsPerPage]);&#10;&#10;  const getStatusBadgeColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';&#10;      case 'approved': return 'bg-green-100 text-green-800 border-green-200';&#10;      case 'converted': return 'bg-blue-100 text-blue-800 border-blue-200';&#10;      default: return 'bg-gray-100 text-gray-800 border-gray-200';&#10;    }&#10;  };&#10;&#10;  const getStatusEmoji = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return '⏳';&#10;      case 'approved': return '✅';&#10;      case 'converted': return '';&#10;      default: return '❓';&#10;    }&#10;  };&#10;&#10;  const getStatusLabel = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return 'In attesa';&#10;      case 'approved': return 'Approvato';&#10;      case 'converted': return 'Convertito in gemma';&#10;      default: return status;&#10;    }&#10;  };&#10;&#10;  const formatDate = (date: any) =&gt; {&#10;    try {&#10;      // Gestisce sia Timestamp di Firestore che Date JavaScript&#10;      const dateObj = date?.toDate ? date.toDate() : new Date(date);&#10;      return dateObj.toLocaleDateString('it-IT', {&#10;        day: '2-digit',&#10;        month: '2-digit',&#10;        year: 'numeric'&#10;      });&#10;    } catch (error) {&#10;      return 'Data non valida';&#10;    }&#10;  };&#10;&#10;  if (!permissions.isAdmin) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;Accesso Negato&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;Solo gli amministratori possono accedere a questa pagina.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-7xl mx-auto&quot;&gt;&#10;      &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;        &lt;button&#10;          onClick={onBack}&#10;          className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;          aria-label=&quot;Torna indietro&quot;&#10;        &gt;&#10;          &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;        &lt;/button&gt;&#10;        &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Gestione Argomenti&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;div className=&quot;px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Statistiche */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-gray-600&quot;&gt;{topics.length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Totali&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;{topics.filter(t =&gt; t.status === 'pending').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;In attesa&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;{topics.filter(t =&gt; t.status === 'approved').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Approvati&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;{topics.filter(t =&gt; t.status === 'converted').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Convertiti&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filtri e ricerca */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow border p-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-5 gap-4&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Ricerca nel testo&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                placeholder=&quot;Cerca negli argomenti...&quot;&#10;                value={textSearch}&#10;                onChange={(e) =&gt; setTextSearch(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Ricerca nei tag&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;text&quot;&#10;                placeholder=&quot;Cerca per tag...&quot;&#10;                value={tagSearch}&#10;                onChange={(e) =&gt; setTagSearch(e.target.value)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Filtra per stato&lt;/label&gt;&#10;              &lt;select&#10;                value={statusFilter}&#10;                onChange={(e) =&gt; setStatusFilter(e.target.value as any)}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &lt;option value=&quot;all&quot;&gt;Tutti gli stati&lt;/option&gt;&#10;                &lt;option value=&quot;pending&quot;&gt;In attesa&lt;/option&gt;&#10;                &lt;option value=&quot;approved&quot;&gt;Approvati&lt;/option&gt;&#10;                &lt;option value=&quot;converted&quot;&gt;Convertiti&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div&gt;&#10;              &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;Elementi per pagina&lt;/label&gt;&#10;              &lt;select&#10;                value={topicsPerPage}&#10;                onChange={(e) =&gt; setTopicsPerPage(Number(e.target.value))}&#10;                className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500&quot;&#10;              &gt;&#10;                &lt;option value={5}&gt;5&lt;/option&gt;&#10;                &lt;option value={10}&gt;10&lt;/option&gt;&#10;                &lt;option value={50}&gt;50&lt;/option&gt;&#10;                &lt;option value={100}&gt;100&lt;/option&gt;&#10;              &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-end&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setShowCreateModal(true)}&#10;                className=&quot;w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;              &gt;&#10;                + Nuovo Argomento&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Tabella */}&#10;        {loading ? (&#10;          &lt;div className=&quot;flex justify-center items-center h-64&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;            &lt;span className=&quot;ml-3 text-gray-600&quot;&gt;Caricamento argomenti...&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;bg-white rounded-lg shadow border overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;min-w-full divide-y divide-gray-200&quot;&gt;&#10;                &lt;thead className=&quot;bg-gray-50&quot;&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Argomento&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Tag&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Stato&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Data creazione&#10;                    &lt;/th&gt;&#10;                    &lt;th className=&quot;px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                      Azioni&#10;                    &lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;                  {currentTopics.map((topic) =&gt; (&#10;                    &lt;tr key={topic.id} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                      &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                        &lt;div className=&quot;text-sm font-bold text-gray-900 max-w-md&quot;&gt;&#10;                          {topic.title}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;text-sm text-gray-600 max-w-md mt-1&quot;&gt;&#10;                          {topic.objective}&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                        &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                          {topic.tags.slice(0, 3).map((tag, index) =&gt; (&#10;                            &lt;span key={index} className=&quot;inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded&quot;&gt;&#10;                              #{tag}&#10;                            &lt;/span&gt;&#10;                          ))}&#10;                          {topic.tags.length &gt; 3 &amp;&amp; (&#10;                            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;+{topic.tags.length - 3}&lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4&quot;&gt;&#10;                        &lt;span className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full border ${getStatusBadgeColor(topic.status)}`}&gt;&#10;                          {getStatusEmoji(topic.status)} {topic.status}&#10;                        &lt;/span&gt;&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 text-sm text-gray-500&quot;&gt;&#10;                        {formatDate(topic.createdAt)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;px-6 py-4 text-right&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-end space-x-2&quot;&gt;&#10;                          {/* Dropdown per cambio stato */}&#10;                          &lt;select&#10;                            value={topic.status}&#10;                            onChange={(e) =&gt; handleStatusChange(topic.id, e.target.value as any)}&#10;                            className=&quot;text-xs border border-gray-300 rounded px-2 py-1 bg-white&quot;&#10;                          &gt;&#10;                            &lt;option value=&quot;pending&quot;&gt;⏳ In attesa&lt;/option&gt;&#10;                            &lt;option value=&quot;approved&quot;&gt;✅ Approvato&lt;/option&gt;&#10;                            &lt;option value=&quot;converted&quot;&gt; Convertito&lt;/option&gt;&#10;                          &lt;/select&gt;&#10;&#10;                          &lt;button&#10;                            onClick={() =&gt; openEditModal(topic)}&#10;                            className=&quot;text-blue-600 hover:text-blue-800 text-sm px-2 py-1 rounded hover:bg-blue-50&quot;&#10;                            title=&quot;Modifica&quot;&#10;                          &gt;&#10;                            ✏️&#10;                          &lt;/button&gt;&#10;&#10;                          &lt;button&#10;                            onClick={() =&gt; handleDelete(topic.id)}&#10;                            className=&quot;text-red-600 hover:text-red-800 text-sm px-2 py-1 rounded hover:bg-red-50&quot;&#10;                            title=&quot;Elimina&quot;&#10;                          &gt;&#10;                            ️&#10;                          &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Paginazione */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200&quot;&gt;&#10;                &lt;div className=&quot;flex-1 flex justify-between sm:hidden&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#10;                    disabled={currentPage === 1}&#10;                    className=&quot;relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#10;                  &gt;&#10;                    Precedente&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#10;                    disabled={currentPage === totalPages}&#10;                    className=&quot;ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#10;                  &gt;&#10;                    Successivo&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;hidden sm:flex-1 sm:flex sm:items-center sm:justify-between&quot;&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-700&quot;&gt;&#10;                      Mostrando &lt;span className=&quot;font-medium&quot;&gt;{indexOfFirstTopic + 1}&lt;/span&gt; a{' '}&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{Math.min(indexOfLastTopic, filteredTopics.length)}&lt;/span&gt; di{' '}&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{filteredTopics.length}&lt;/span&gt; risultati&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;nav className=&quot;relative z-0 inline-flex rounded-md shadow-sm -space-x-px&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#10;                        disabled={currentPage === 1}&#10;                        className=&quot;relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50&quot;&#10;                      &gt;&#10;                        ←&#10;                      &lt;/button&gt;&#10;                      {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map((page) =&gt; (&#10;                        &lt;button&#10;                          key={page}&#10;                          onClick={() =&gt; setCurrentPage(page)}&#10;                          className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${&#10;                            page === currentPage&#10;                              ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'&#10;                              : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'&#10;                          }`}&#10;                        &gt;&#10;                          {page}&#10;                        &lt;/button&gt;&#10;                      ))}&#10;                      &lt;button&#10;                        onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#10;                        disabled={currentPage === totalPages}&#10;                        className=&quot;relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50&quot;&#10;                      &gt;&#10;                        →&#10;                      &lt;/button&gt;&#10;                    &lt;/nav&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Modal Creazione/Modifica */}&#10;        {(showCreateModal || editingTopic) &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto&quot;&gt;&#10;              &lt;div className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold text-gray-900 mb-4&quot;&gt;&#10;                  {editingTopic ? 'Modifica Argomento' : 'Nuovo Argomento'}&#10;                &lt;/h2&gt;&#10;&#10;                &lt;form onSubmit={editingTopic ? handleUpdate : handleCreate}&gt;&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Idea iniziale&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={formData.originalSuggestion}&#10;                      onChange={(e) =&gt; setFormData({...formData, originalSuggestion: e.target.value})}&#10;                      required={!editingTopic}&#10;                      disabled={!!editingTopic || !!formData.title}&#10;                      rows={3}&#10;                      placeholder=&quot;Descrivi l'argomento che vorresti sviluppare in una gemma...&quot;&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  {!formData.title &amp;&amp; !editingTopic &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-end mb-4&quot;&gt;&#10;                      &lt;button&#10;                        type=&quot;button&quot;&#10;                        onClick={handleGenerateDetails}&#10;                        disabled={!formData.originalSuggestion || isGenerating}&#10;                        className=&quot;px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:bg-green-300&quot;&#10;                      &gt;&#10;                        {isGenerating ? 'Generazione...' : 'Genera Dettagli'}&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;&#10;                  {(formData.title || editingTopic) &amp;&amp; (&#10;                    &lt;&gt;&#10;                      &lt;div className=&quot;mb-4&quot;&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                          Titolo&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          value={formData.title}&#10;                          onChange={(e) =&gt; setFormData({...formData, title: e.target.value})}&#10;                          required&#10;                          placeholder=&quot;Titolo generato per l'argomento&quot;&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;mb-4&quot;&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                          Obiettivo&#10;                        &lt;/label&gt;&#10;                        &lt;textarea&#10;                          value={formData.objective}&#10;                          onChange={(e) =&gt; setFormData({...formData, objective: e.target.value})}&#10;                          required&#10;                          rows={5}&#10;                          placeholder=&quot;Obiettivo generato per l'argomento...&quot;&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                        /&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;mb-6&quot;&gt;&#10;                        &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                          Tag (separati da virgole)&#10;                        &lt;/label&gt;&#10;                        &lt;input&#10;                          type=&quot;text&quot;&#10;                          value={formData.tags}&#10;                          onChange={(e) =&gt; setFormData({...formData, tags: e.target.value})}&#10;                          placeholder=&quot;es: storia, arte, scienza, tecnologia&quot;&#10;                          className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                        /&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                          I tag aiutano a categorizzare l'argomento&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;                        &lt;button&#10;                          type=&quot;button&quot;&#10;                          onClick={() =&gt; editingTopic ? setEditingTopic(null) : setShowCreateModal(false)}&#10;                          className=&quot;px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors&quot;&#10;                        &gt;&#10;                          Annulla&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                          type=&quot;submit&quot;&#10;                          className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;                        &gt;&#10;                          {editingTopic ? 'Aggiorna' : 'Salva Argomento'}&#10;                        &lt;/button&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Modal di conferma */}&#10;        &lt;ConfirmationModal&#10;          isOpen={confirmModal.isOpen}&#10;          onClose={() =&gt; setConfirmModal({...confirmModal, isOpen: false})}&#10;          onConfirm={confirmModal.action}&#10;          title={confirmModal.title}&#10;          message={confirmModal.message}&#10;          action={confirmModal.actionText}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default TopicManagement;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/icons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/icons.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronRightIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m8.25 4.5 7.5 7.5-7.5 7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const XMarkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18 18 6M6 6l12 12&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/apiService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/apiService.ts" />
              <option name="originalContent" value="import { auth } from './firebase';&#10;&#10;const API_BASE_URL = 'https://n8n.srv861958.hstgr.cloud/webhook';&#10;&#10;/**&#10; * Interfaccia per i dettagli del suggerimento generati dall'API.&#10; */&#10;export interface GeneratedTopicDetails {&#10;  title: string;&#10;  objective: string;&#10;  tags: string[];&#10;}&#10;&#10;/**&#10; * Ottiene il token di autenticazione JWT dell'utente corrente.&#10; * @returns Il token JWT o null se l'utente non è autenticato.&#10; */&#10;const getAuthToken = async (): Promise&lt;string | null&gt; =&gt; {&#10;  const currentUser = auth.currentUser;&#10;  if (currentUser) {&#10;    return await currentUser.getIdToken();&#10;  }&#10;  return null;&#10;};&#10;&#10;/**&#10; * Chiama l'endpoint API per generare i dettagli di un argomento basata su un messaggio.&#10; * @param message Il messaggio o l'idea iniziale per il suggerimento.&#10; * @returns Una promessa che si risolve con i dettagli generati per l'argomento.&#10; */&#10;export const generateTopicSuggestionDetails = async (message: string): Promise&lt;GeneratedTopicDetails&gt; =&gt; {&#10;  const token = await getAuthToken();&#10;  if (!token) {&#10;    throw new Error('Utente non autenticato. Impossibile generare il suggerimento.');&#10;  }&#10;&#10;  const response = await fetch(`${API_BASE_URL}/curiow-suggest-topic`, {&#10;    method: 'POST',&#10;    headers: {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': `Bearer ${token}`,&#10;    },&#10;    body: JSON.stringify({ message }),&#10;  });&#10;&#10;  if (!response.ok) {&#10;    const errorData = await response.json().catch(() =&gt; ({ message: 'Errore sconosciuto dal server durante la generazione del suggerimento.' }));&#10;    throw new Error(errorData.message || `Errore nella chiamata API: ${response.statusText}`);&#10;  }&#10;&#10;  const data = await response.json();&#10;  return {&#10;    title: data.title,&#10;    objective: data.summary, // Mappa summary a objective&#10;    tags: data.tags,&#10;  };&#10;  return {&#10;    title: data.title,&#10;    objective: data.summary, // Mappa summary a objective&#10;    tags: data.tags,&#10;  };&#10;};&#10;" />
              <option name="updatedContent" value="import { auth } from './firebase';&#10;&#10;const API_BASE_URL = 'https://n8n.srv861958.hstgr.cloud/webhook';&#10;&#10;/**&#10; * Interfaccia per i dettagli del suggerimento generati dall'API.&#10; */&#10;export interface GeneratedTopicDetails {&#10;  title: string;&#10;  objective: string;&#10;  tags: string[];&#10;}&#10;&#10;/**&#10; * Ottiene il token di autenticazione JWT dell'utente corrente.&#10; * @returns Il token JWT o null se l'utente non è autenticato.&#10; */&#10;const getAuthToken = async (): Promise&lt;string | null&gt; =&gt; {&#10;  const currentUser = auth.currentUser;&#10;  if (currentUser) {&#10;    return await currentUser.getIdToken();&#10;  }&#10;  return null;&#10;};&#10;&#10;/**&#10; * Chiama l'endpoint API per generare i dettagli di un argomento basata su un messaggio.&#10; * @param message Il messaggio o l'idea iniziale per il suggerimento.&#10; * @returns Una promessa che si risolve con i dettagli generati per l'argomento.&#10; */&#10;export const generateTopicSuggestionDetails = async (message: string): Promise&lt;GeneratedTopicDetails&gt; =&gt; {&#10;  const token = await getAuthToken();&#10;  if (!token) {&#10;    throw new Error('Utente non autenticato. Impossibile generare il suggerimento.');&#10;  }&#10;&#10;  const response = await fetch(`https://n8n.srv861958.hstgr.cloud/webhook-test/curiow-api`, {&#10;    method: 'POST',&#10;    headers: {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': `Bearer ${token}`,&#10;    },&#10;    body: JSON.stringify({ message, apitype: 'create-suggest' }),&#10;  });&#10;&#10;  if (!response.ok) {&#10;    const errorData = await response.json().catch(() =&gt; ({ message: 'Errore sconosciuto dal server durante la generazione del suggerimento.' }));&#10;    throw new Error(errorData.message || `Errore nella chiamata API: ${response.statusText}`);&#10;  }&#10;&#10;  return response.json();&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/feedbackService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/feedbackService.ts" />
              <option name="originalContent" value="import {&#10;  collection,&#10;  addDoc,&#10;  query,&#10;  orderBy,&#10;  where,&#10;  getDocs,&#10;  Timestamp,&#10;  DocumentData&#10;      createdAt: Timestamp.now()&#10;" />
              <option name="updatedContent" value="import {&#10;  collection,&#10;  addDoc,&#10;  query,&#10;  orderBy,&#10;  where,&#10;  getDocs,&#10;  Timestamp,&#10;  doc,&#10;  updateDoc,&#10;  deleteDoc&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { BetaFeedback } from '../types';&#10;&#10;const FEEDBACK_COLLECTION = 'feedback_tester';&#10;&#10;/**&#10; * Crea un nuovo feedback&#10; */&#10;export const createFeedback = async (&#10;  userId: string,&#10;  userEmail: string,&#10;  userName: string,&#10;  section: string,&#10;  message: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    await addDoc(collection(db, FEEDBACK_COLLECTION), {&#10;      userId,&#10;      userEmail,&#10;      userName,&#10;      section,&#10;      message,&#10;      status: 'inviato',&#10;      createdAt: Timestamp.now(),&#10;      updatedAt: Timestamp.now()&#10;    });&#10;  } catch (error) {&#10;    console.error('Errore nella creazione del feedback:', error);&#10;    throw new Error('Impossibile salvare il feedback');&#10;  }&#10;};&#10;&#10;/**&#10; * Aggiorna lo stato di un feedback&#10; */&#10;export const updateFeedbackStatus = async (&#10;  feedbackId: string,&#10;  status: 'inviato' | 'letto' | 'risolto'&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const feedbackRef = doc(db, FEEDBACK_COLLECTION, feedbackId);&#10;    await updateDoc(feedbackRef, {&#10;      status,&#10;      updatedAt: Timestamp.now()&#10;    });&#10;  } catch (error) {&#10;    console.error('Errore nell\'aggiornamento del feedback:', error);&#10;    throw new Error('Impossibile aggiornare il feedback');&#10;  }&#10;};&#10;&#10;/**&#10; * Elimina un feedback&#10; */&#10;export const deleteFeedback = async (feedbackId: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const feedbackRef = doc(db, FEEDBACK_COLLECTION, feedbackId);&#10;    await deleteDoc(feedbackRef);&#10;  } catch (error) {&#10;    console.error('Errore nell\'eliminazione del feedback:', error);&#10;    throw new Error('Impossibile eliminare il feedback');&#10;  }&#10;};&#10;&#10;/**&#10; * Recupera tutti i feedback con filtri opzionali&#10; */&#10;export const fetchFeedbacks = async (filters?: {&#10;  section?: string;&#10;  userId?: string;&#10;  status?: string;&#10;  startDate?: Date;&#10;  endDate?: Date;&#10;}): Promise&lt;BetaFeedback[]&gt; =&gt; {&#10;  try {&#10;    let q = query(collection(db, FEEDBACK_COLLECTION), orderBy('createdAt', 'desc'));&#10;&#10;    if (filters?.section) {&#10;      q = query(q, where('section', '==', filters.section));&#10;    }&#10;&#10;    if (filters?.userId) {&#10;      q = query(q, where('userId', '==', filters.userId));&#10;    }&#10;&#10;    if (filters?.status) {&#10;      q = query(q, where('status', '==', filters.status));&#10;    }&#10;&#10;    if (filters?.startDate) {&#10;      q = query(q, where('createdAt', '&gt;=', Timestamp.fromDate(filters.startDate)));&#10;    }&#10;&#10;    if (filters?.endDate) {&#10;      q = query(q, where('createdAt', '&lt;=', Timestamp.fromDate(filters.endDate)));&#10;    }&#10;&#10;    const snapshot = await getDocs(q);&#10;    return snapshot.docs.map(doc =&gt; {&#10;      const data = doc.data();&#10;      return {&#10;        id: doc.id,&#10;        userId: data.userId,&#10;        userEmail: data.userEmail,&#10;        userName: data.userName,&#10;        section: data.section,&#10;        message: data.message,&#10;        status: data.status,&#10;        createdAt: data.createdAt.toDate(),&#10;        updatedAt: data.updatedAt?.toDate()&#10;      };&#10;    });&#10;  } catch (error) {&#10;    console.error('Errore nel recupero dei feedback:', error);&#10;    throw new Error('Impossibile recuperare i feedback');&#10;  }&#10;};&#10;&#10;/**&#10; * Recupera le sezioni uniche dai feedback per i filtri&#10; */&#10;export const getUniqueSections = async (): Promise&lt;string[]&gt; =&gt; {&#10;  try {&#10;    const snapshot = await getDocs(collection(db, FEEDBACK_COLLECTION));&#10;    const sections = new Set&lt;string&gt;();&#10;&#10;    snapshot.docs.forEach(doc =&gt; {&#10;      const data = doc.data();&#10;      if (data.section) {&#10;        sections.add(data.section);&#10;      }&#10;    });&#10;&#10;    return Array.from(sections).sort();&#10;  } catch (error) {&#10;    console.error('Errore nel recupero delle sezioni:', error);&#10;    return [];&#10;  }&#10;};&#10;&#10;/**&#10; * Recupera gli utenti unici che hanno inviato feedback&#10; */&#10;export const getUniqueUsers = async (): Promise&lt;Array&lt;{userId: string, userEmail: string}&gt;&gt; =&gt; {&#10;  try {&#10;    const snapshot = await getDocs(collection(db, FEEDBACK_COLLECTION));&#10;    const users = new Map&lt;string, string&gt;();&#10;&#10;    snapshot.docs.forEach(doc =&gt; {&#10;      const data = doc.data();&#10;      if (data.userId &amp;&amp; data.userEmail) {&#10;        users.set(data.userId, data.userEmail);&#10;      }&#10;    });&#10;&#10;    return Array.from(users.entries()).map(([userId, userEmail]) =&gt; ({&#10;      userId,&#10;      userEmail&#10;    })).sort((a, b) =&gt; a.userEmail.localeCompare(b.userEmail));&#10;  } catch (error) {&#10;    console.error('Errore nel recupero degli utenti:', error);&#10;    return [];&#10;  }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firebase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firebase.ts" />
              <option name="originalContent" value="import { initializeApp } from 'firebase/app';&#10;import { getAuth, GoogleAuthProvider } from 'firebase/auth';&#10;import { getFirestore } from 'firebase/firestore';&#10;&#10;// ATTENZIONE: Sostituisci questo oggetto con la configurazione del tuo progetto Firebase!&#10;const firebaseConfig = {&#10;  apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;  authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;  projectId: &quot;curiow-432ed&quot;,&#10;  storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;  messagingSenderId: &quot;115136967854&quot;,&#10;  appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;  measurementId: &quot;G-LF4YY7HHR3&quot;&#10;};&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;&#10;// Configura Google Auth Provider&#10;export const googleProvider = new GoogleAuthProvider();&#10;googleProvider.setCustomParameters({&#10;  prompt: 'select_account'&#10;});&#10;&#10;// Esporta i servizi che ti servono&#10;export const auth = getAuth(app);&#10;export const db = getFirestore(app);&#10;&#10;" />
              <option name="updatedContent" value="import { initializeApp } from 'firebase/app';&#10;import { getAuth, GoogleAuthProvider } from 'firebase/auth';&#10;import { getFirestore } from 'firebase/firestore';&#10;&#10;// ATTENZIONE: Sostituisci questo oggetto con la configurazione del tuo progetto Firebase!&#10;const firebaseConfig = {&#10;  apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;  authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;  projectId: &quot;curiow-432ed&quot;,&#10;  storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;  messagingSenderId: &quot;115136967854&quot;,&#10;  appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;  measurementId: &quot;G-LF4YY7HHR3&quot;&#10;};&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;&#10;// Configura Google Auth Provider&#10;export const googleProvider = new GoogleAuthProvider();&#10;googleProvider.setCustomParameters({&#10;  prompt: 'select_account'&#10;});&#10;&#10;// Esporta i servizi che ti servono&#10;export const auth = getAuth(app);&#10;export const db = getFirestore(app);&#10;&#10;export const getIdToken = async (): Promise&lt;string | null&gt; =&gt; {&#10;    const user = auth.currentUser;&#10;    if (user) {&#10;        return await user.getIdToken();&#10;    }&#10;    return null;&#10;    };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firestoreService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firestoreService.ts" />
              <option name="originalContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  setDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  query,&#10;  limit,&#10;  onSnapshot,&#10;  Unsubscribe,&#10;  orderBy,&#10;  where,&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { Gem, Channel, User, SavedList, UserQuestion, UserRole, TopicSuggestion, ListWithItems } from '../types';&#10;import { getDefaultPermissions } from './roleService';&#10;import * as listService from './listService';&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchChannels = async (): Promise&lt;Channel[]&gt; =&gt; {&#10;  try {&#10;    const channelsCollection = collection(db, 'channels');&#10;    const channelSnapshot = await getDocs(channelsCollection);&#10;    return channelSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as Channel));&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching channels:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchGems = async (maxCount: number = 20): Promise&lt;Gem[]&gt; =&gt; {&#10;    try {&#10;        const gemsCollection = collection(db, 'gems');&#10;        const q = query(gemsCollection, limit(maxCount));&#10;        const gemSnapshot = await getDocs(q);&#10;        // Ritorniamo gemme con userQuestions vuoto, verrà popolato dal listener se necessario&#10;        return gemSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data(), userQuestions: [] } as Gem));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching gems:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const fetchUserProfile = async (uid: string): Promise&lt;User | null&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        return userDoc.exists() ? (userDoc.data() as User) : null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user profile:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export const fetchUserSavedLists = async (uid: string): Promise&lt;SavedList[]&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        if (userDoc.exists() &amp;&amp; userDoc.data().savedLists) {&#10;            return userDoc.data().savedLists;&#10;        }&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user saved lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;&#10;// --- Write Operations ---&#10;&#10;export const createUserProfile = async (uid: string, email: string, firstName: string, lastName: string, role: UserRole = UserRole.USER): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const defaultLists: SavedList[] = [&#10;        { id: 'default', name: 'Preferiti Generici', gemIds: [] }&#10;    ];&#10;    const permissions = getDefaultPermissions(role);&#10;&#10;    await setDoc(userDocRef, {&#10;        email, &#10;        firstName, &#10;        lastName,&#10;        role,&#10;        permissions,&#10;        createdAt: new Date(),&#10;        lastLoginAt: new Date(),&#10;        savedLists: defaultLists&#10;    });&#10;};&#10;&#10;export const updateUserProfile = async (uid: string, data: Partial&lt;User&gt;): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, data);&#10;};&#10;&#10;export const updateUserSavedLists = async (uid:string, lists: SavedList[]): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, { savedLists: lists });&#10;};&#10;&#10;export const addUserQuestion = async (gemId: string, question: string): Promise&lt;void&gt; =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    await addDoc(questionsCollection, {&#10;        question,&#10;        answer: '',&#10;        isGenerating: true,&#10;        createdAt: new Date(),&#10;    });&#10;};&#10;&#10;&#10;// --- Listeners ---&#10;&#10;export const listenToUserQuestions = (gemId: string, callback: (questions: UserQuestion[]) =&gt; void): Unsubscribe =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    const q = query(questionsCollection, orderBy('createdAt', 'desc'));&#10;    &#10;    return onSnapshot(q, (snapshot) =&gt; {&#10;        const questions = snapshot.docs.map(doc =&gt; ({&#10;            id: doc.id,&#10;            ...doc.data()&#10;        } as UserQuestion));&#10;        callback(questions);&#10;    });&#10;};&#10;&#10;// --- Topic Suggestions Operations ---&#10;&#10;export const fetchTopicSuggestions = async (status?: 'pending' | 'approved' | 'converted'): Promise&lt;TopicSuggestion[]&gt; =&gt; {&#10;    try {&#10;        const topicsCollection = collection(db, 'topicSuggestions');&#10;        let q = query(topicsCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (status) {&#10;            q = query(topicsCollection, where('status', '==', status), orderBy('createdAt', 'desc'));&#10;        }&#10;&#10;        const topicSnapshot = await getDocs(q);&#10;        // Filtra gli elementi eliminati lato client per evitare problemi con indici Firestore&#10;        const topics = topicSnapshot.docs&#10;            .map(doc =&gt; ({ id: doc.id, ...doc.data() } as TopicSuggestion))&#10;            .filter(topic =&gt; !topic.deleted); // Filtra solo quelli che hanno deleted = true&#10;&#10;        return topics;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching topic suggestions:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const createTopicSuggestion = async (&#10;  title: string,&#10;  summary: string,&#10;  tags: string[],&#10;  createdBy: string,&#10;  originalSuggestion?: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  const topicsCollection = collection(db, 'topicSuggestions');&#10;  await addDoc(topicsCollection, {&#10;    title,&#10;    summary,&#10;    originalSuggestion: originalSuggestion || '',&#10;    tags,&#10;    createdBy,&#10;    status: 'pending',&#10;    createdAt: new Date(),&#10;    updatedAt: new Date(),&#10;  });&#10;};&#10;&#10;export const updateTopicSuggestion = async (id: string, data: Partial&lt;TopicSuggestion&gt;): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { ...data, updatedAt: new Date() });&#10;};&#10;&#10;export const deleteTopicSuggestion = async (id: string): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { deleted: true, updatedAt: new Date() });&#10;};&#10;&#10;// --- User Management Operations ---&#10;&#10;export const fetchAllUsers = async (limit?: number): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        const usersCollection = collection(db, 'users');&#10;        let q = query(usersCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (limit) {&#10;            q = query(usersCollection, orderBy('createdAt', 'desc'), limit(limit));&#10;        }&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const searchUsers = async (searchTerm: string): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        // Nota: Firestore non supporta ricerca full-text nativa, quindi facciamo una ricerca per email&#10;        const usersCollection = collection(db, 'users');&#10;        const q = query(&#10;            usersCollection,&#10;            where('email', '&gt;=', searchTerm.toLowerCase()),&#10;            where('email', '&lt;=', searchTerm.toLowerCase() + '\uf8ff')&#10;        );&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error searching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const promoteUserRole = async (userId: string, newRole: UserRole): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', userId);&#10;    const newPermissions = getDefaultPermissions(newRole);&#10;&#10;    await updateDoc(userDocRef, {&#10;        role: newRole,&#10;        permissions: newPermissions,&#10;        updatedAt: new Date()&#10;    });&#10;};&#10;&#10;// --- Nuove funzioni per gestione liste (con retrocompatibilità) ---&#10;&#10;export const fetchUserListsNew = async (uid: string): Promise&lt;ListWithItems[]&gt; =&gt; {&#10;    try {&#10;        // Prima prova a caricare le liste dalla nuova struttura&#10;        const newLists = await listService.fetchUserLists(uid);&#10;&#10;        if (newLists.length &gt; 0) {&#10;            console.log('Found lists in new structure:', newLists.length);&#10;            return newLists;&#10;        }&#10;&#10;        // Se non ci sono liste nella nuova struttura, controlla le vecchie&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Found old lists:', oldLists.length);&#10;&#10;        if (oldLists.length &gt; 0) {&#10;            // Converti le vecchie liste nel formato nuovo per compatibilità UI&#10;            const convertedLists = oldLists.map(oldList =&gt; ({&#10;                id: oldList.id,&#10;                name: oldList.name,&#10;                isPublic: false,&#10;                createdBy: uid,&#10;                createdAt: new Date(),&#10;                updatedAt: new Date(),&#10;                gemIds: oldList.gemIds,&#10;                itemCount: oldList.gemIds.length,&#10;                userRole: 'owner' as const&#10;            }));&#10;&#10;            console.log('Converted old lists to new format:', convertedLists);&#10;            return convertedLists;&#10;        }&#10;&#10;        // Se non ci sono liste né vecchie né nuove, ritorna array vuoto&#10;        console.log('No lists found for user:', uid);&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const migrateUserToNewListStructure = async (uid: string): Promise&lt;boolean&gt; =&gt; {&#10;    try {&#10;        console.log('Starting migration for user:', uid);&#10;&#10;        // Verifica se l'utente ha già liste nella nuova struttura&#10;        const existingNewLists = await listService.fetchUserLists(uid);&#10;        console.log('Existing new lists found:', existingNewLists.length);&#10;&#10;        if (existingNewLists.length &gt; 0) {&#10;            console.log('User already migrated, skipping migration');&#10;            return true; // Già migrato&#10;        }&#10;&#10;        // Ottieni le vecchie liste&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Old lists found:', oldLists.length, oldLists);&#10;&#10;        if (oldLists.length === 0) {&#10;            console.log('No old lists found, creating default favorites list');&#10;            // Crea una lista preferiti di default nella nuova struttura&#10;            await listService.createList('Preferiti', uid, 'I tuoi contenuti preferiti', false, '#3B82F6', '❤️');&#10;            console.log('Default favorites list created');&#10;            return true;&#10;        }&#10;&#10;        console.log('Migrating old lists to new structure...');&#10;        // Migra le vecchie liste&#10;        await listService.migrateUserLists(uid, oldLists);&#10;        console.log('Migration completed successfully');&#10;&#10;        // Rimuovi le vecchie liste dal documento utente solo dopo migrazione riuscita&#10;        await updateDoc(doc(db, 'users', uid), {&#10;            savedLists: [],&#10;            migratedToNewLists: true,&#10;            migratedAt: new Date()&#10;        });&#10;        console.log('Old lists cleared from user document');&#10;&#10;        return true;&#10;    } catch (error) {&#10;        console.error(&quot;Error migrating user lists:&quot;, error);&#10;        return false;&#10;    }&#10;};&#10;&#10;// Funzioni wrapper per compatibilità con l'UI esistente&#10;export const createNewList = async (uid: string, name: string): Promise&lt;string&gt; =&gt; {&#10;    return await listService.createList(name, uid);&#10;};&#10;&#10;export const addGemToUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.addGemToList(listId, gemId, uid);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1 &amp;&amp; !oldLists[listIndex].gemIds.includes(gemId)) {&#10;            oldLists[listIndex].gemIds.push(gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;export const removeGemFromUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.removeGemFromList(listId, gemId);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1) {&#10;            oldLists[listIndex].gemIds = oldLists[listIndex].gemIds.filter(id =&gt; id !== gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;// Esporta le funzioni del nuovo servizio liste per uso diretto&#10;export const {&#10;    createList,&#10;    addGemToList,&#10;    removeGemFromList,&#10;    fetchUserLists,&#10;    fetchListById,&#10;    updateList,&#10;    deleteList,&#10;    addMemberToList,&#10;    removeMemberFromList,&#10;    checkGemInList&#10;} = listService;&#10;" />
              <option name="updatedContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  setDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  query,&#10;  limit,&#10;  onSnapshot,&#10;  Unsubscribe,&#10;  orderBy,&#10;  where,&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { Gem, Channel, User, SavedList, UserQuestion, UserRole, TopicSuggestion, ListWithItems } from '../types';&#10;import { getDefaultPermissions } from './roleService';&#10;import * as listService from './listService';&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchChannels = async (): Promise&lt;Channel[]&gt; =&gt; {&#10;  try {&#10;    const channelsCollection = collection(db, 'channels');&#10;    const channelSnapshot = await getDocs(channelsCollection);&#10;    return channelSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as Channel));&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching channels:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchGems = async (maxCount: number = 20): Promise&lt;Gem[]&gt; =&gt; {&#10;    try {&#10;        const gemsCollection = collection(db, 'gems');&#10;        const q = query(gemsCollection, limit(maxCount));&#10;        const gemSnapshot = await getDocs(q);&#10;        // Ritorniamo gemme con userQuestions vuoto, verrà popolato dal listener se necessario&#10;        return gemSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data(), userQuestions: [] } as Gem));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching gems:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const fetchUserProfile = async (uid: string): Promise&lt;User | null&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        return userDoc.exists() ? (userDoc.data() as User) : null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user profile:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export const fetchUserSavedLists = async (uid: string): Promise&lt;SavedList[]&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        if (userDoc.exists() &amp;&amp; userDoc.data().savedLists) {&#10;            return userDoc.data().savedLists;&#10;        }&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user saved lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;&#10;// --- Write Operations ---&#10;&#10;export const createUserProfile = async (uid: string, email: string, firstName: string, lastName: string, role: UserRole = UserRole.USER): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const defaultLists: SavedList[] = [&#10;        { id: 'default', name: 'Preferiti Generici', gemIds: [] }&#10;    ];&#10;    const permissions = getDefaultPermissions(role);&#10;&#10;    await setDoc(userDocRef, {&#10;        email, &#10;        firstName, &#10;        lastName,&#10;        role,&#10;        permissions,&#10;        createdAt: new Date(),&#10;        lastLoginAt: new Date(),&#10;        savedLists: defaultLists&#10;    });&#10;};&#10;&#10;export const updateUserProfile = async (uid: string, data: Partial&lt;User&gt;): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, data);&#10;};&#10;&#10;export const updateUserSavedLists = async (uid:string, lists: SavedList[]): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, { savedLists: lists });&#10;};&#10;&#10;export const addUserQuestion = async (gemId: string, question: string): Promise&lt;void&gt; =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    await addDoc(questionsCollection, {&#10;        question,&#10;        answer: '',&#10;        isGenerating: true,&#10;        createdAt: new Date(),&#10;    });&#10;};&#10;&#10;&#10;// --- Listeners ---&#10;&#10;export const listenToUserQuestions = (gemId: string, callback: (questions: UserQuestion[]) =&gt; void): Unsubscribe =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    const q = query(questionsCollection, orderBy('createdAt', 'desc'));&#10;    &#10;    return onSnapshot(q, (snapshot) =&gt; {&#10;        const questions = snapshot.docs.map(doc =&gt; ({&#10;            id: doc.id,&#10;            ...doc.data()&#10;        } as UserQuestion));&#10;        callback(questions);&#10;    });&#10;};&#10;&#10;// --- Topic Suggestions Operations ---&#10;&#10;export const fetchTopicSuggestions = async (status?: 'pending' | 'approved' | 'converted'): Promise&lt;TopicSuggestion[]&gt; =&gt; {&#10;    try {&#10;        const topicsCollection = collection(db, 'topicSuggestions');&#10;        let q = query(topicsCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (status) {&#10;            q = query(topicsCollection, where('status', '==', status), orderBy('createdAt', 'desc'));&#10;        }&#10;&#10;        const topicSnapshot = await getDocs(q);&#10;        // Filtra gli elementi eliminati lato client per evitare problemi con indici Firestore&#10;        const topics = topicSnapshot.docs&#10;            .map(doc =&gt; ({ id: doc.id, ...doc.data() } as TopicSuggestion))&#10;            .filter(topic =&gt; !topic.deleted); // Filtra solo quelli che hanno deleted = true&#10;&#10;        return topics;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching topic suggestions:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const createTopicSuggestion = async (&#10;  title: string,&#10;  objective: string,&#10;  tags: string[],&#10;  createdBy: string,&#10;  originalSuggestion?: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  const topicsCollection = collection(db, 'topicSuggestions');&#10;  await addDoc(topicsCollection, {&#10;    title,&#10;    objective,&#10;    originalSuggestion: originalSuggestion || '',&#10;    tags,&#10;    createdBy,&#10;    status: 'pending',&#10;    createdAt: new Date(),&#10;    updatedAt: new Date(),&#10;  });&#10;};&#10;&#10;export const updateTopicSuggestion = async (id: string, data: Partial&lt;TopicSuggestion&gt;): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { ...data, updatedAt: new Date() });&#10;};&#10;&#10;export const deleteTopicSuggestion = async (id: string): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { deleted: true, updatedAt: new Date() });&#10;};&#10;&#10;// --- User Management Operations ---&#10;&#10;export const fetchAllUsers = async (limit?: number): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        const usersCollection = collection(db, 'users');&#10;        let q = query(usersCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (limit) {&#10;            q = query(usersCollection, orderBy('createdAt', 'desc'), limit(limit));&#10;        }&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const searchUsers = async (searchTerm: string): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        // Nota: Firestore non supporta ricerca full-text nativa, quindi facciamo una ricerca per email&#10;        const usersCollection = collection(db, 'users');&#10;        const q = query(&#10;            usersCollection,&#10;            where('email', '&gt;=', searchTerm.toLowerCase()),&#10;            where('email', '&lt;=', searchTerm.toLowerCase() + '\uf8ff')&#10;        );&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error searching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const promoteUserRole = async (userId: string, newRole: UserRole): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', userId);&#10;    const newPermissions = getDefaultPermissions(newRole);&#10;&#10;    await updateDoc(userDocRef, {&#10;        role: newRole,&#10;        permissions: newPermissions,&#10;        updatedAt: new Date()&#10;    });&#10;};&#10;&#10;// --- Nuove funzioni per gestione liste (con retrocompatibilità) ---&#10;&#10;export const fetchUserListsNew = async (uid: string): Promise&lt;ListWithItems[]&gt; =&gt; {&#10;    try {&#10;        // Prima prova a caricare le liste dalla nuova struttura&#10;        const newLists = await listService.fetchUserLists(uid);&#10;&#10;        if (newLists.length &gt; 0) {&#10;            console.log('Found lists in new structure:', newLists.length);&#10;            return newLists;&#10;        }&#10;&#10;        // Se non ci sono liste nella nuova struttura, controlla le vecchie&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Found old lists:', oldLists.length);&#10;&#10;        if (oldLists.length &gt; 0) {&#10;            // Converti le vecchie liste nel formato nuovo per compatibilità UI&#10;            const convertedLists = oldLists.map(oldList =&gt; ({&#10;                id: oldList.id,&#10;                name: oldList.name,&#10;                isPublic: false,&#10;                createdBy: uid,&#10;                createdAt: new Date(),&#10;                updatedAt: new Date(),&#10;                gemIds: oldList.gemIds,&#10;                itemCount: oldList.gemIds.length,&#10;                userRole: 'owner' as const&#10;            }));&#10;&#10;            console.log('Converted old lists to new format:', convertedLists);&#10;            return convertedLists;&#10;        }&#10;&#10;        // Se non ci sono liste né vecchie né nuove, ritorna array vuoto&#10;        console.log('No lists found for user:', uid);&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const migrateUserToNewListStructure = async (uid: string): Promise&lt;boolean&gt; =&gt; {&#10;    try {&#10;        console.log('Starting migration for user:', uid);&#10;&#10;        // Verifica se l'utente ha già liste nella nuova struttura&#10;        const existingNewLists = await listService.fetchUserLists(uid);&#10;        console.log('Existing new lists found:', existingNewLists.length);&#10;&#10;        if (existingNewLists.length &gt; 0) {&#10;            console.log('User already migrated, skipping migration');&#10;            return true; // Già migrato&#10;        }&#10;&#10;        // Ottieni le vecchie liste&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Old lists found:', oldLists.length, oldLists);&#10;&#10;        if (oldLists.length === 0) {&#10;            console.log('No old lists found, creating default favorites list');&#10;            // Crea una lista preferiti di default nella nuova struttura&#10;            await listService.createList('Preferiti', uid, 'I tuoi contenuti preferiti', false, '#3B82F6', '❤️');&#10;            console.log('Default favorites list created');&#10;            return true;&#10;        }&#10;&#10;        console.log('Migrating old lists to new structure...');&#10;        // Migra le vecchie liste&#10;        await listService.migrateUserLists(uid, oldLists);&#10;        console.log('Migration completed successfully');&#10;&#10;        // Rimuovi le vecchie liste dal documento utente solo dopo migrazione riuscita&#10;        await updateDoc(doc(db, 'users', uid), {&#10;            savedLists: [],&#10;            migratedToNewLists: true,&#10;            migratedAt: new Date()&#10;        });&#10;        console.log('Old lists cleared from user document');&#10;&#10;        return true;&#10;    } catch (error) {&#10;        console.error(&quot;Error migrating user lists:&quot;, error);&#10;        return false;&#10;    }&#10;};&#10;&#10;// Funzioni wrapper per compatibilità con l'UI esistente&#10;export const createNewList = async (uid: string, name: string): Promise&lt;string&gt; =&gt; {&#10;    return await listService.createList(name, uid);&#10;};&#10;&#10;export const addGemToUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.addGemToList(listId, gemId, uid);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1 &amp;&amp; !oldLists[listIndex].gemIds.includes(gemId)) {&#10;            oldLists[listIndex].gemIds.push(gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;export const removeGemFromUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.removeGemFromList(listId, gemId);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1) {&#10;            oldLists[listIndex].gemIds = oldLists[listIndex].gemIds.filter(id =&gt; id !== gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;// Esporta le funzioni del nuovo servizio liste per uso diretto&#10;export const {&#10;    createList,&#10;    addGemToList,&#10;    removeGemFromList,&#10;    fetchUserLists,&#10;    fetchListById,&#10;    updateList,&#10;    deleteList,&#10;    addMemberToList,&#10;    removeMemberFromList,&#10;    checkGemInList&#10;} = listService;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/roleService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/roleService.ts" />
              <option name="originalContent" value="import { UserRole, UserPermissions } from '../types';&#10;&#10;/**&#10; * Restituisce i permessi di default per ogni ruolo&#10; */&#10;export const getDefaultPermissions = (role: UserRole): UserPermissions =&gt; {&#10;  switch (role) {&#10;    case UserRole.ADMIN:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: true,&#10;        canManageUsers: true,&#10;        canModerateContent: true,&#10;" />
              <option name="updatedContent" value="import { UserRole, UserPermissions } from '../types.js';&#10;&#10;/**&#10; * Restituisce i permessi di default per ogni ruolo&#10; */&#10;export const getDefaultPermissions = (role: UserRole): UserPermissions =&gt; {&#10;  switch (role) {&#10;    case UserRole.ADMIN:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: true,&#10;        canManageUsers: true,&#10;        canModerateContent: true,&#10;        canViewDashboard: true,&#10;      };&#10;&#10;    case UserRole.MODERATOR:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: true,&#10;        canViewDashboard: true,&#10;      };&#10;&#10;    case UserRole.BETATESTER:&#10;      return {&#10;        canCreateGems: false,&#10;        canEditGems: false,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: false,&#10;        canViewDashboard: false,&#10;      };&#10;&#10;    case UserRole.USER:&#10;    default:&#10;      return {&#10;        canCreateGems: false,&#10;        canEditGems: false,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: false,&#10;        canViewDashboard: false,&#10;      };&#10;  }&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha un permesso specifico&#10; */&#10;export const hasPermission = (&#10;  userPermissions: UserPermissions,&#10;  permission: keyof UserPermissions&#10;): boolean =&gt; {&#10;  return userPermissions[permission] === true;&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha almeno uno dei ruoli specificati&#10; */&#10;export const hasRole = (userRole: UserRole, allowedRoles: UserRole[]): boolean =&gt; {&#10;  return allowedRoles.includes(userRole);&#10;};&#10;&#10;/**&#10; * Verifica se un utente è admin&#10; */&#10;export const isAdmin = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Verifica se un utente è moderatore o admin&#10; */&#10;export const isModerator = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.MODERATOR || userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Hook personalizzato per verificare i permessi dell'utente corrente&#10; */&#10;export const useUserPermissions = (user: { role: UserRole; permissions: UserPermissions } | null) =&gt; {&#10;  if (!user) {&#10;    return {&#10;      canCreateGems: false,&#10;      canEditGems: false,&#10;      canDeleteGems: false,&#10;      canManageUsers: false,&#10;      canModerateContent: false,&#10;      isAdmin: false,&#10;      isModerator: false,&#10;    };&#10;  }&#10;&#10;  return {&#10;    ...user.permissions,&#10;    isAdmin: isAdmin(user.role),&#10;    isModerator: isModerator(user.role),&#10;  };&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types.ts" />
              <option name="originalContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[];&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  summary: string; // Sommario generato/modificato (precedentemente 'text')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}&#10;" />
              <option name="updatedContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;,&#10;  BETATESTER = &quot;betatester&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[];&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    createdAt: Date;&#10;    isActive: boolean;&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter =&#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  title: string; // Titolo generato/modificato&#10;  objective: string; // Sommario generato/modificato (precedentemente 'summary')&#10;  originalSuggestion?: string; // L'idea originale dell'utente&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}&#10;&#10;export interface BetaFeedback {&#10;  id: string;&#10;  userId: string;&#10;  userEmail: string;&#10;  userName: string; // Nome completo dell'utente&#10;  section: string;&#10;  message: string;&#10;  status: 'inviato' | 'letto' | 'risolto';&#10;  createdAt: Date;&#10;  updatedAt?: Date;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/adminUtils.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/adminUtils.ts" />
              <option name="updatedContent" value="import { doc, updateDoc } from 'firebase/firestore';&#10;import { db } from '../services/firebase';&#10;import { UserRole } from '../types';&#10;import { getDefaultPermissions } from '../services/roleService';&#10;&#10;/**&#10; * Funzione di utilità per promuovere un utente ad admin&#10; * Utilizzare solo in fase di sviluppo o tramite console admin&#10; */&#10;export const promoteUserToAdmin = async (uid: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const adminPermissions = getDefaultPermissions(UserRole.ADMIN);&#10;    &#10;    await updateDoc(userDocRef, {&#10;      role: UserRole.ADMIN,&#10;      permissions: adminPermissions,&#10;      updatedAt: new Date()&#10;    });&#10;    &#10;    console.log(`User ${uid} promoted to admin successfully`);&#10;  } catch (error) {&#10;    console.error('Error promoting user to admin:', error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;/**&#10; * Funzione di utilità per promuovere un utente a moderatore&#10; */&#10;export const promoteUserToModerator = async (uid: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const moderatorPermissions = getDefaultPermissions(UserRole.MODERATOR);&#10;    &#10;    await updateDoc(userDocRef, {&#10;      role: UserRole.MODERATOR,&#10;      permissions: moderatorPermissions,&#10;      updatedAt: new Date()&#10;    });&#10;    &#10;    console.log(`User ${uid} promoted to moderator successfully`);&#10;  } catch (error) {&#10;    console.error('Error promoting user to moderator:', error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;/**&#10; * Funzione di utilità per verificare i permessi di un utente&#10; */&#10;export const checkUserPermissions = async (uid: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const { fetchUserProfile } = await import('../services/firestoreService');&#10;    const userProfile = await fetchUserProfile(uid);&#10;    &#10;    if (userProfile) {&#10;      console.log('User Profile:', userProfile);&#10;      console.log('Role:', userProfile.role);&#10;      console.log('Permissions:', userProfile.permissions);&#10;    } else {&#10;      console.log('User profile not found');&#10;    }&#10;  } catch (error) {&#10;    console.error('Error checking user permissions:', error);&#10;  }&#10;};&#10;&#10;// Esponi le funzioni globalmente per l'uso in console del browser&#10;declare global {&#10;  interface Window {&#10;    adminUtils: {&#10;      promoteUserToAdmin: typeof promoteUserToAdmin;&#10;      promoteUserToModerator: typeof promoteUserToModerator;&#10;      checkUserPermissions: typeof checkUserPermissions;&#10;    };&#10;  }&#10;}&#10;&#10;if (typeof window !== 'undefined') {&#10;  window.adminUtils = {&#10;    promoteUserToAdmin,&#10;    promoteUserToModerator,&#10;    checkUserPermissions&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>