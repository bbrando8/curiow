<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/firestore.rules">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/firestore.rules" />
              <option name="updatedContent" value="rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;    // Regole per gli utenti&#10;    match /users/{userId} {&#10;      allow read, write: if request.auth != null &amp;&amp; request.auth.uid == userId;&#10;      // Permetti agli admin di leggere tutti gli utenti&#10;      allow read: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;&#10;        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';&#10;    }&#10;    &#10;    // Regole per le gemme (lettura pubblica, scrittura per admin)&#10;    match /gems/{gemId} {&#10;      allow read: if true; // Lettura pubblica&#10;      allow write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;&#10;        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.canCreateGems == true;&#10;      &#10;      // Domande degli utenti sulle gemme&#10;      match /userQuestions/{questionId} {&#10;        allow read: if true;&#10;        allow write: if request.auth != null;&#10;      }&#10;    }&#10;    &#10;    // Regole per i canali (lettura pubblica)&#10;    match /channels/{channelId} {&#10;      allow read: if true;&#10;      allow write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;&#10;        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';&#10;    }&#10;    &#10;    // Regole per i suggerimenti di argomenti&#10;    match /topicSuggestions/{suggestionId} {&#10;      allow read, write: if request.auth != null;&#10;    }&#10;    &#10;    // ===== REGOLE PER LE NUOVE LISTE =====&#10;    &#10;    // Regole per le liste&#10;    match /lists/{listId} {&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        resource.data.createdBy == request.auth.uid;&#10;      allow create: if request.auth != null;&#10;      allow read: if request.auth != null &amp;&amp; resource.data.isPublic == true;&#10;    }&#10;    &#10;    // Regole per i membri delle liste&#10;    match /list_members/{memberId} {&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        resource.data.userId == request.auth.uid;&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &amp;&amp;&#10;        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.createdBy == request.auth.uid;&#10;    }&#10;    &#10;    // Regole per gli elementi delle liste&#10;    match /list_items/{itemId} {&#10;      allow read, write: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &amp;&amp;&#10;        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.createdBy == request.auth.uid;&#10;      allow read: if request.auth != null &amp;&amp; &#10;        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &amp;&amp;&#10;        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.isPublic == true;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;curiow&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^22.14.0&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.2&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.2&quot;,&#10;    &quot;vite&quot;: &quot;^6.2.0&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;curiow&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;,&#10;    &quot;seed&quot;: &quot;node --loader ts-node/esm seed.ts&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@google/genai&quot;: &quot;^1.13.0&quot;,&#10;    &quot;firebase&quot;: &quot;^12.1.0&quot;,&#10;    &quot;react&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.1.1&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^22.14.0&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.2&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.2&quot;,&#10;    &quot;vite&quot;: &quot;^6.2.0&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useCallback, useMemo } from 'react';&#10;import { Gem, User, SavedList, Channel, Filter, Topic, ListWithItems } from './types';&#10;import { TOPICS } from './constants';&#10;import { auth } from './services/firebase';&#10;import { onAuthStateChanged, User as FirebaseUser, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';&#10;import * as firestoreService from './services/firestoreService';&#10;import Header from './components/Header';&#10;import GemCard from './components/GemCard';&#10;import GemDetailView from './components/GemDetailView';&#10;import LoginModal from './components/LoginModal';&#10;import SavedView from './components/SavedView';&#10;import ProfileView from './components/ProfileView';&#10;import AdminDashboard from './components/admin/AdminDashboard';&#10;import TopicManagement from './components/admin/TopicManagement';&#10;import { SparklesIcon } from './components/icons';&#10;import SaveToListModal from './components/SaveToListModal';&#10;// Import admin utils in development&#10;import './utils/adminUtils';&#10;&#10;type View = 'feed' | 'detail' | 'saved' | 'profile' | 'dashboard' | 'topics';&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [gems, setGems] = useState&lt;Gem[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;Channel[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  &#10;  const [firebaseUser, setFirebaseUser] = useState&lt;FirebaseUser | null&gt;(null);&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [userLists, setUserLists] = useState&lt;ListWithItems[]&gt;([]);&#10;  const [isMigrated, setIsMigrated] = useState(false);&#10;&#10;  const [filter, setFilter] = useState&lt;Filter&gt;({ type: 'all' });&#10;  const [showLoginModal, setShowLoginModal] = useState(false);&#10;  const [currentView, setCurrentView] = useState&lt;View&gt;('feed');&#10;  const [selectedGemId, setSelectedGemId] = useState&lt;string | null&gt;(null);&#10;  &#10;  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);&#10;  const [gemToSaveId, setGemToSaveId] = useState&lt;string | null&gt;(null);&#10;&#10;  // Fetch initial static-like data&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;        setIsLoading(true);&#10;        const [fetchedGems, fetchedChannels] = await Promise.all([&#10;            firestoreService.fetchGems(),&#10;            firestoreService.fetchChannels(),&#10;        ]);&#10;        setGems(fetchedGems);&#10;        setChannels(fetchedChannels);&#10;        setIsLoading(false);&#10;    };&#10;    fetchInitialData();&#10;  }, []);&#10;&#10;  // Auth state listener&#10;  useEffect(() =&gt; {&#10;      const unsubscribe = onAuthStateChanged(auth, async (currentUser) =&gt; {&#10;          console.log('Auth state changed - currentUser:', currentUser?.uid);&#10;          setFirebaseUser(currentUser);&#10;          if (currentUser) {&#10;              let userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              console.log('Fetched user profile:', userProfile);&#10;&#10;              // Se il profilo non esiste, creane uno nuovo. Utile per utenti già esistenti in Auth ma non in Firestore.&#10;              if (!userProfile) {&#10;                  console.log(`Creating new profile for user ${currentUser.uid}`);&#10;                  const email = currentUser.email || 'no-email@example.com';&#10;                  const [firstName, lastName] = email.split('@')[0].split('.') || [email, ''];&#10;                  await firestoreService.createUserProfile(currentUser.uid, email, firstName, lastName || '');&#10;                  userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;                  console.log('Created new user profile:', userProfile);&#10;              }&#10;&#10;              // Migrazione automatica alle nuove liste&#10;              console.log('Attempting migration to new list structure...');&#10;              const migrationSuccess = await firestoreService.migrateUserToNewListStructure(currentUser.uid);&#10;              setIsMigrated(migrationSuccess);&#10;&#10;              // Carica le liste con la nuova struttura&#10;              const newUserLists = await firestoreService.fetchUserListsNew(currentUser.uid);&#10;              setUser(userProfile);&#10;              setUserLists(newUserLists);&#10;              setShowLoginModal(false);&#10;&#10;              console.log('Migration completed:', migrationSuccess);&#10;              console.log('Loaded user lists:', newUserLists);&#10;          } else {&#10;              // User is signed out&#10;              setUser(null);&#10;              setUserLists([]);&#10;              setIsMigrated(false);&#10;              setFilter({ type: 'all' });&#10;              setCurrentView('feed');&#10;          }&#10;      });&#10;      return () =&gt; unsubscribe();&#10;  }, []);&#10;  &#10;  // Listener for user questions on selected gem&#10;  useEffect(() =&gt; {&#10;    if (!selectedGemId) return;&#10;&#10;    const unsubscribe = firestoreService.listenToUserQuestions(selectedGemId, (questions) =&gt; {&#10;        setGems(prevGems =&gt; prevGems.map(gem =&gt; &#10;            gem.id === selectedGemId ? { ...gem, userQuestions: questions } : gem&#10;        ));&#10;    });&#10;&#10;    return () =&gt; unsubscribe();&#10;  }, [selectedGemId]);&#10;&#10;  const handleSignUpAttempt = async (email: string, pass: string, firstName: string, lastName: string) =&gt; {&#10;      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);&#10;      await firestoreService.createUserProfile(userCredential.user.uid, email, firstName, lastName);&#10;  };&#10;  &#10;  const handleLoginAttempt = async (email: string, pass: string) =&gt; {&#10;      await signInWithEmailAndPassword(auth, email, pass);&#10;  };&#10;&#10;  const handleLogout = () =&gt; {&#10;    signOut(auth);&#10;  };&#10;&#10;  const handleNavigate = (view: View) =&gt; {&#10;    console.log('Navigating to:', view); // Debug log&#10;    window.scrollTo(0, 0);&#10;    setCurrentView(view);&#10;  };&#10;  &#10;  const handleLoginRequest = () =&gt; {&#10;    if(!firebaseUser) setShowLoginModal(true);&#10;  }&#10;&#10;  const allFavoriteIds = useMemo(() =&gt; {&#10;    return Array.from(new Set(userLists.flatMap(list =&gt; list.gemIds)));&#10;  }, [userLists]);&#10;&#10;  const handleSaveRequest = (gemId: string) =&gt; {&#10;    setGemToSaveId(gemId);&#10;    setIsSaveModalOpen(true);&#10;  };&#10;&#10;  // Aggiorna le liste dell'utente con la nuova struttura&#10;  const updateUserLists = async (updatedLists: ListWithItems[]) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUserLists(updatedLists);&#10;      // Non serve più salvare nel documento utente, le liste sono in collezioni separate&#10;  };&#10;&#10;  const handleSaveToList = async (listId: string) =&gt; {&#10;    if (!gemToSaveId || !firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.addGemToUserList(firebaseUser.uid, listId, gemToSaveId);&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === listId &amp;&amp; !list.gemIds.includes(gemToSaveId)) {&#10;          return {&#10;            ...list,&#10;            gemIds: [...list.gemIds, gemToSaveId],&#10;            itemCount: list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error saving to list:', error);&#10;      alert('Errore nel salvare nella lista');&#10;    }&#10;  };&#10;  &#10;  const handleCreateListAndSave = async (listName: string) =&gt; {&#10;      if (!gemToSaveId || !firebaseUser) return;&#10;&#10;      try {&#10;        const newListId = await firestoreService.createNewList(firebaseUser.uid, listName);&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, newListId, gemToSaveId);&#10;&#10;        // Aggiungi la nuova lista allo stato locale&#10;        const newList: ListWithItems = {&#10;          id: newListId,&#10;          name: listName,&#10;          isPublic: false,&#10;          createdBy: firebaseUser.uid,&#10;          createdAt: new Date(),&#10;          updatedAt: new Date(),&#10;          gemIds: [gemToSaveId],&#10;          itemCount: 1,&#10;          userRole: 'owner'&#10;        };&#10;        setUserLists([...userLists, newList]);&#10;      } catch (error) {&#10;        console.error('Error creating list and saving:', error);&#10;        alert('Errore nella creazione della lista');&#10;      }&#10;  };&#10;&#10;  const handleToggleFavorite = async (gemId: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    const favoritesList = userLists.find(list =&gt; list.name === 'Preferiti' || list.id === 'default');&#10;    if (!favoritesList) return;&#10;&#10;    const isFav = favoritesList.gemIds.includes(gemId);&#10;&#10;    try {&#10;      if (isFav) {&#10;        await firestoreService.removeGemFromUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      } else {&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      }&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === favoritesList.id) {&#10;          return {&#10;            ...list,&#10;            gemIds: isFav&#10;              ? list.gemIds.filter(id =&gt; id !== gemId)&#10;              : [...list.gemIds, gemId],&#10;            itemCount: isFav ? list.itemCount - 1 : list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error toggling favorite:', error);&#10;      alert('Errore nel modificare i preferiti');&#10;    }&#10;  };&#10;  &#10;  const handleAddUserQuestion = async (gemId: string, question: string) =&gt; {&#10;      await firestoreService.addUserQuestion(gemId, question);&#10;  };&#10;&#10;  const handleSelectGem = (gemId: string) =&gt; {&#10;      setSelectedGemId(gemId);&#10;      handleNavigate('detail');&#10;  };&#10;  &#10;  const handleBackToFeed = () =&gt; {&#10;      setSelectedGemId(null);&#10;      handleNavigate('feed');&#10;  };&#10;  &#10;  const handleSelectTag = (tag: string) =&gt; {&#10;      setFilter({ type: 'tag', value: tag });&#10;      handleBackToFeed();&#10;  };&#10;  &#10;  const handleUpdateUser = async (updatedUser: User) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUser(updatedUser);&#10;      await firestoreService.updateUserProfile(firebaseUser.uid, {&#10;          firstName: updatedUser.firstName,&#10;          lastName: updatedUser.lastName,&#10;      });&#10;      alert(&quot;Profilo aggiornato!&quot;);&#10;  }&#10;&#10;  const filteredGems = gems.filter(gem =&gt; {&#10;      if (!gem.tags) return false; // Safety check&#10;      switch (filter.type) {&#10;        case 'all':&#10;            return true;&#10;        case 'favorites':&#10;            return firebaseUser ? allFavoriteIds.includes(gem.id) : false;&#10;        case 'topic':&#10;            return gem.topic === filter.value;&#10;        case 'channel':&#10;            const channel = channels.find(c =&gt; c.id === filter.value);&#10;            if (channel) {&#10;                return gem.tags.some(tag =&gt; channel.filterTags.includes(tag.toLowerCase()));&#10;            }&#10;            return false;&#10;        case 'tag':&#10;            return gem.tags.map(t =&gt; t.toLowerCase()).includes(filter.value.toLowerCase());&#10;        default:&#10;            return true;&#10;      }&#10;  });&#10;  &#10;  const selectedGem = gems.find(gem =&gt; gem.id === selectedGemId);&#10;&#10;  const renderFeed = () =&gt; (&#10;    &lt;&gt;&#10;        &lt;Header&#10;            isLoggedIn={!!firebaseUser}&#10;            user={user}&#10;            onLogin={() =&gt; setShowLoginModal(true)}&#10;            onLogout={handleLogout}&#10;            selectedFilter={filter}&#10;            onSelectFilter={setFilter}&#10;            onNavigate={handleNavigate}&#10;            channels={channels}&#10;        /&gt;&#10;        &lt;main className=&quot;max-w-xl mx-auto py-8 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {isLoading &amp;&amp; gems.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center text-center text-slate-500 dark:text-slate-400 pt-20&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-16 h-16 animate-pulse text-indigo-400&quot;/&gt;&#10;            &lt;p className=&quot;mt-4 text-lg font-semibold&quot;&gt;Stiamo preparando Curiow per te...&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm&quot;&gt;Un momento, stiamo cercando spunti interessanti.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {filteredGems.length &gt; 0 ? (&#10;                filteredGems.map(gem =&gt; (&#10;                    &lt;GemCard&#10;                        key={gem.id}&#10;                        gem={gem}&#10;                        isLoggedIn={!!firebaseUser}&#10;                        isFavorite={allFavoriteIds.includes(gem.id)}&#10;                        onSaveRequest={handleSaveRequest}&#10;                        onSelect={handleSelectGem}&#10;                        onLoginRequest={handleLoginRequest}&#10;                    /&gt;&#10;                ))&#10;            ) : (&#10;                &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma trovata&lt;/h3&gt;&#10;                    &lt;p className=&quot;mt-2&quot;&gt;Prova a selezionare un'altra categoria o filtro.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  const renderContent = () =&gt; {&#10;    switch (currentView) {&#10;        case 'detail':&#10;            return selectedGem ? (&#10;                &lt;GemDetailView&#10;                    gem={selectedGem}&#10;                    isFavorite={allFavoriteIds.includes(selectedGem.id)}&#10;                    onBack={handleBackToFeed}&#10;                    onSaveRequest={handleSaveRequest}&#10;                    onAddUserQuestion={handleAddUserQuestion}&#10;                    onTagSelect={handleSelectTag}&#10;                /&gt;&#10;            ) : renderFeed(); // Fallback to feed if no gem selected&#10;        case 'saved':&#10;            return firebaseUser ? &lt;SavedView &#10;                        allGems={gems} &#10;                        allFavoriteIds={allFavoriteIds}&#10;                        savedLists={userLists}&#10;                        onUpdateLists={updateUserLists}&#10;                        onSelectGem={handleSelectGem}&#10;                        onToggleFavorite={handleToggleFavorite}&#10;                        onLoginRequest={handleLoginRequest}&#10;                        onBack={() =&gt; handleNavigate('feed')}&#10;                    /&gt; : renderFeed();&#10;        case 'profile':&#10;            return firebaseUser &amp;&amp; user ? &lt;ProfileView user={user} onUpdateUser={handleUpdateUser} onBack={() =&gt; handleNavigate('feed')} onNavigate={handleNavigate} /&gt; : renderFeed();&#10;        case 'dashboard':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;AdminDashboard&#10;                    currentUser={{ ...user, id: firebaseUser.uid }}&#10;                    onClose={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'topics':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;TopicManagement&#10;                    currentUser={{ ...user, uid: firebaseUser.uid }}&#10;                    onBack={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'feed':&#10;        default:&#10;            return renderFeed();&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;        {renderContent()}&#10;        {showLoginModal &amp;&amp; &lt;LoginModal &#10;            onLoginAttempt={handleLoginAttempt}&#10;            onSignUpAttempt={handleSignUpAttempt}&#10;            onCancel={() =&gt; setShowLoginModal(false)} &#10;        /&gt;}&#10;        {isSaveModalOpen &amp;&amp; gemToSaveId &amp;&amp; (&#10;            &lt;SaveToListModal&#10;                isOpen={isSaveModalOpen}&#10;                onClose={() =&gt; setIsSaveModalOpen(false)}&#10;                lists={userLists.filter(l =&gt; l.id !== 'default')}&#10;                gemId={gemToSaveId}&#10;                onSaveToList={handleSaveToList}&#10;                onCreateAndSave={handleCreateListAndSave}&#10;                onToggleDefaultFavorite={handleToggleFavorite}&#10;                isSavedToDefault={userLists.find(l=&gt;l.id==='default')?.gemIds.includes(gemToSaveId) ?? false}&#10;            /&gt;&#10;        )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useCallback, useMemo } from 'react';&#10;import { Gem, User, SavedList, Channel, Filter, Topic, ListWithItems } from './types';&#10;import { TOPICS } from './constants';&#10;import { auth, googleProvider } from './services/firebase';&#10;import { onAuthStateChanged, User as FirebaseUser, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, signInWithPopup } from 'firebase/auth';&#10;import * as firestoreService from './services/firestoreService';&#10;import Header from './components/Header';&#10;import GemCard from './components/GemCard';&#10;import GemDetailView from './components/GemDetailView';&#10;import LoginModal from './components/LoginModal';&#10;import SavedView from './components/SavedView';&#10;import ProfileView from './components/ProfileView';&#10;import AdminDashboard from './components/admin/AdminDashboard';&#10;import TopicManagement from './components/admin/TopicManagement';&#10;import { SparklesIcon } from './components/icons';&#10;import SaveToListModal from './components/SaveToListModal';&#10;// Import admin utils in development&#10;import './utils/adminUtils';&#10;&#10;type View = 'feed' | 'detail' | 'saved' | 'profile' | 'dashboard' | 'topics';&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [gems, setGems] = useState&lt;Gem[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;Channel[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  &#10;  const [firebaseUser, setFirebaseUser] = useState&lt;FirebaseUser | null&gt;(null);&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [userLists, setUserLists] = useState&lt;ListWithItems[]&gt;([]);&#10;  const [isMigrated, setIsMigrated] = useState(false);&#10;&#10;  const [filter, setFilter] = useState&lt;Filter&gt;({ type: 'all' });&#10;  const [showLoginModal, setShowLoginModal] = useState(false);&#10;  const [currentView, setCurrentView] = useState&lt;View&gt;('feed');&#10;  const [selectedGemId, setSelectedGemId] = useState&lt;string | null&gt;(null);&#10;  &#10;  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);&#10;  const [gemToSaveId, setGemToSaveId] = useState&lt;string | null&gt;(null);&#10;&#10;  // Fetch initial static-like data&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;        setIsLoading(true);&#10;        const [fetchedGems, fetchedChannels] = await Promise.all([&#10;            firestoreService.fetchGems(),&#10;            firestoreService.fetchChannels(),&#10;        ]);&#10;        setGems(fetchedGems);&#10;        setChannels(fetchedChannels);&#10;        setIsLoading(false);&#10;    };&#10;    fetchInitialData();&#10;  }, []);&#10;&#10;  // Auth state listener&#10;  useEffect(() =&gt; {&#10;      const unsubscribe = onAuthStateChanged(auth, async (currentUser) =&gt; {&#10;          console.log('Auth state changed - currentUser:', currentUser?.uid);&#10;          setFirebaseUser(currentUser);&#10;          if (currentUser) {&#10;              let userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              console.log('Fetched user profile:', userProfile);&#10;&#10;              // Se il profilo non esiste, creane uno nuovo. Utile per utenti già esistenti in Auth ma non in Firestore.&#10;              if (!userProfile) {&#10;                  console.log(`Creating new profile for user ${currentUser.uid}`);&#10;                  const email = currentUser.email || 'no-email@example.com';&#10;                  const [firstName, lastName] = email.split('@')[0].split('.') || [email, ''];&#10;                  await firestoreService.createUserProfile(currentUser.uid, email, firstName, lastName || '');&#10;                  userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;                  console.log('Created new user profile:', userProfile);&#10;              }&#10;&#10;              // Migrazione automatica alle nuove liste&#10;              console.log('Attempting migration to new list structure...');&#10;              const migrationSuccess = await firestoreService.migrateUserToNewListStructure(currentUser.uid);&#10;              setIsMigrated(migrationSuccess);&#10;&#10;              // Carica le liste con la nuova struttura&#10;              const newUserLists = await firestoreService.fetchUserListsNew(currentUser.uid);&#10;              setUser(userProfile);&#10;              setUserLists(newUserLists);&#10;              setShowLoginModal(false);&#10;&#10;              console.log('Migration completed:', migrationSuccess);&#10;              console.log('Loaded user lists:', newUserLists);&#10;          } else {&#10;              // User is signed out&#10;              setUser(null);&#10;              setUserLists([]);&#10;              setIsMigrated(false);&#10;              setFilter({ type: 'all' });&#10;              setCurrentView('feed');&#10;          }&#10;      });&#10;      return () =&gt; unsubscribe();&#10;  }, []);&#10;  &#10;  // Listener for user questions on selected gem&#10;  useEffect(() =&gt; {&#10;    if (!selectedGemId) return;&#10;&#10;    const unsubscribe = firestoreService.listenToUserQuestions(selectedGemId, (questions) =&gt; {&#10;        setGems(prevGems =&gt; prevGems.map(gem =&gt; &#10;            gem.id === selectedGemId ? { ...gem, userQuestions: questions } : gem&#10;        ));&#10;    });&#10;&#10;    return () =&gt; unsubscribe();&#10;  }, [selectedGemId]);&#10;&#10;  const handleSignUpAttempt = async (email: string, pass: string, firstName: string, lastName: string) =&gt; {&#10;      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);&#10;      await firestoreService.createUserProfile(userCredential.user.uid, email, firstName, lastName);&#10;  };&#10;  &#10;  const handleLoginAttempt = async (email: string, pass: string) =&gt; {&#10;      await signInWithEmailAndPassword(auth, email, pass);&#10;  };&#10;&#10;  const handleGoogleAuth = async () =&gt; {&#10;    try {&#10;      const result = await signInWithPopup(auth, googleProvider);&#10;      const user = result.user;&#10;      &#10;      // Controlla se il profilo utente esiste già&#10;      let userProfile = await firestoreService.fetchUserProfile(user.uid);&#10;      &#10;      if (!userProfile) {&#10;        // Se è la prima volta che l'utente accede con Google, crea il profilo&#10;        const email = user.email || 'no-email@example.com';&#10;        const firstName = user.displayName?.split(' ')[0] || 'Nome';&#10;        const lastName = user.displayName?.split(' ').slice(1).join(' ') || 'Cognome';&#10;        &#10;        await firestoreService.createUserProfile(user.uid, email, firstName, lastName);&#10;      }&#10;      &#10;      // Il resto della logica di login è gestita automaticamente dall'listener onAuthStateChanged&#10;    } catch (error: any) {&#10;      console.error('Errore nell\'autenticazione Google:', error);&#10;      throw new Error('Errore nell\'autenticazione con Google: ' + error.message);&#10;    }&#10;  };&#10;&#10;  const handleLogout = () =&gt; {&#10;    signOut(auth);&#10;  };&#10;&#10;  const handleNavigate = (view: View) =&gt; {&#10;    console.log('Navigating to:', view); // Debug log&#10;    window.scrollTo(0, 0);&#10;    setCurrentView(view);&#10;  };&#10;  &#10;  const handleLoginRequest = () =&gt; {&#10;    if(!firebaseUser) setShowLoginModal(true);&#10;  }&#10;&#10;  const allFavoriteIds = useMemo(() =&gt; {&#10;    return Array.from(new Set(userLists.flatMap(list =&gt; list.gemIds)));&#10;  }, [userLists]);&#10;&#10;  const handleSaveRequest = (gemId: string) =&gt; {&#10;    setGemToSaveId(gemId);&#10;    setIsSaveModalOpen(true);&#10;  };&#10;&#10;  // Aggiorna le liste dell'utente con la nuova struttura&#10;  const updateUserLists = async (updatedLists: ListWithItems[]) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUserLists(updatedLists);&#10;      // Non serve più salvare nel documento utente, le liste sono in collezioni separate&#10;  };&#10;&#10;  const handleSaveToList = async (listId: string) =&gt; {&#10;    if (!gemToSaveId || !firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.addGemToUserList(firebaseUser.uid, listId, gemToSaveId);&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === listId &amp;&amp; !list.gemIds.includes(gemToSaveId)) {&#10;          return {&#10;            ...list,&#10;            gemIds: [...list.gemIds, gemToSaveId],&#10;            itemCount: list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error saving to list:', error);&#10;      alert('Errore nel salvare nella lista');&#10;    }&#10;  };&#10;  &#10;  const handleCreateListAndSave = async (listName: string) =&gt; {&#10;      if (!gemToSaveId || !firebaseUser) return;&#10;&#10;      try {&#10;        const newListId = await firestoreService.createNewList(firebaseUser.uid, listName);&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, newListId, gemToSaveId);&#10;&#10;        // Aggiungi la nuova lista allo stato locale&#10;        const newList: ListWithItems = {&#10;          id: newListId,&#10;          name: listName,&#10;          isPublic: false,&#10;          createdBy: firebaseUser.uid,&#10;          createdAt: new Date(),&#10;          updatedAt: new Date(),&#10;          gemIds: [gemToSaveId],&#10;          itemCount: 1,&#10;          userRole: 'owner'&#10;        };&#10;        setUserLists([...userLists, newList]);&#10;      } catch (error) {&#10;        console.error('Error creating list and saving:', error);&#10;        alert('Errore nella creazione della lista');&#10;      }&#10;  };&#10;&#10;  // Crea una nuova lista tramite il servizio e ricarica le liste&#10;  const handleCreateNewList = async (listName: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    try {&#10;      await firestoreService.createNewList(firebaseUser.uid, listName);&#10;&#10;      // Ricarica le liste dopo la creazione&#10;      const updatedLists = await firestoreService.fetchUserListsNew(firebaseUser.uid);&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error creating new list:', error);&#10;      throw error; // Rilancia l'errore per gestirlo nel componente&#10;    }&#10;  };&#10;&#10;  const handleToggleFavorite = async (gemId: string) =&gt; {&#10;    if (!firebaseUser) return;&#10;&#10;    const favoritesList = userLists.find(list =&gt; list.name === 'Preferiti' || list.id === 'default');&#10;    if (!favoritesList) return;&#10;&#10;    const isFav = favoritesList.gemIds.includes(gemId);&#10;&#10;    try {&#10;      if (isFav) {&#10;        await firestoreService.removeGemFromUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      } else {&#10;        await firestoreService.addGemToUserList(firebaseUser.uid, favoritesList.id, gemId);&#10;      }&#10;&#10;      // Aggiorna lo stato locale&#10;      const updatedLists = userLists.map(list =&gt; {&#10;        if (list.id === favoritesList.id) {&#10;          return {&#10;            ...list,&#10;            gemIds: isFav&#10;              ? list.gemIds.filter(id =&gt; id !== gemId)&#10;              : [...list.gemIds, gemId],&#10;            itemCount: isFav ? list.itemCount - 1 : list.itemCount + 1,&#10;            updatedAt: new Date()&#10;          };&#10;        }&#10;        return list;&#10;      });&#10;      setUserLists(updatedLists);&#10;    } catch (error) {&#10;      console.error('Error toggling favorite:', error);&#10;      alert('Errore nel modificare i preferiti');&#10;    }&#10;  };&#10;  &#10;  const handleAddUserQuestion = async (gemId: string, question: string) =&gt; {&#10;      await firestoreService.addUserQuestion(gemId, question);&#10;  };&#10;&#10;  const handleSelectGem = (gemId: string) =&gt; {&#10;      setSelectedGemId(gemId);&#10;      handleNavigate('detail');&#10;  };&#10;  &#10;  const handleBackToFeed = () =&gt; {&#10;      setSelectedGemId(null);&#10;      handleNavigate('feed');&#10;  };&#10;  &#10;  const handleSelectTag = (tag: string) =&gt; {&#10;      setFilter({ type: 'tag', value: tag });&#10;      handleBackToFeed();&#10;  };&#10;  &#10;  const handleUpdateUser = async (updatedUser: User) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUser(updatedUser);&#10;      await firestoreService.updateUserProfile(firebaseUser.uid, {&#10;          firstName: updatedUser.firstName,&#10;          lastName: updatedUser.lastName,&#10;      });&#10;      alert(&quot;Profilo aggiornato!&quot;);&#10;  }&#10;&#10;  const filteredGems = gems.filter(gem =&gt; {&#10;      if (!gem.tags) return false; // Safety check&#10;      switch (filter.type) {&#10;        case 'all':&#10;            return true;&#10;        case 'favorites':&#10;            return firebaseUser ? allFavoriteIds.includes(gem.id) : false;&#10;        case 'topic':&#10;            return gem.topic === filter.value;&#10;        case 'channel':&#10;            const channel = channels.find(c =&gt; c.id === filter.value);&#10;            if (channel) {&#10;                return gem.tags.some(tag =&gt; channel.filterTags.includes(tag.toLowerCase()));&#10;            }&#10;            return false;&#10;        case 'tag':&#10;            return gem.tags.map(t =&gt; t.toLowerCase()).includes(filter.value.toLowerCase());&#10;        default:&#10;            return true;&#10;      }&#10;  });&#10;  &#10;  const selectedGem = gems.find(gem =&gt; gem.id === selectedGemId);&#10;&#10;  const renderFeed = () =&gt; (&#10;    &lt;&gt;&#10;        &lt;Header&#10;            isLoggedIn={!!firebaseUser}&#10;            user={user}&#10;            onLogin={() =&gt; setShowLoginModal(true)}&#10;            onLogout={handleLogout}&#10;            selectedFilter={filter}&#10;            onSelectFilter={setFilter}&#10;            onNavigate={handleNavigate}&#10;            channels={channels}&#10;        /&gt;&#10;        &lt;main className=&quot;max-w-xl mx-auto py-8 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {isLoading &amp;&amp; gems.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center text-center text-slate-500 dark:text-slate-400 pt-20&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-16 h-16 animate-pulse text-indigo-400&quot;/&gt;&#10;            &lt;p className=&quot;mt-4 text-lg font-semibold&quot;&gt;Stiamo preparando Curiow per te...&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm&quot;&gt;Un momento, stiamo cercando spunti interessanti.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {filteredGems.length &gt; 0 ? (&#10;                filteredGems.map(gem =&gt; (&#10;                    &lt;GemCard&#10;                        key={gem.id}&#10;                        gem={gem}&#10;                        isLoggedIn={!!firebaseUser}&#10;                        isFavorite={allFavoriteIds.includes(gem.id)}&#10;                        onSaveRequest={handleSaveRequest}&#10;                        onSelect={handleSelectGem}&#10;                        onLoginRequest={handleLoginRequest}&#10;                    /&gt;&#10;                ))&#10;            ) : (&#10;                &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma trovata&lt;/h3&gt;&#10;                    &lt;p className=&quot;mt-2&quot;&gt;Prova a selezionare un'altra categoria o filtro.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  const renderContent = () =&gt; {&#10;    switch (currentView) {&#10;        case 'detail':&#10;            return selectedGem ? (&#10;                &lt;GemDetailView&#10;                    gem={selectedGem}&#10;                    isFavorite={allFavoriteIds.includes(selectedGem.id)}&#10;                    onBack={handleBackToFeed}&#10;                    onSaveRequest={handleSaveRequest}&#10;                    onAddUserQuestion={handleAddUserQuestion}&#10;                    onTagSelect={handleSelectTag}&#10;                /&gt;&#10;            ) : renderFeed(); // Fallback to feed if no gem selected&#10;        case 'saved':&#10;            return firebaseUser ? &lt;SavedView &#10;                        allGems={gems} &#10;                        allFavoriteIds={allFavoriteIds}&#10;                        savedLists={userLists}&#10;                        onUpdateLists={updateUserLists}&#10;                        onSelectGem={handleSelectGem}&#10;                        onToggleFavorite={handleToggleFavorite}&#10;                        onLoginRequest={handleLoginRequest}&#10;                        onBack={() =&gt; handleNavigate('feed')}&#10;                        onCreateList={handleCreateNewList}&#10;                    /&gt; : renderFeed();&#10;        case 'profile':&#10;            return firebaseUser &amp;&amp; user ? &lt;ProfileView user={user} onUpdateUser={handleUpdateUser} onBack={() =&gt; handleNavigate('feed')} onNavigate={handleNavigate} /&gt; : renderFeed();&#10;        case 'dashboard':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;AdminDashboard&#10;                    currentUser={{ ...user, id: firebaseUser.uid }}&#10;                    onClose={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'topics':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;TopicManagement&#10;                    currentUser={{ ...user, uid: firebaseUser.uid }}&#10;                    onBack={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'feed':&#10;        default:&#10;            return renderFeed();&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;        {renderContent()}&#10;        {showLoginModal &amp;&amp; &lt;LoginModal &#10;            onLoginAttempt={handleLoginAttempt}&#10;            onSignUpAttempt={handleSignUpAttempt}&#10;            onGoogleAuth={handleGoogleAuth}&#10;            onCancel={() =&gt; setShowLoginModal(false)} &#10;        /&gt;}&#10;        {isSaveModalOpen &amp;&amp; gemToSaveId &amp;&amp; (&#10;            &lt;SaveToListModal&#10;                isOpen={isSaveModalOpen}&#10;                onClose={() =&gt; setIsSaveModalOpen(false)}&#10;                lists={userLists.filter(l =&gt; l.id !== 'default')}&#10;                gemId={gemToSaveId}&#10;                onSaveToList={handleSaveToList}&#10;                onCreateAndSave={handleCreateListAndSave}&#10;                onToggleDefaultFavorite={handleToggleFavorite}&#10;                isSavedToDefault={userLists.find(l=&gt;l.id==='default')?.gemIds.includes(gemToSaveId) ?? false}&#10;            /&gt;&#10;        )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header.tsx" />
              <option name="originalContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { TOPICS } from '../constants';&#10;import { Topic, Channel, Filter, User } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, TagIcon, ChevronDownIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  selectedFilter: Filter;&#10;  onSelectFilter: (filter: Filter) =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  channels: Channel[];&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({ isLoggedIn, user, onLogin, onLogout, selectedFilter, onSelectFilter, onNavigate, channels }) =&gt; {&#10;  const [showProfileMenu, setShowProfileMenu] = useState(false);&#10;  const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  const permissions = useUserPermissions(user);&#10;&#10;    };&#10;&#10;    document.addEventListener('mousedown', handleClickOutside);&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleClickOutside);&#10;    };&#10;  }, []);&#10;&#10;  const handleMenuItemClick = (view: 'profile' | 'dashboard' | 'topics') =&gt; {&#10;    setShowProfileMenu(false);&#10;    onNavigate(view);&#10;  };&#10;&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;    &#10;    if (selectedFilter.type === filter.type &amp;&amp; ('value' in selectedFilter &amp;&amp; 'value' in filter ? selectedFilter.value === filter.value : true)) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-md`;&#10;    }&#10;    return `${baseClass} bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700`;&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-30 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;      &lt;div className=&quot;max-w-5xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;          &lt;button onClick={() =&gt; { onSelectFilter({ type: 'all' }); onNavigate('feed'); }} className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-7 h-7 text-indigo-500&quot; /&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Curiow&lt;/h1&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 sm:space-x-4&quot;&gt;&#10;             {isLoggedIn &amp;&amp; (&#10;                 &lt;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; {&#10;                            console.log('Saved button clicked');&#10;                            onNavigate('saved');&#10;                        }}&#10;                        title=&quot;Liste Salvate&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={(e) =&gt; {&#10;                            e.preventDefault();&#10;                            e.stopPropagation();&#10;                            onNavigate('profile');&#10;                        }}&#10;                        title=&quot;Profilo e Impostazioni&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;Cog6ToothIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                 &lt;/&gt;&#10;             )}&#10;             {isLoggedIn ? (&#10;                &lt;div className=&quot;relative&quot; ref={menuRef}&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowProfileMenu(!showProfileMenu)}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                  &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Profilo&lt;/span&gt;&#10;                    &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${showProfileMenu ? 'rotate-180' : ''}`} /&gt;&#10;                  &lt;/button&gt;&#10;                  {showProfileMenu &amp;&amp; (&#10;                    &lt;div className=&quot;absolute right-0 z-20 mt-2 w-48 bg-white dark:bg-slate-800 rounded-md shadow-lg overflow-hidden&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; handleMenuItemClick('profile')}&#10;                        className=&quot;block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&#10;                      &gt;&#10;                        Profilo&#10;                      &lt;/button&gt;&#10;                      {permissions.canViewDashboard &amp;&amp; (&#10;                        &lt;button&#10;                          onClick={() =&gt; handleMenuItemClick('dashboard')}&#10;                          className=&quot;block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&#10;                        &gt;&#10;                          Dashboard&#10;                        &lt;/button&gt;&#10;                      )}&#10;                      &lt;div className=&quot;border-t border-slate-200 dark:border-slate-700&quot;&gt;&lt;/div&gt;&#10;                      &lt;button&#10;                        onClick={onLogout}&#10;                        className=&quot;block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900&quot;&#10;                      &gt;&#10;                        Logout&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;             ) : (&#10;                &lt;button&#10;                    onClick={onLogin}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Login&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;pb-4 overflow-x-auto&quot;&gt;&#10;            &lt;nav className=&quot;flex items-center space-x-2 sm:space-x-3&quot;&gt;&#10;                &lt;button onClick={() =&gt; onSelectFilter({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                {isLoggedIn &amp;&amp; &lt;button onClick={() =&gt; onSelectFilter({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;Preferiti&lt;/button&gt;}&#10;                {selectedFilter.type === 'tag' &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Tag&lt;/span&gt;&#10;                    &lt;button onClick={() =&gt; {}} className={getButtonClass(selectedFilter)}&gt;&#10;                      &lt;TagIcon className=&quot;w-3 h-3 inline-block mr-1.5&quot;/&gt;{selectedFilter.value}&#10;                    &lt;/button&gt;&#10;                  &lt;/&gt;&#10;                )}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Canali&lt;/span&gt;&#10;                {channels.map(channel =&gt; (&#10;                    &lt;button key={channel.id} onClick={() =&gt; onSelectFilter({type: 'channel', value: channel.id})} className={getButtonClass({type: 'channel', value: channel.id})}&gt;&#10;                        {channel.emoji} {channel.name}&#10;                    &lt;/button&gt;&#10;                ))}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Argomenti&lt;/span&gt;&#10;                {TOPICS.map(topic =&gt; (&#10;                    &lt;button key={topic} onClick={() =&gt; onSelectFilter({type: 'topic', value: topic})} className={getButtonClass({type: 'topic', value: topic})}&gt;&#10;                        {topic.split(' ')[0]}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Header;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { TOPICS } from '../constants';&#10;import { Topic, Channel, Filter, User } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, TagIcon, ChevronDownIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  selectedFilter: Filter;&#10;  onSelectFilter: (filter: Filter) =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  channels: Channel[];&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({ isLoggedIn, user, onLogin, onLogout, selectedFilter, onSelectFilter, onNavigate, channels }) =&gt; {&#10;  const [showProfileMenu, setShowProfileMenu] = useState(false);&#10;  const menuRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  &#10;  const permissions = useUserPermissions(user);&#10;&#10;  // Debug log per controllare i permessi&#10;  useEffect(() =&gt; {&#10;    console.log('Header - User:', user);&#10;    console.log('Header - Permissions:', permissions);&#10;  }, [user, permissions]);&#10;&#10;  // Chiudi il menu quando si clicca fuori&#10;  useEffect(() =&gt; {&#10;    const handleClickOutside = (event: MouseEvent) =&gt; {&#10;      if (menuRef.current &amp;&amp; !menuRef.current.contains(event.target as Node)) {&#10;        setShowProfileMenu(false);&#10;      }&#10;    };&#10;&#10;    document.addEventListener('mousedown', handleClickOutside);&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleClickOutside);&#10;    };&#10;  }, []);&#10;&#10;  const handleMenuItemClick = (view: 'profile' | 'dashboard' | 'topics') =&gt; {&#10;    setShowProfileMenu(false);&#10;    onNavigate(view);&#10;  };&#10;&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;    &#10;    if (selectedFilter.type === filter.type &amp;&amp; ('value' in selectedFilter &amp;&amp; 'value' in filter ? selectedFilter.value === filter.value : true)) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-md`;&#10;    }&#10;    return `${baseClass} bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700`;&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-30 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;      &lt;div className=&quot;max-w-5xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;          &lt;button onClick={() =&gt; { onSelectFilter({ type: 'all' }); onNavigate('feed'); }} className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-7 h-7 text-indigo-500&quot; /&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Curiow&lt;/h1&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 sm:space-x-4&quot;&gt;&#10;             {isLoggedIn &amp;&amp; (&#10;                 &lt;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; {&#10;                            console.log('Saved button clicked');&#10;                            onNavigate('saved');&#10;                        }}&#10;                        title=&quot;Liste Salvate&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={(e) =&gt; {&#10;                            e.preventDefault();&#10;                            e.stopPropagation();&#10;                            onNavigate('profile');&#10;                        }}&#10;                        title=&quot;Profilo e Impostazioni&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;Cog6ToothIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                 &lt;/&gt;&#10;             )}&#10;             {isLoggedIn ? (&#10;                &lt;div className=&quot;relative&quot; ref={menuRef}&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowProfileMenu(!showProfileMenu)}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                  &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Profilo&lt;/span&gt;&#10;                    &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${showProfileMenu ? 'rotate-180' : ''}`} /&gt;&#10;                  &lt;/button&gt;&#10;                  {showProfileMenu &amp;&amp; (&#10;                    &lt;div className=&quot;absolute right-0 z-20 mt-2 w-48 bg-white dark:bg-slate-800 rounded-md shadow-lg overflow-hidden&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; handleMenuItemClick('profile')}&#10;                        className=&quot;block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&#10;                      &gt;&#10;                        Profilo&#10;                      &lt;/button&gt;&#10;                      {permissions.canViewDashboard &amp;&amp; (&#10;                        &lt;button&#10;                          onClick={() =&gt; handleMenuItemClick('dashboard')}&#10;                          className=&quot;block w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700&quot;&#10;                        &gt;&#10;                          Dashboard&#10;                        &lt;/button&gt;&#10;                      )}&#10;                      &lt;div className=&quot;border-t border-slate-200 dark:border-slate-700&quot;&gt;&lt;/div&gt;&#10;                      &lt;button&#10;                        onClick={onLogout}&#10;                        className=&quot;block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900&quot;&#10;                      &gt;&#10;                        Logout&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;             ) : (&#10;                &lt;button&#10;                    onClick={onLogin}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Login&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;pb-4 overflow-x-auto&quot;&gt;&#10;            &lt;nav className=&quot;flex items-center space-x-2 sm:space-x-3&quot;&gt;&#10;                &lt;button onClick={() =&gt; onSelectFilter({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                {isLoggedIn &amp;&amp; &lt;button onClick={() =&gt; onSelectFilter({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;Preferiti&lt;/button&gt;}&#10;                {selectedFilter.type === 'tag' &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Tag&lt;/span&gt;&#10;                    &lt;button onClick={() =&gt; {}} className={getButtonClass(selectedFilter)}&gt;&#10;                      &lt;TagIcon className=&quot;w-3 h-3 inline-block mr-1.5&quot;/&gt;{selectedFilter.value}&#10;                    &lt;/button&gt;&#10;                  &lt;/&gt;&#10;                )}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Canali&lt;/span&gt;&#10;                {channels.map(channel =&gt; (&#10;                    &lt;button key={channel.id} onClick={() =&gt; onSelectFilter({type: 'channel', value: channel.id})} className={getButtonClass({type: 'channel', value: channel.id})}&gt;&#10;                        {channel.emoji} {channel.name}&#10;                    &lt;/button&gt;&#10;                ))}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Argomenti&lt;/span&gt;&#10;                {TOPICS.map(topic =&gt; (&#10;                    &lt;button key={topic} onClick={() =&gt; onSelectFilter({type: 'topic', value: topic})} className={getButtonClass({type: 'topic', value: topic})}&gt;&#10;                        {topic.split(' ')[0]}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Header;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/LoginModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/LoginModal.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { SparklesIcon } from './icons';&#10;&#10;interface LoginModalProps {&#10;  onLoginAttempt: (email: string, pass: string) =&gt; Promise&lt;void&gt;;&#10;  onSignUpAttempt: (email: string, pass: string, firstName: string, lastName: string) =&gt; Promise&lt;void&gt;;&#10;  onCancel: () =&gt; void;&#10;}&#10;&#10;const LoginModal: React.FC&lt;LoginModalProps&gt; = ({ onLoginAttempt, onSignUpAttempt, onCancel }) =&gt; {&#10;  const [isLoginView, setIsLoginView] = useState(true);&#10;  const [email, setEmail] = useState('');&#10;  const [password, setPassword] = useState('');&#10;  const [firstName, setFirstName] = useState('');&#10;  const [lastName, setLastName] = useState('');&#10;  const [error, setError] = useState('');&#10;  const [isLoading, setIsLoading] = useState(false);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;    setIsLoading(true);&#10;    try {&#10;        if (isLoginView) {&#10;            await onLoginAttempt(email, password);&#10;        } else {&#10;            if(!firstName || !lastName) {&#10;                setError(&quot;Nome e cognome sono obbligatori.&quot;);&#10;                setIsLoading(false);&#10;                return;&#10;            }&#10;            await onSignUpAttempt(email, password, firstName, lastName);&#10;        }&#10;        // onCancel will be called from App.tsx on successful login&#10;    } catch (err: any) {&#10;        setError(err.message || 'Si è verificato un errore.');&#10;    } finally {&#10;        setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm&quot; onClick={onCancel}&gt;&#10;      &lt;div &#10;        className=&quot;bg-white dark:bg-slate-800 rounded-2xl shadow-2xl p-8 max-w-sm w-full mx-4 transform transition-all&quot;&#10;        onClick={e =&gt; e.stopPropagation()}&#10;      &gt;&#10;        &lt;SparklesIcon className=&quot;w-12 h-12 text-indigo-500 mx-auto mb-4&quot; /&gt;&#10;        &lt;h2 className=&quot;text-2xl font-bold text-slate-900 dark:text-white&quot;&gt;&#10;            {isLoginView ? 'Bentornato!' : 'Crea il tuo account'}&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;mt-2 text-slate-600 dark:text-slate-300&quot;&gt;&#10;            {isLoginView ? 'Accedi per continuare la tua avventura.' : 'Unisciti a Curiow per salvare le tue scoperte.'}&#10;        &lt;/p&gt;&#10;        &#10;        &lt;form onSubmit={handleSubmit} className=&quot;mt-6 text-left space-y-4&quot;&gt;&#10;            {!isLoginView &amp;&amp; (&#10;                &lt;div className=&quot;flex gap-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;firstName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Nome&lt;/label&gt;&#10;                        &lt;input id=&quot;firstName&quot; name=&quot;firstName&quot; type=&quot;text&quot; required value={firstName} onChange={e =&gt; setFirstName(e.target.value)}&#10;                            className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                     &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;lastName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Cognome&lt;/label&gt;&#10;                        &lt;input id=&quot;lastName&quot; name=&quot;lastName&quot; type=&quot;text&quot; required value={lastName} onChange={e =&gt; setLastName(e.target.value)}&#10;                            className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            &lt;div&gt;&#10;                &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Email&lt;/label&gt;&#10;                &lt;input id=&quot;email&quot; name=&quot;email&quot; type=&quot;email&quot; autoComplete=&quot;email&quot; required value={email} onChange={e =&gt; setEmail(e.target.value)}&#10;                    className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;             &lt;div&gt;&#10;                &lt;label htmlFor=&quot;password&quot;className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Password&lt;/label&gt;&#10;                &lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; autoComplete=&quot;current-password&quot; required value={password} onChange={e =&gt; setPassword(e.target.value)}&#10;                    className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {error &amp;&amp; &lt;p className=&quot;text-sm text-red-500 text-center&quot;&gt;{error}&lt;/p&gt;}&#10;&#10;            &lt;div className=&quot;pt-2 flex flex-col gap-3&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; disabled={isLoading}&#10;                    className=&quot;w-full px-4 py-2.5 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-all&quot;&gt;&#10;                    {isLoading ? 'Caricamento...' : (isLoginView ? 'Accedi' : 'Registrati')}&#10;                &lt;/button&gt;&#10;                 &lt;button type=&quot;button&quot; onClick={() =&gt; { setIsLoginView(!isLoginView); setError(''); }}&#10;                    className=&quot;w-full text-sm font-medium text-indigo-600 dark:text-indigo-400 hover:underline&quot;&gt;&#10;                    {isLoginView ? 'Non hai un account? Registrati' : 'Hai già un account? Accedi'}&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoginModal;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { SparklesIcon } from './icons';&#10;&#10;interface LoginModalProps {&#10;  onLoginAttempt: (email: string, pass: string) =&gt; Promise&lt;void&gt;;&#10;  onSignUpAttempt: (email: string, pass: string, firstName: string, lastName: string) =&gt; Promise&lt;void&gt;;&#10;  onGoogleAuth: () =&gt; Promise&lt;void&gt;;&#10;  onCancel: () =&gt; void;&#10;}&#10;&#10;const LoginModal: React.FC&lt;LoginModalProps&gt; = ({ onLoginAttempt, onSignUpAttempt, onGoogleAuth, onCancel }) =&gt; {&#10;  const [isLoginView, setIsLoginView] = useState(true);&#10;  const [email, setEmail] = useState('');&#10;  const [password, setPassword] = useState('');&#10;  const [firstName, setFirstName] = useState('');&#10;  const [lastName, setLastName] = useState('');&#10;  const [error, setError] = useState('');&#10;  const [isLoading, setIsLoading] = useState(false);&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;    setIsLoading(true);&#10;    try {&#10;        if (isLoginView) {&#10;            await onLoginAttempt(email, password);&#10;        } else {&#10;            if(!firstName || !lastName) {&#10;                setError(&quot;Nome e cognome sono obbligatori.&quot;);&#10;                setIsLoading(false);&#10;                return;&#10;            }&#10;            await onSignUpAttempt(email, password, firstName, lastName);&#10;        }&#10;        // onCancel will be called from App.tsx on successful login&#10;    } catch (err: any) {&#10;        setError(err.message || 'Si è verificato un errore.');&#10;    } finally {&#10;        setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm&quot; onClick={onCancel}&gt;&#10;      &lt;div &#10;        className=&quot;bg-white dark:bg-slate-800 rounded-2xl shadow-2xl p-8 max-w-sm w-full mx-4 transform transition-all&quot;&#10;        onClick={e =&gt; e.stopPropagation()}&#10;      &gt;&#10;        &lt;SparklesIcon className=&quot;w-12 h-12 text-indigo-500 mx-auto mb-4&quot; /&gt;&#10;        &lt;h2 className=&quot;text-2xl font-bold text-slate-900 dark:text-white&quot;&gt;&#10;            {isLoginView ? 'Bentornato!' : 'Crea il tuo account'}&#10;        &lt;/h2&gt;&#10;        &lt;p className=&quot;mt-2 text-slate-600 dark:text-slate-300&quot;&gt;&#10;            {isLoginView ? 'Accedi per continuare la tua avventura.' : 'Unisciti a Curiow per salvare le tue scoperte.'}&#10;        &lt;/p&gt;&#10;        &#10;        &lt;form onSubmit={handleSubmit} className=&quot;mt-6 text-left space-y-4&quot;&gt;&#10;            {!isLoginView &amp;&amp; (&#10;                &lt;div className=&quot;flex gap-4&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;firstName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Nome&lt;/label&gt;&#10;                        &lt;input id=&quot;firstName&quot; name=&quot;firstName&quot; type=&quot;text&quot; required value={firstName} onChange={e =&gt; setFirstName(e.target.value)}&#10;                            className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                     &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;lastName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Cognome&lt;/label&gt;&#10;                        &lt;input id=&quot;lastName&quot; name=&quot;lastName&quot; type=&quot;text&quot; required value={lastName} onChange={e =&gt; setLastName(e.target.value)}&#10;                            className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;            &lt;div&gt;&#10;                &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Email&lt;/label&gt;&#10;                &lt;input id=&quot;email&quot; name=&quot;email&quot; type=&quot;email&quot; autoComplete=&quot;email&quot; required value={email} onChange={e =&gt; setEmail(e.target.value)}&#10;                    className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;             &lt;div&gt;&#10;                &lt;label htmlFor=&quot;password&quot;className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Password&lt;/label&gt;&#10;                &lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; autoComplete=&quot;current-password&quot; required value={password} onChange={e =&gt; setPassword(e.target.value)}&#10;                    className=&quot;mt-1 block w-full bg-white dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            {error &amp;&amp; &lt;p className=&quot;text-sm text-red-500 text-center&quot;&gt;{error}&lt;/p&gt;}&#10;&#10;            &lt;div className=&quot;pt-2 flex flex-col gap-3&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; disabled={isLoading}&#10;                    className=&quot;w-full px-4 py-2.5 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-all&quot;&gt;&#10;                    {isLoading ? 'Caricamento...' : (isLoginView ? 'Accedi' : 'Registrati')}&#10;                &lt;/button&gt;&#10;&#10;                {/* Separatore */}&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-0 flex items-center&quot;&gt;&#10;                        &lt;div className=&quot;w-full border-t border-slate-300 dark:border-slate-600&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;relative flex justify-center text-sm&quot;&gt;&#10;                        &lt;span className=&quot;px-2 bg-white dark:bg-slate-800 text-slate-500&quot;&gt;oppure&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Bottone Google */}&#10;                &lt;button type=&quot;button&quot; onClick={onGoogleAuth} disabled={isLoading}&#10;                    className=&quot;w-full px-4 py-2.5 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-200 font-semibold rounded-lg hover:bg-slate-50 dark:hover:bg-slate-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center justify-center gap-2&quot;&gt;&#10;                    &lt;svg className=&quot;w-5 h-5&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                        &lt;path fill=&quot;#4285F4&quot; d=&quot;M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z&quot;/&gt;&#10;                        &lt;path fill=&quot;#34A853&quot; d=&quot;M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z&quot;/&gt;&#10;                        &lt;path fill=&quot;#FBBC05&quot; d=&quot;M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z&quot;/&gt;&#10;                        &lt;path fill=&quot;#EA4335&quot; d=&quot;M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z&quot;/&gt;&#10;                    &lt;/svg&gt;&#10;                    {isLoginView ? 'Accedi con Google' : 'Registrati con Google'}&#10;                &lt;/button&gt;&#10;&#10;                 &lt;button type=&quot;button&quot; onClick={() =&gt; { setIsLoginView(!isLoginView); setError(''); }}&#10;                    className=&quot;w-full text-sm font-medium text-indigo-600 dark:text-indigo-400 hover:underline&quot;&gt;&#10;                    {isLoginView ? 'Non hai un account? Registrati' : 'Hai già un account? Accedi'}&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LoginModal;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SavedView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SavedView.tsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { ListWithItems, Gem } from '../types';&#10;import { ChevronLeftIcon, PlusCircleIcon } from './icons';&#10;import GemCard from './GemCard';&#10;&#10;interface SavedViewProps {&#10;    allGems: Gem[];&#10;    allFavoriteIds: string[];&#10;    savedLists: ListWithItems[];&#10;    onUpdateLists: (lists: ListWithItems[]) =&gt; void;&#10;    onSelectGem: (gemId: string) =&gt; void;&#10;    onToggleFavorite: (gemId: string) =&gt; void;&#10;    onLoginRequest: () =&gt; void;&#10;    onBack: () =&gt; void;&#10;}&#10;&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack }) =&gt; {&#10;    const [newListName, setNewListName] = useState('');&#10;    const userLists = savedLists.filter(l =&gt; l.id !== 'default');&#10;    const [selectedListId, setSelectedListId] = useState&lt;string&gt;('all');&#10;&#10;    const handleCreateList = (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        if (newListName.trim()) {&#10;            // Ora utilizziamo il tipo ListWithItems invece di SavedList&#10;            const newList: ListWithItems = {&#10;                id: self.crypto.randomUUID(),&#10;                name: newListName.trim(),&#10;                isPublic: false,&#10;                createdBy: 'current-user', // Questo sarà gestito dall'App.tsx&#10;                createdAt: new Date(),&#10;                updatedAt: new Date(),&#10;                gemIds: [],&#10;                itemCount: 0,&#10;                userRole: 'owner'&#10;            };&#10;            onUpdateLists([newList, ...savedLists]);&#10;            setNewListName('');&#10;        }&#10;    };&#10;    &#10;    const getGemsForList = (): Gem[] =&gt; {&#10;        if (selectedListId === 'all') {&#10;            return allGems.filter(gem =&gt; allFavoriteIds.includes(gem.id));&#10;        }&#10;        const list = savedLists.find(l =&gt; l.id === selectedListId);&#10;        return list ? allGems.filter(gem =&gt; list.gemIds.includes(gem.id)) : [];&#10;    };&#10;&#10;    const getButtonClass = (id: string) =&gt; {&#10;        const baseClass = 'px-4 py-2 text-sm font-semibold rounded-lg transition-colors duration-200 text-left';&#10;        if (selectedListId === id) {&#10;            return `${baseClass} bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300`;&#10;        }&#10;        return `${baseClass} text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800`;&#10;    };&#10;&#10;    const gemsInView = getGemsForList();&#10;&#10;    return (&#10;        &lt;div className=&quot;max-w-5xl mx-auto&quot;&gt;&#10;            &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;                &lt;button&#10;                    onClick={onBack}&#10;                    className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Le tue Liste&lt;/h1&gt;&#10;            &lt;/header&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col md:flex-row&quot;&gt;&#10;                &lt;aside className=&quot;w-full md:w-64 lg:w-72 p-4 border-b md:border-b-0 md:border-r border-slate-200 dark:border-slate-700&quot;&gt;&#10;                    &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Liste&lt;/h2&gt;&#10;                    &lt;nav className=&quot;mt-4 flex flex-col space-y-1&quot;&gt;&#10;                        &lt;button onClick={() =&gt; setSelectedListId('all')} className={getButtonClass('all')}&gt;&#10;                            Tutti i Preferiti ({allFavoriteIds.length})&#10;                        &lt;/button&gt;&#10;                        {userLists.map(list =&gt; (&#10;                             &lt;button key={list.id} onClick={() =&gt; setSelectedListId(list.id)} className={getButtonClass(list.id)}&gt;&#10;                                {list.name} ({list.gemIds.length})&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/nav&gt;&#10;&#10;                    &lt;form onSubmit={handleCreateList} className=&quot;mt-6&quot;&gt;&#10;                         &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Nuova Lista&lt;/h2&gt;&#10;                         &lt;div className=&quot;mt-2 flex space-x-2&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                value={newListName}&#10;                                onChange={(e) =&gt; setNewListName(e.target.value)}&#10;                                placeholder=&quot;Nome della lista...&quot;&#10;                                className=&quot;flex-grow bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md py-1.5 px-3 text-sm text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-1 focus:ring-indigo-500&quot;&#10;                            /&gt;&#10;                            &lt;button type=&quot;submit&quot; className=&quot;p-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-indigo-400&quot; disabled={!newListName.trim()}&gt;&#10;                                &lt;PlusCircleIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                            &lt;/button&gt;&#10;                         &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/aside&gt;&#10;                &#10;                &lt;main className=&quot;flex-1 p-4 sm:p-6 lg:p-8&quot;&gt;&#10;                    {gemsInView.length &gt; 0 ? (&#10;                        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-8 max-w-xl mx-auto&quot;&gt;&#10;                           {gemsInView.map(gem =&gt; (&#10;                                &lt;GemCard&#10;                                    key={gem.id}&#10;                                    gem={gem}&#10;                                    isLoggedIn={true}&#10;                                    isFavorite={allFavoriteIds.includes(gem.id)}&#10;                                    onSaveRequest={onToggleFavorite} /* Using onToggleFavorite here to just remove from all lists */&#10;                                    onSelect={onSelectGem}&#10;                                    onLoginRequest={onLoginRequest}&#10;                                /&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                            &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma in questa lista&lt;/h3&gt;&#10;                            &lt;p className=&quot;mt-2 max-w-md mx-auto&quot;&gt;&#10;                                {selectedListId === 'all' &#10;                                    ? &quot;Salva le tue gemme preferite cliccando sul cuore. Le troverai tutte qui.&quot;&#10;                                    : &quot;Aggiungi gemme a questa lista dalla loro pagina di dettaglio o dal popup di salvataggio.&quot;&#10;                                }&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/main&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default SavedView;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { ListWithItems, Gem } from '../types';&#10;import { ChevronLeftIcon, PlusCircleIcon } from './icons';&#10;import GemCard from './GemCard';&#10;&#10;interface SavedViewProps {&#10;    allGems: Gem[];&#10;    allFavoriteIds: string[];&#10;    savedLists: ListWithItems[];&#10;    onUpdateLists: (lists: ListWithItems[]) =&gt; void;&#10;    onSelectGem: (gemId: string) =&gt; void;&#10;    onToggleFavorite: (gemId: string) =&gt; void;&#10;    onLoginRequest: () =&gt; void;&#10;    onBack: () =&gt; void;&#10;    onCreateList: (listName: string) =&gt; Promise&lt;void&gt;; // Nuova prop per creare liste&#10;}&#10;&#10;const SavedView: React.FC&lt;SavedViewProps&gt; = ({ allGems, allFavoriteIds, savedLists, onUpdateLists, onSelectGem, onToggleFavorite, onLoginRequest, onBack, onCreateList }) =&gt; {&#10;    const [newListName, setNewListName] = useState('');&#10;    const userLists = savedLists.filter(l =&gt; l.id !== 'default');&#10;    const [selectedListId, setSelectedListId] = useState&lt;string&gt;('all');&#10;&#10;    const handleCreateList = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        if (newListName.trim()) {&#10;            try {&#10;                await onCreateList(newListName.trim()); // Usa solo il servizio&#10;                setNewListName('');&#10;            } catch (error) {&#10;                console.error('Error creating list:', error);&#10;                alert('Errore nella creazione della lista');&#10;            }&#10;        }&#10;    };&#10;    &#10;    const getGemsForList = (): Gem[] =&gt; {&#10;        if (selectedListId === 'all') {&#10;            return allGems.filter(gem =&gt; allFavoriteIds.includes(gem.id));&#10;        }&#10;        const list = savedLists.find(l =&gt; l.id === selectedListId);&#10;        return list ? allGems.filter(gem =&gt; list.gemIds.includes(gem.id)) : [];&#10;    };&#10;&#10;    const getButtonClass = (id: string) =&gt; {&#10;        const baseClass = 'px-4 py-2 text-sm font-semibold rounded-lg transition-colors duration-200 text-left';&#10;        if (selectedListId === id) {&#10;            return `${baseClass} bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300`;&#10;        }&#10;        return `${baseClass} text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800`;&#10;    };&#10;&#10;    const gemsInView = getGemsForList();&#10;&#10;    return (&#10;        &lt;div className=&quot;max-w-5xl mx-auto&quot;&gt;&#10;            &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;                &lt;button&#10;                    onClick={onBack}&#10;                    className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Le tue Liste&lt;/h1&gt;&#10;            &lt;/header&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col md:flex-row&quot;&gt;&#10;                &lt;aside className=&quot;w-full md:w-64 lg:w-72 p-4 border-b md:border-b-0 md:border-r border-slate-200 dark:border-slate-700&quot;&gt;&#10;                    &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Liste&lt;/h2&gt;&#10;                    &lt;nav className=&quot;mt-4 flex flex-col space-y-1&quot;&gt;&#10;                        &lt;button onClick={() =&gt; setSelectedListId('all')} className={getButtonClass('all')}&gt;&#10;                            Tutti i Preferiti ({allFavoriteIds.length})&#10;                        &lt;/button&gt;&#10;                        {userLists.map(list =&gt; (&#10;                             &lt;button key={list.id} onClick={() =&gt; setSelectedListId(list.id)} className={getButtonClass(list.id)}&gt;&#10;                                {list.name} ({list.gemIds.length})&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/nav&gt;&#10;&#10;                    &lt;form onSubmit={handleCreateList} className=&quot;mt-6&quot;&gt;&#10;                         &lt;h2 className=&quot;text-sm font-semibold text-slate-500 dark:text-slate-400 uppercase tracking-wider&quot;&gt;Nuova Lista&lt;/h2&gt;&#10;                         &lt;div className=&quot;mt-2 flex space-x-2&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                value={newListName}&#10;                                onChange={(e) =&gt; setNewListName(e.target.value)}&#10;                                placeholder=&quot;Nome della lista...&quot;&#10;                                className=&quot;flex-grow bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md py-1.5 px-3 text-sm text-slate-900 dark:text-white placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-1 focus:ring-indigo-500&quot;&#10;                            /&gt;&#10;                            &lt;button type=&quot;submit&quot; className=&quot;p-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-indigo-400&quot; disabled={!newListName.trim()}&gt;&#10;                                &lt;PlusCircleIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                            &lt;/button&gt;&#10;                         &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/aside&gt;&#10;                &#10;                &lt;main className=&quot;flex-1 p-4 sm:p-6 lg:p-8&quot;&gt;&#10;                    {gemsInView.length &gt; 0 ? (&#10;                        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-8 max-w-xl mx-auto&quot;&gt;&#10;                           {gemsInView.map(gem =&gt; (&#10;                                &lt;GemCard&#10;                                    key={gem.id}&#10;                                    gem={gem}&#10;                                    isLoggedIn={true}&#10;                                    isFavorite={allFavoriteIds.includes(gem.id)}&#10;                                    onSaveRequest={onToggleFavorite} /* Using onToggleFavorite here to just remove from all lists */&#10;                                    onSelect={onSelectGem}&#10;                                    onLoginRequest={onLoginRequest}&#10;                                /&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    ) : (&#10;                        &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                            &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma in questa lista&lt;/h3&gt;&#10;                            &lt;p className=&quot;mt-2 max-w-md mx-auto&quot;&gt;&#10;                                {selectedListId === 'all' &#10;                                    ? &quot;Salva le tue gemme preferite cliccando sul cuore. Le troverai tutte qui.&quot;&#10;                                    : &quot;Aggiungi gemme a questa lista dalla loro pagina di dettaglio o dal popup di salvataggio.&quot;&#10;                                }&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/main&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default SavedView;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/icons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/icons.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firebase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firebase.ts" />
              <option name="originalContent" value="import { initializeApp } from 'firebase/app';&#10;import { getAuth } from 'firebase/auth';&#10;import { getFirestore } from 'firebase/firestore';&#10;&#10;// ATTENZIONE: Sostituisci questo oggetto con la configurazione del tuo progetto Firebase!&#10;const firebaseConfig = {&#10;  apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;  authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;  projectId: &quot;curiow-432ed&quot;,&#10;  storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;  messagingSenderId: &quot;115136967854&quot;,&#10;  appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;  measurementId: &quot;G-LF4YY7HHR3&quot;&#10;};&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;&#10;// Esporta i servizi che ti servono&#10;export const auth = getAuth(app);&#10;export const db = getFirestore(app);&#10;" />
              <option name="updatedContent" value="import { initializeApp } from 'firebase/app';&#10;import { getAuth, GoogleAuthProvider } from 'firebase/auth';&#10;import { getFirestore } from 'firebase/firestore';&#10;&#10;// ATTENZIONE: Sostituisci questo oggetto con la configurazione del tuo progetto Firebase!&#10;const firebaseConfig = {&#10;  apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;  authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;  projectId: &quot;curiow-432ed&quot;,&#10;  storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;  messagingSenderId: &quot;115136967854&quot;,&#10;  appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;  measurementId: &quot;G-LF4YY7HHR3&quot;&#10;};&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;&#10;// Configura Google Auth Provider&#10;export const googleProvider = new GoogleAuthProvider();&#10;googleProvider.setCustomParameters({&#10;  prompt: 'select_account'&#10;});&#10;&#10;// Esporta i servizi che ti servono&#10;export const auth = getAuth(app);&#10;export const db = getFirestore(app);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firestoreService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firestoreService.ts" />
              <option name="originalContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  setDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  query,&#10;  limit,&#10;  onSnapshot,&#10;  Unsubscribe,&#10;  orderBy,&#10;  where,&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { Gem, Channel, User, SavedList, UserQuestion, UserRole, TopicSuggestion, ListWithItems } from '../types';&#10;import { getDefaultPermissions } from './roleService';&#10;import * as listService from './listService';&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchChannels = async (): Promise&lt;Channel[]&gt; =&gt; {&#10;  try {&#10;    const channelsCollection = collection(db, 'channels');&#10;    const channelSnapshot = await getDocs(channelsCollection);&#10;    return channelSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as Channel));&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching channels:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchGems = async (maxCount: number = 20): Promise&lt;Gem[]&gt; =&gt; {&#10;    try {&#10;        const gemsCollection = collection(db, 'gems');&#10;        const q = query(gemsCollection, limit(maxCount));&#10;        const gemSnapshot = await getDocs(q);&#10;        // Ritorniamo gemme con userQuestions vuoto, verrà popolato dal listener se necessario&#10;        return gemSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data(), userQuestions: [] } as Gem));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching gems:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const fetchUserProfile = async (uid: string): Promise&lt;User | null&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        return userDoc.exists() ? (userDoc.data() as User) : null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user profile:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export const fetchUserSavedLists = async (uid: string): Promise&lt;SavedList[]&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        if (userDoc.exists() &amp;&amp; userDoc.data().savedLists) {&#10;            return userDoc.data().savedLists;&#10;        }&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user saved lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;&#10;// --- Write Operations ---&#10;&#10;export const createUserProfile = async (uid: string, email: string, firstName: string, lastName: string, role: UserRole = UserRole.USER): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const defaultLists: SavedList[] = [&#10;        { id: 'default', name: 'Preferiti Generici', gemIds: [] }&#10;    ];&#10;    const permissions = getDefaultPermissions(role);&#10;&#10;    await setDoc(userDocRef, {&#10;        email, &#10;        firstName, &#10;        lastName,&#10;        role,&#10;        permissions,&#10;        createdAt: new Date(),&#10;        lastLoginAt: new Date(),&#10;        savedLists: defaultLists&#10;    });&#10;};&#10;&#10;export const updateUserProfile = async (uid: string, data: Partial&lt;User&gt;): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, data);&#10;};&#10;&#10;export const updateUserSavedLists = async (uid:string, lists: SavedList[]): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, { savedLists: lists });&#10;};&#10;&#10;export const addUserQuestion = async (gemId: string, question: string): Promise&lt;void&gt; =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    await addDoc(questionsCollection, {&#10;        question,&#10;        answer: '',&#10;        isGenerating: true,&#10;        createdAt: new Date(),&#10;    });&#10;};&#10;&#10;&#10;// --- Listeners ---&#10;&#10;export const listenToUserQuestions = (gemId: string, callback: (questions: UserQuestion[]) =&gt; void): Unsubscribe =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    const q = query(questionsCollection, orderBy('createdAt', 'desc'));&#10;    &#10;    return onSnapshot(q, (snapshot) =&gt; {&#10;        const questions = snapshot.docs.map(doc =&gt; ({&#10;            id: doc.id,&#10;            ...doc.data()&#10;        } as UserQuestion));&#10;        callback(questions);&#10;    });&#10;};&#10;&#10;// --- Topic Suggestions Operations ---&#10;&#10;export const fetchTopicSuggestions = async (status?: 'pending' | 'approved' | 'converted'): Promise&lt;TopicSuggestion[]&gt; =&gt; {&#10;    try {&#10;        const topicsCollection = collection(db, 'topicSuggestions');&#10;        let q = query(&#10;            topicsCollection,&#10;            where('deleted', '!=', true), // Escludi elementi eliminati&#10;            orderBy('deleted', 'asc'), // Ordina prima per deleted&#10;            orderBy('createdAt', 'desc')&#10;        );&#10;&#10;        if (status) {&#10;            q = query(&#10;                topicsCollection,&#10;                where('deleted', '!=', true), // Escludi elementi eliminati&#10;                where('status', '==', status),&#10;                orderBy('deleted', 'asc'), // Ordina prima per deleted&#10;                orderBy('createdAt', 'desc')&#10;            );&#10;        }&#10;&#10;        const topicSnapshot = await getDocs(q);&#10;        return topicSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as TopicSuggestion));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching topic suggestions:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const createTopicSuggestion = async (text: string, tags: string[], createdBy: string): Promise&lt;void&gt; =&gt; {&#10;    const topicsCollection = collection(db, 'topicSuggestions');&#10;    await addDoc(topicsCollection, {&#10;        text,&#10;        tags,&#10;        createdBy,&#10;        status: 'pending',&#10;        createdAt: new Date(),&#10;        updatedAt: new Date(),&#10;    });&#10;};&#10;&#10;export const updateTopicSuggestion = async (id: string, data: Partial&lt;TopicSuggestion&gt;): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { ...data, updatedAt: new Date() });&#10;};&#10;&#10;export const deleteTopicSuggestion = async (id: string): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { deleted: true, updatedAt: new Date() });&#10;};&#10;&#10;// --- User Management Operations ---&#10;&#10;export const fetchAllUsers = async (limit?: number): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        const usersCollection = collection(db, 'users');&#10;        let q = query(usersCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (limit) {&#10;            q = query(usersCollection, orderBy('createdAt', 'desc'), limit(limit));&#10;        }&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const searchUsers = async (searchTerm: string): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        // Nota: Firestore non supporta ricerca full-text nativa, quindi facciamo una ricerca per email&#10;        const usersCollection = collection(db, 'users');&#10;        const q = query(&#10;            usersCollection,&#10;            where('email', '&gt;=', searchTerm.toLowerCase()),&#10;            where('email', '&lt;=', searchTerm.toLowerCase() + '\uf8ff')&#10;        );&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error searching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const promoteUserRole = async (userId: string, newRole: UserRole): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', userId);&#10;    const newPermissions = getDefaultPermissions(newRole);&#10;&#10;    await updateDoc(userDocRef, {&#10;        role: newRole,&#10;        permissions: newPermissions,&#10;        updatedAt: new Date()&#10;    });&#10;};&#10;&#10;// --- Nuove funzioni per gestione liste (con retrocompatibilità) ---&#10;&#10;export const fetchUserListsNew = async (uid: string): Promise&lt;ListWithItems[]&gt; =&gt; {&#10;    try {&#10;        // Prima prova a caricare le liste dalla nuova struttura&#10;        const newLists = await listService.fetchUserLists(uid);&#10;&#10;        if (newLists.length &gt; 0) {&#10;            console.log('Found lists in new structure:', newLists.length);&#10;            return newLists;&#10;        }&#10;&#10;        // Se non ci sono liste nella nuova struttura, controlla le vecchie&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Found old lists:', oldLists.length);&#10;&#10;        if (oldLists.length &gt; 0) {&#10;            // Converti le vecchie liste nel formato nuovo per compatibilità UI&#10;            const convertedLists = oldLists.map(oldList =&gt; ({&#10;                id: oldList.id,&#10;                name: oldList.name,&#10;                isPublic: false,&#10;                createdBy: uid,&#10;                createdAt: new Date(),&#10;                updatedAt: new Date(),&#10;                gemIds: oldList.gemIds,&#10;                itemCount: oldList.gemIds.length,&#10;                userRole: 'owner' as const&#10;            }));&#10;&#10;            console.log('Converted old lists to new format:', convertedLists);&#10;            return convertedLists;&#10;        }&#10;&#10;        // Se non ci sono liste né vecchie né nuove, ritorna array vuoto&#10;        console.log('No lists found for user:', uid);&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const migrateUserToNewListStructure = async (uid: string): Promise&lt;boolean&gt; =&gt; {&#10;    try {&#10;        console.log('Starting migration for user:', uid);&#10;&#10;        // Verifica se l'utente ha già liste nella nuova struttura&#10;        const existingNewLists = await listService.fetchUserLists(uid);&#10;        console.log('Existing new lists found:', existingNewLists.length);&#10;&#10;        if (existingNewLists.length &gt; 0) {&#10;            console.log('User already migrated, skipping migration');&#10;            return true; // Già migrato&#10;        }&#10;&#10;        // Ottieni le vecchie liste&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Old lists found:', oldLists.length, oldLists);&#10;&#10;        if (oldLists.length === 0) {&#10;            console.log('No old lists found, creating default favorites list');&#10;            // Crea una lista preferiti di default nella nuova struttura&#10;            await listService.createList('Preferiti', uid, 'I tuoi contenuti preferiti', false, '#3B82F6', '❤️');&#10;            console.log('Default favorites list created');&#10;            return true;&#10;        }&#10;&#10;        console.log('Migrating old lists to new structure...');&#10;        // Migra le vecchie liste&#10;        await listService.migrateUserLists(uid, oldLists);&#10;        console.log('Migration completed successfully');&#10;&#10;        // Rimuovi le vecchie liste dal documento utente solo dopo migrazione riuscita&#10;        await updateDoc(doc(db, 'users', uid), {&#10;            savedLists: [],&#10;            migratedToNewLists: true,&#10;            migratedAt: new Date()&#10;        });&#10;        console.log('Old lists cleared from user document');&#10;&#10;        return true;&#10;    } catch (error) {&#10;        console.error(&quot;Error migrating user lists:&quot;, error);&#10;        return false;&#10;    }&#10;};&#10;&#10;// Funzioni wrapper per compatibilità con l'UI esistente&#10;export const createNewList = async (uid: string, name: string): Promise&lt;string&gt; =&gt; {&#10;    return await listService.createList(name, uid);&#10;};&#10;&#10;export const addGemToUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.addGemToList(listId, gemId, uid);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1 &amp;&amp; !oldLists[listIndex].gemIds.includes(gemId)) {&#10;            oldLists[listIndex].gemIds.push(gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;export const removeGemFromUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.removeGemFromList(listId, gemId);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1) {&#10;            oldLists[listIndex].gemIds = oldLists[listIndex].gemIds.filter(id =&gt; id !== gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;// Esporta le funzioni del nuovo servizio liste per uso diretto&#10;export const {&#10;    createList,&#10;    addGemToList,&#10;    removeGemFromList,&#10;    fetchUserLists,&#10;    fetchListById,&#10;    updateList,&#10;    deleteList,&#10;    addMemberToList,&#10;    removeMemberFromList,&#10;    checkGemInList&#10;} = listService;&#10;" />
              <option name="updatedContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  setDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  query,&#10;  limit,&#10;  onSnapshot,&#10;  Unsubscribe,&#10;  orderBy,&#10;  where,&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { Gem, Channel, User, SavedList, UserQuestion, UserRole, TopicSuggestion, ListWithItems } from '../types';&#10;import { getDefaultPermissions } from './roleService';&#10;import * as listService from './listService';&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchChannels = async (): Promise&lt;Channel[]&gt; =&gt; {&#10;  try {&#10;    const channelsCollection = collection(db, 'channels');&#10;    const channelSnapshot = await getDocs(channelsCollection);&#10;    return channelSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as Channel));&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching channels:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchGems = async (maxCount: number = 20): Promise&lt;Gem[]&gt; =&gt; {&#10;    try {&#10;        const gemsCollection = collection(db, 'gems');&#10;        const q = query(gemsCollection, limit(maxCount));&#10;        const gemSnapshot = await getDocs(q);&#10;        // Ritorniamo gemme con userQuestions vuoto, verrà popolato dal listener se necessario&#10;        return gemSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data(), userQuestions: [] } as Gem));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching gems:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const fetchUserProfile = async (uid: string): Promise&lt;User | null&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        return userDoc.exists() ? (userDoc.data() as User) : null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user profile:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export const fetchUserSavedLists = async (uid: string): Promise&lt;SavedList[]&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        if (userDoc.exists() &amp;&amp; userDoc.data().savedLists) {&#10;            return userDoc.data().savedLists;&#10;        }&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user saved lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;&#10;// --- Write Operations ---&#10;&#10;export const createUserProfile = async (uid: string, email: string, firstName: string, lastName: string, role: UserRole = UserRole.USER): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const defaultLists: SavedList[] = [&#10;        { id: 'default', name: 'Preferiti Generici', gemIds: [] }&#10;    ];&#10;    const permissions = getDefaultPermissions(role);&#10;&#10;    await setDoc(userDocRef, {&#10;        email, &#10;        firstName, &#10;        lastName,&#10;        role,&#10;        permissions,&#10;        createdAt: new Date(),&#10;        lastLoginAt: new Date(),&#10;        savedLists: defaultLists&#10;    });&#10;};&#10;&#10;export const updateUserProfile = async (uid: string, data: Partial&lt;User&gt;): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, data);&#10;};&#10;&#10;export const updateUserSavedLists = async (uid:string, lists: SavedList[]): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, { savedLists: lists });&#10;};&#10;&#10;export const addUserQuestion = async (gemId: string, question: string): Promise&lt;void&gt; =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    await addDoc(questionsCollection, {&#10;        question,&#10;        answer: '',&#10;        isGenerating: true,&#10;        createdAt: new Date(),&#10;    });&#10;};&#10;&#10;&#10;// --- Listeners ---&#10;&#10;export const listenToUserQuestions = (gemId: string, callback: (questions: UserQuestion[]) =&gt; void): Unsubscribe =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    const q = query(questionsCollection, orderBy('createdAt', 'desc'));&#10;    &#10;    return onSnapshot(q, (snapshot) =&gt; {&#10;        const questions = snapshot.docs.map(doc =&gt; ({&#10;            id: doc.id,&#10;            ...doc.data()&#10;        } as UserQuestion));&#10;        callback(questions);&#10;    });&#10;};&#10;&#10;// --- Topic Suggestions Operations ---&#10;&#10;export const fetchTopicSuggestions = async (status?: 'pending' | 'approved' | 'converted'): Promise&lt;TopicSuggestion[]&gt; =&gt; {&#10;    try {&#10;        const topicsCollection = collection(db, 'topicSuggestions');&#10;        let q = query(topicsCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (status) {&#10;            q = query(topicsCollection, where('status', '==', status), orderBy('createdAt', 'desc'));&#10;        }&#10;&#10;        const topicSnapshot = await getDocs(q);&#10;        // Filtra gli elementi eliminati lato client per evitare problemi con indici Firestore&#10;        const topics = topicSnapshot.docs&#10;            .map(doc =&gt; ({ id: doc.id, ...doc.data() } as TopicSuggestion))&#10;            .filter(topic =&gt; !topic.deleted); // Filtra solo quelli che hanno deleted = true&#10;        &#10;        return topics;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching topic suggestions:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const createTopicSuggestion = async (text: string, tags: string[], createdBy: string): Promise&lt;void&gt; =&gt; {&#10;    const topicsCollection = collection(db, 'topicSuggestions');&#10;    await addDoc(topicsCollection, {&#10;        text,&#10;        tags,&#10;        createdBy,&#10;        status: 'pending',&#10;        createdAt: new Date(),&#10;        updatedAt: new Date(),&#10;    });&#10;};&#10;&#10;export const updateTopicSuggestion = async (id: string, data: Partial&lt;TopicSuggestion&gt;): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { ...data, updatedAt: new Date() });&#10;};&#10;&#10;export const deleteTopicSuggestion = async (id: string): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { deleted: true, updatedAt: new Date() });&#10;};&#10;&#10;// --- User Management Operations ---&#10;&#10;export const fetchAllUsers = async (limit?: number): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        const usersCollection = collection(db, 'users');&#10;        let q = query(usersCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (limit) {&#10;            q = query(usersCollection, orderBy('createdAt', 'desc'), limit(limit));&#10;        }&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const searchUsers = async (searchTerm: string): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        // Nota: Firestore non supporta ricerca full-text nativa, quindi facciamo una ricerca per email&#10;        const usersCollection = collection(db, 'users');&#10;        const q = query(&#10;            usersCollection,&#10;            where('email', '&gt;=', searchTerm.toLowerCase()),&#10;            where('email', '&lt;=', searchTerm.toLowerCase() + '\uf8ff')&#10;        );&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error searching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const promoteUserRole = async (userId: string, newRole: UserRole): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', userId);&#10;    const newPermissions = getDefaultPermissions(newRole);&#10;&#10;    await updateDoc(userDocRef, {&#10;        role: newRole,&#10;        permissions: newPermissions,&#10;        updatedAt: new Date()&#10;    });&#10;};&#10;&#10;// --- Nuove funzioni per gestione liste (con retrocompatibilità) ---&#10;&#10;export const fetchUserListsNew = async (uid: string): Promise&lt;ListWithItems[]&gt; =&gt; {&#10;    try {&#10;        // Prima prova a caricare le liste dalla nuova struttura&#10;        const newLists = await listService.fetchUserLists(uid);&#10;&#10;        if (newLists.length &gt; 0) {&#10;            console.log('Found lists in new structure:', newLists.length);&#10;            return newLists;&#10;        }&#10;&#10;        // Se non ci sono liste nella nuova struttura, controlla le vecchie&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Found old lists:', oldLists.length);&#10;&#10;        if (oldLists.length &gt; 0) {&#10;            // Converti le vecchie liste nel formato nuovo per compatibilità UI&#10;            const convertedLists = oldLists.map(oldList =&gt; ({&#10;                id: oldList.id,&#10;                name: oldList.name,&#10;                isPublic: false,&#10;                createdBy: uid,&#10;                createdAt: new Date(),&#10;                updatedAt: new Date(),&#10;                gemIds: oldList.gemIds,&#10;                itemCount: oldList.gemIds.length,&#10;                userRole: 'owner' as const&#10;            }));&#10;&#10;            console.log('Converted old lists to new format:', convertedLists);&#10;            return convertedLists;&#10;        }&#10;&#10;        // Se non ci sono liste né vecchie né nuove, ritorna array vuoto&#10;        console.log('No lists found for user:', uid);&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const migrateUserToNewListStructure = async (uid: string): Promise&lt;boolean&gt; =&gt; {&#10;    try {&#10;        console.log('Starting migration for user:', uid);&#10;&#10;        // Verifica se l'utente ha già liste nella nuova struttura&#10;        const existingNewLists = await listService.fetchUserLists(uid);&#10;        console.log('Existing new lists found:', existingNewLists.length);&#10;&#10;        if (existingNewLists.length &gt; 0) {&#10;            console.log('User already migrated, skipping migration');&#10;            return true; // Già migrato&#10;        }&#10;&#10;        // Ottieni le vecchie liste&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        console.log('Old lists found:', oldLists.length, oldLists);&#10;&#10;        if (oldLists.length === 0) {&#10;            console.log('No old lists found, creating default favorites list');&#10;            // Crea una lista preferiti di default nella nuova struttura&#10;            await listService.createList('Preferiti', uid, 'I tuoi contenuti preferiti', false, '#3B82F6', '❤️');&#10;            console.log('Default favorites list created');&#10;            return true;&#10;        }&#10;&#10;        console.log('Migrating old lists to new structure...');&#10;        // Migra le vecchie liste&#10;        await listService.migrateUserLists(uid, oldLists);&#10;        console.log('Migration completed successfully');&#10;&#10;        // Rimuovi le vecchie liste dal documento utente solo dopo migrazione riuscita&#10;        await updateDoc(doc(db, 'users', uid), {&#10;            savedLists: [],&#10;            migratedToNewLists: true,&#10;            migratedAt: new Date()&#10;        });&#10;        console.log('Old lists cleared from user document');&#10;&#10;        return true;&#10;    } catch (error) {&#10;        console.error(&quot;Error migrating user lists:&quot;, error);&#10;        return false;&#10;    }&#10;};&#10;&#10;// Funzioni wrapper per compatibilità con l'UI esistente&#10;export const createNewList = async (uid: string, name: string): Promise&lt;string&gt; =&gt; {&#10;    return await listService.createList(name, uid);&#10;};&#10;&#10;export const addGemToUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.addGemToList(listId, gemId, uid);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1 &amp;&amp; !oldLists[listIndex].gemIds.includes(gemId)) {&#10;            oldLists[listIndex].gemIds.push(gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;export const removeGemFromUserList = async (uid: string, listId: string, gemId: string): Promise&lt;void&gt; =&gt; {&#10;    // Prima verifica se è una lista vecchia o nuova&#10;    const newLists = await listService.fetchUserLists(uid);&#10;    const isNewList = newLists.some(list =&gt; list.id === listId);&#10;&#10;    if (isNewList) {&#10;        await listService.removeGemFromList(listId, gemId);&#10;    } else {&#10;        // Gestisci le vecchie liste (retrocompatibilità durante migrazione)&#10;        const oldLists = await fetchUserSavedLists(uid);&#10;        const listIndex = oldLists.findIndex(list =&gt; list.id === listId);&#10;&#10;        if (listIndex !== -1) {&#10;            oldLists[listIndex].gemIds = oldLists[listIndex].gemIds.filter(id =&gt; id !== gemId);&#10;            await updateUserSavedLists(uid, oldLists);&#10;        }&#10;    }&#10;};&#10;&#10;// Esporta le funzioni del nuovo servizio liste per uso diretto&#10;export const {&#10;    createList,&#10;    addGemToList,&#10;    removeGemFromList,&#10;    fetchUserLists,&#10;    fetchListById,&#10;    updateList,&#10;    deleteList,&#10;    addMemberToList,&#10;    removeMemberFromList,&#10;    checkGemInList&#10;} = listService;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/listService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/listService.ts" />
              <option name="originalContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  deleteDoc,&#10;  query,&#10;  where,&#10;  orderBy,&#10;  writeBatch&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { List, ListItem, ListMember, ListWithItems } from '../types';&#10;&#10;// --- Creazione Liste ---&#10;&#10;export const createList = async (&#10;  name: string,&#10;  createdBy: string,&#10;  description?: string,&#10;  isPublic: boolean = false,&#10;  color?: string,&#10;  icon?: string&#10;): Promise&lt;string&gt; =&gt; {&#10;  try {&#10;    const batch = writeBatch(db);&#10;&#10;    // Crea la lista&#10;    const listRef = doc(collection(db, 'lists'));&#10;    const listData: Omit&lt;List, 'id'&gt; = {&#10;      name,&#10;      description,&#10;      isPublic,&#10;      createdBy,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      color,&#10;      icon&#10;    };&#10;&#10;    batch.set(listRef, listData);&#10;&#10;    // Aggiungi il creatore come owner&#10;    const memberRef = doc(collection(db, 'list_members'));&#10;    const memberData: Omit&lt;ListMember, 'id'&gt; = {&#10;      listId: listRef.id,&#10;      userId: createdBy,&#10;      role: 'owner',&#10;      joinedAt: new Date()&#10;    };&#10;&#10;    batch.set(memberRef, memberData);&#10;&#10;    await batch.commit();&#10;    return listRef.id;&#10;  } catch (error) {&#10;    console.error(&quot;Error creating list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Aggiunta/Rimozione Gems ---&#10;&#10;export const addGemToList = async (&#10;  listId: string,&#10;  gemId: string,&#10;  addedBy: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    // Verifica se il gem è già nella lista&#10;    const existingItemQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId),&#10;      where('gemId', '==', gemId)&#10;    );&#10;    const existingItems = await getDocs(existingItemQuery);&#10;&#10;    if (!existingItems.empty) {&#10;      throw new Error('Gem already in list');&#10;    }&#10;&#10;    // Aggiungi il gem alla lista&#10;    const itemData: Omit&lt;ListItem, 'id'&gt; = {&#10;      listId,&#10;      gemId,&#10;      addedBy,&#10;      addedAt: new Date()&#10;    };&#10;&#10;    await addDoc(collection(db, 'list_items'), itemData);&#10;&#10;    // Aggiorna timestamp della lista&#10;    await updateDoc(doc(db, 'lists', listId), {&#10;      updatedAt: new Date()&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error adding gem to list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;export const removeGemFromList = async (&#10;  listId: string,&#10;  gemId: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    // Trova l'item da rimuovere&#10;    const itemQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId),&#10;      where('gemId', '==', gemId)&#10;    );&#10;    const itemSnapshot = await getDocs(itemQuery);&#10;&#10;    if (itemSnapshot.empty) {&#10;      throw new Error('Item not found in list');&#10;    }&#10;&#10;    // Rimuovi l'item&#10;    const batch = writeBatch(db);&#10;    itemSnapshot.docs.forEach(doc =&gt; {&#10;      batch.delete(doc.ref);&#10;    });&#10;&#10;    // Aggiorna timestamp della lista&#10;    batch.update(doc(db, 'lists', listId), {&#10;      updatedAt: new Date()&#10;    });&#10;&#10;    await batch.commit();&#10;  } catch (error) {&#10;    console.error(&quot;Error removing gem from list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchUserLists = async (userId: string): Promise&lt;ListWithItems[]&gt; =&gt; {&#10;  try {&#10;    // Ottieni le liste dell'utente tramite list_members&#10;    const memberQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('userId', '==', userId)&#10;    );&#10;    const memberSnapshot = await getDocs(memberQuery);&#10;&#10;    if (memberSnapshot.empty) {&#10;      return [];&#10;    }&#10;&#10;    const lists: ListWithItems[] = [];&#10;&#10;    for (const memberDoc of memberSnapshot.docs) {&#10;      const memberData = memberDoc.data() as ListMember;&#10;&#10;      // Ottieni i dati della lista&#10;      const listDoc = await getDoc(doc(db, 'lists', memberData.listId));&#10;      if (!listDoc.exists()) continue;&#10;&#10;      const listData = { id: listDoc.id, ...listDoc.data() } as List;&#10;&#10;      // Converti i Timestamp di Firestore in Date&#10;      const createdAt = listData.createdAt instanceof Date ? listData.createdAt : listData.createdAt.toDate();&#10;      const updatedAt = listData.updatedAt instanceof Date ? listData.updatedAt : listData.updatedAt.toDate();&#10;&#10;      // Ottieni gli items della lista (rimuoviamo l'ordinamento per evitare l'indice)&#10;      const itemsQuery = query(&#10;        collection(db, 'list_items'),&#10;        where('listId', '==', memberData.listId)&#10;      );&#10;      const itemsSnapshot = await getDocs(itemsQuery);&#10;&#10;      const gemIds = itemsSnapshot.docs.map(doc =&gt; doc.data().gemId);&#10;&#10;      lists.push({&#10;        ...listData,&#10;        createdAt,&#10;        updatedAt,&#10;        gemIds,&#10;        itemCount: gemIds.length,&#10;        userRole: memberData.role&#10;      });&#10;    }&#10;&#10;    return lists.sort((a, b) =&gt; b.updatedAt.getTime() - a.updatedAt.getTime());&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching user lists:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchListById = async (listId: string, userId?: string): Promise&lt;ListWithItems | null&gt; =&gt; {&#10;  try {&#10;    const listDoc = await getDoc(doc(db, 'lists', listId));&#10;    if (!listDoc.exists()) return null;&#10;&#10;    const listData = { id: listDoc.id, ...listDoc.data() } as List;&#10;&#10;    // Verifica i permessi se userId è fornito&#10;    let userRole: 'owner' | 'editor' | 'viewer' | undefined;&#10;    if (userId) {&#10;      const memberQuery = query(&#10;        collection(db, 'list_members'),&#10;        where('listId', '==', listId),&#10;        where('userId', '==', userId)&#10;      );&#10;      const memberSnapshot = await getDocs(memberQuery);&#10;&#10;      if (!memberSnapshot.empty) {&#10;        userRole = memberSnapshot.docs[0].data().role as 'owner' | 'editor' | 'viewer';&#10;      } else if (!listData.isPublic) {&#10;        return null; // Non autorizzato per liste private&#10;      }&#10;    } else if (!listData.isPublic) {&#10;      return null; // Non autorizzato per liste private&#10;    }&#10;&#10;    // Ottieni gli items della lista (rimuoviamo anche qui l'ordinamento)&#10;    const itemsQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId)&#10;    );&#10;    const itemsSnapshot = await getDocs(itemsQuery);&#10;&#10;    const gemIds = itemsSnapshot.docs.map(doc =&gt; doc.data().gemId);&#10;&#10;    return {&#10;      ...listData,&#10;      gemIds,&#10;      itemCount: gemIds.length,&#10;      userRole&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching list:&quot;, error);&#10;    return null;&#10;  }&#10;};&#10;&#10;// --- Gestione Lista ---&#10;&#10;export const updateList = async (&#10;  listId: string,&#10;  updates: Partial&lt;Pick&lt;List, 'name' | 'description' | 'isPublic' | 'color' | 'icon'&gt;&gt;&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    await updateDoc(doc(db, 'lists', listId), {&#10;      ...updates,&#10;      updatedAt: new Date()&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;export const deleteList = async (listId: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const batch = writeBatch(db);&#10;&#10;    // Elimina tutti gli items della lista&#10;    const itemsQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId)&#10;    );&#10;    const itemsSnapshot = await getDocs(itemsQuery);&#10;    itemsSnapshot.docs.forEach(doc =&gt; {&#10;      batch.delete(doc.ref);&#10;    });&#10;&#10;    // Elimina tutti i membri della lista&#10;    const membersQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('listId', '==', listId)&#10;    );&#10;    const membersSnapshot = await getDocs(membersQuery);&#10;    membersSnapshot.docs.forEach(doc =&gt; {&#10;      batch.delete(doc.ref);&#10;    });&#10;&#10;    // Elimina la lista&#10;    batch.delete(doc(db, 'lists', listId));&#10;&#10;    await batch.commit();&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Gestione Membri (per condivisione futura) ---&#10;&#10;export const addMemberToList = async (&#10;  listId: string,&#10;  userId: string,&#10;  role: 'editor' | 'viewer' = 'viewer'&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    // Verifica se l'utente è già membro&#10;    const existingMemberQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('listId', '==', listId),&#10;      where('userId', '==', userId)&#10;    );&#10;    const existingMembers = await getDocs(existingMemberQuery);&#10;&#10;    if (!existingMembers.empty) {&#10;      throw new Error('User is already a member of this list');&#10;    }&#10;&#10;    const memberData: Omit&lt;ListMember, 'id'&gt; = {&#10;      listId,&#10;      userId,&#10;      role,&#10;      joinedAt: new Date()&#10;    };&#10;&#10;    await addDoc(collection(db, 'list_members'), memberData);&#10;  } catch (error) {&#10;    console.error(&quot;Error adding member to list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;export const removeMemberFromList = async (&#10;  listId: string,&#10;  userId: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const memberQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('listId', '==', listId),&#10;      where('userId', '==', userId)&#10;    );&#10;    const memberSnapshot = await getDocs(memberQuery);&#10;&#10;    if (memberSnapshot.empty) {&#10;      throw new Error('Member not found');&#10;    }&#10;&#10;    // Non permettere di rimuovere l'owner&#10;    const memberData = memberSnapshot.docs[0].data() as ListMember;&#10;    if (memberData.role === 'owner') {&#10;      throw new Error('Cannot remove owner from list');&#10;    }&#10;&#10;    await deleteDoc(memberSnapshot.docs[0].ref);&#10;  } catch (error) {&#10;    console.error(&quot;Error removing member from list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Utilità ---&#10;&#10;export const checkGemInList = async (listId: string, gemId: string): Promise&lt;boolean&gt; =&gt; {&#10;  try {&#10;    const itemQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId),&#10;      where('gemId', '==', gemId)&#10;    );&#10;    const itemSnapshot = await getDocs(itemQuery);&#10;    return !itemSnapshot.empty;&#10;  } catch (error) {&#10;    console.error(&quot;Error checking gem in list:&quot;, error);&#10;    return false;&#10;  }&#10;};&#10;&#10;// --- Migrazione (per convertire le liste esistenti) ---&#10;&#10;export const migrateUserLists = async (userId: string, oldLists: { id: string; name: string; gemIds: string[] }[]): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const batch = writeBatch(db);&#10;&#10;    for (const oldList of oldLists) {&#10;      // Crea la nuova lista&#10;      const listRef = doc(collection(db, 'lists'));&#10;      const listData: Omit&lt;List, 'id'&gt; = {&#10;        name: oldList.name,&#10;        isPublic: false,&#10;        createdBy: userId,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      };&#10;&#10;      batch.set(listRef, listData);&#10;&#10;      // Aggiungi il creatore come owner&#10;      const memberRef = doc(collection(db, 'list_members'));&#10;      const memberData: Omit&lt;ListMember, 'id'&gt; = {&#10;        listId: listRef.id,&#10;        userId,&#10;        role: 'owner',&#10;        joinedAt: new Date()&#10;      };&#10;&#10;      batch.set(memberRef, memberData);&#10;&#10;      // Aggiungi tutti i gems&#10;      for (const gemId of oldList.gemIds) {&#10;        const itemRef = doc(collection(db, 'list_items'));&#10;        const itemData: Omit&lt;ListItem, 'id'&gt; = {&#10;          listId: listRef.id,&#10;          gemId,&#10;          addedBy: userId,&#10;          addedAt: new Date()&#10;        };&#10;&#10;        batch.set(itemRef, itemData);&#10;      }&#10;    }&#10;&#10;    await batch.commit();&#10;  } catch (error) {&#10;    console.error(&quot;Error migrating user lists:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;" />
              <option name="updatedContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  deleteDoc,&#10;  query,&#10;  where,&#10;  orderBy,&#10;  writeBatch&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { List, ListItem, ListMember, ListWithItems } from '../types';&#10;&#10;// --- Creazione Liste ---&#10;&#10;export const createList = async (&#10;  name: string,&#10;  createdBy: string,&#10;  description?: string,&#10;  isPublic: boolean = false,&#10;  color?: string,&#10;  icon?: string&#10;): Promise&lt;string&gt; =&gt; {&#10;  try {&#10;    const batch = writeBatch(db);&#10;&#10;    // Crea la lista&#10;    const listRef = doc(collection(db, 'lists'));&#10;    const listData: Omit&lt;List, 'id'&gt; = {&#10;      name,&#10;      isPublic,&#10;      createdBy,&#10;      createdAt: new Date(),&#10;      updatedAt: new Date(),&#10;      ...(description &amp;&amp; { description }),&#10;      ...(color &amp;&amp; { color }),&#10;      ...(icon &amp;&amp; { icon })&#10;    };&#10;&#10;    batch.set(listRef, listData);&#10;&#10;    // Aggiungi il creatore come owner&#10;    const memberRef = doc(collection(db, 'list_members'));&#10;    const memberData: Omit&lt;ListMember, 'id'&gt; = {&#10;      listId: listRef.id,&#10;      userId: createdBy,&#10;      role: 'owner',&#10;      joinedAt: new Date()&#10;    };&#10;&#10;    batch.set(memberRef, memberData);&#10;&#10;    await batch.commit();&#10;    return listRef.id;&#10;  } catch (error) {&#10;    console.error(&quot;Error creating list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Aggiunta/Rimozione Gems ---&#10;&#10;export const addGemToList = async (&#10;  listId: string,&#10;  gemId: string,&#10;  addedBy: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    // Verifica se il gem è già nella lista&#10;    const existingItemQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId),&#10;      where('gemId', '==', gemId)&#10;    );&#10;    const existingItems = await getDocs(existingItemQuery);&#10;&#10;    if (!existingItems.empty) {&#10;      throw new Error('Gem already in list');&#10;    }&#10;&#10;    // Aggiungi il gem alla lista&#10;    const itemData: Omit&lt;ListItem, 'id'&gt; = {&#10;      listId,&#10;      gemId,&#10;      addedBy,&#10;      addedAt: new Date()&#10;    };&#10;&#10;    await addDoc(collection(db, 'list_items'), itemData);&#10;&#10;    // Aggiorna timestamp della lista&#10;    await updateDoc(doc(db, 'lists', listId), {&#10;      updatedAt: new Date()&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error adding gem to list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;export const removeGemFromList = async (&#10;  listId: string,&#10;  gemId: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    // Trova l'item da rimuovere&#10;    const itemQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId),&#10;      where('gemId', '==', gemId)&#10;    );&#10;    const itemSnapshot = await getDocs(itemQuery);&#10;&#10;    if (itemSnapshot.empty) {&#10;      throw new Error('Item not found in list');&#10;    }&#10;&#10;    // Rimuovi l'item&#10;    const batch = writeBatch(db);&#10;    itemSnapshot.docs.forEach(doc =&gt; {&#10;      batch.delete(doc.ref);&#10;    });&#10;&#10;    // Aggiorna timestamp della lista&#10;    batch.update(doc(db, 'lists', listId), {&#10;      updatedAt: new Date()&#10;    });&#10;&#10;    await batch.commit();&#10;  } catch (error) {&#10;    console.error(&quot;Error removing gem from list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchUserLists = async (userId: string): Promise&lt;ListWithItems[]&gt; =&gt; {&#10;  try {&#10;    // Ottieni le liste dell'utente tramite list_members&#10;    const memberQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('userId', '==', userId)&#10;    );&#10;    const memberSnapshot = await getDocs(memberQuery);&#10;&#10;    if (memberSnapshot.empty) {&#10;      return [];&#10;    }&#10;&#10;    const lists: ListWithItems[] = [];&#10;&#10;    for (const memberDoc of memberSnapshot.docs) {&#10;      const memberData = memberDoc.data() as ListMember;&#10;&#10;      // Ottieni i dati della lista&#10;      const listDoc = await getDoc(doc(db, 'lists', memberData.listId));&#10;      if (!listDoc.exists()) continue;&#10;&#10;      const listData = { id: listDoc.id, ...listDoc.data() } as List;&#10;&#10;      // Converti i Timestamp di Firestore in Date&#10;      const createdAt = listData.createdAt instanceof Date ? listData.createdAt : listData.createdAt.toDate();&#10;      const updatedAt = listData.updatedAt instanceof Date ? listData.updatedAt : listData.updatedAt.toDate();&#10;&#10;      // Ottieni gli items della lista (rimuoviamo l'ordinamento per evitare l'indice)&#10;      const itemsQuery = query(&#10;        collection(db, 'list_items'),&#10;        where('listId', '==', memberData.listId)&#10;      );&#10;      const itemsSnapshot = await getDocs(itemsQuery);&#10;&#10;      const gemIds = itemsSnapshot.docs.map(doc =&gt; doc.data().gemId);&#10;&#10;      lists.push({&#10;        ...listData,&#10;        createdAt,&#10;        updatedAt,&#10;        gemIds,&#10;        itemCount: gemIds.length,&#10;        userRole: memberData.role&#10;      });&#10;    }&#10;&#10;    return lists.sort((a, b) =&gt; b.updatedAt.getTime() - a.updatedAt.getTime());&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching user lists:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchListById = async (listId: string, userId?: string): Promise&lt;ListWithItems | null&gt; =&gt; {&#10;  try {&#10;    const listDoc = await getDoc(doc(db, 'lists', listId));&#10;    if (!listDoc.exists()) return null;&#10;&#10;    const listData = { id: listDoc.id, ...listDoc.data() } as List;&#10;&#10;    // Verifica i permessi se userId è fornito&#10;    let userRole: 'owner' | 'editor' | 'viewer' | undefined;&#10;    if (userId) {&#10;      const memberQuery = query(&#10;        collection(db, 'list_members'),&#10;        where('listId', '==', listId),&#10;        where('userId', '==', userId)&#10;      );&#10;      const memberSnapshot = await getDocs(memberQuery);&#10;&#10;      if (!memberSnapshot.empty) {&#10;        userRole = memberSnapshot.docs[0].data().role as 'owner' | 'editor' | 'viewer';&#10;      } else if (!listData.isPublic) {&#10;        return null; // Non autorizzato per liste private&#10;      }&#10;    } else if (!listData.isPublic) {&#10;      return null; // Non autorizzato per liste private&#10;    }&#10;&#10;    // Ottieni gli items della lista (rimuoviamo anche qui l'ordinamento)&#10;    const itemsQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId)&#10;    );&#10;    const itemsSnapshot = await getDocs(itemsQuery);&#10;&#10;    const gemIds = itemsSnapshot.docs.map(doc =&gt; doc.data().gemId);&#10;&#10;    return {&#10;      ...listData,&#10;      gemIds,&#10;      itemCount: gemIds.length,&#10;      userRole&#10;    };&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching list:&quot;, error);&#10;    return null;&#10;  }&#10;};&#10;&#10;// --- Gestione Lista ---&#10;&#10;export const updateList = async (&#10;  listId: string,&#10;  updates: Partial&lt;Pick&lt;List, 'name' | 'description' | 'isPublic' | 'color' | 'icon'&gt;&gt;&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    await updateDoc(doc(db, 'lists', listId), {&#10;      ...updates,&#10;      updatedAt: new Date()&#10;    });&#10;  } catch (error) {&#10;    console.error(&quot;Error updating list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;export const deleteList = async (listId: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const batch = writeBatch(db);&#10;&#10;    // Elimina tutti gli items della lista&#10;    const itemsQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId)&#10;    );&#10;    const itemsSnapshot = await getDocs(itemsQuery);&#10;    itemsSnapshot.docs.forEach(doc =&gt; {&#10;      batch.delete(doc.ref);&#10;    });&#10;&#10;    // Elimina tutti i membri della lista&#10;    const membersQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('listId', '==', listId)&#10;    );&#10;    const membersSnapshot = await getDocs(membersQuery);&#10;    membersSnapshot.docs.forEach(doc =&gt; {&#10;      batch.delete(doc.ref);&#10;    });&#10;&#10;    // Elimina la lista&#10;    batch.delete(doc(db, 'lists', listId));&#10;&#10;    await batch.commit();&#10;  } catch (error) {&#10;    console.error(&quot;Error deleting list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Gestione Membri (per condivisione futura) ---&#10;&#10;export const addMemberToList = async (&#10;  listId: string,&#10;  userId: string,&#10;  role: 'editor' | 'viewer' = 'viewer'&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    // Verifica se l'utente è già membro&#10;    const existingMemberQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('listId', '==', listId),&#10;      where('userId', '==', userId)&#10;    );&#10;    const existingMembers = await getDocs(existingMemberQuery);&#10;&#10;    if (!existingMembers.empty) {&#10;      throw new Error('User is already a member of this list');&#10;    }&#10;&#10;    const memberData: Omit&lt;ListMember, 'id'&gt; = {&#10;      listId,&#10;      userId,&#10;      role,&#10;      joinedAt: new Date()&#10;    };&#10;&#10;    await addDoc(collection(db, 'list_members'), memberData);&#10;  } catch (error) {&#10;    console.error(&quot;Error adding member to list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;export const removeMemberFromList = async (&#10;  listId: string,&#10;  userId: string&#10;): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const memberQuery = query(&#10;      collection(db, 'list_members'),&#10;      where('listId', '==', listId),&#10;      where('userId', '==', userId)&#10;    );&#10;    const memberSnapshot = await getDocs(memberQuery);&#10;&#10;    if (memberSnapshot.empty) {&#10;      throw new Error('Member not found');&#10;    }&#10;&#10;    // Non permettere di rimuovere l'owner&#10;    const memberData = memberSnapshot.docs[0].data() as ListMember;&#10;    if (memberData.role === 'owner') {&#10;      throw new Error('Cannot remove owner from list');&#10;    }&#10;&#10;    await deleteDoc(memberSnapshot.docs[0].ref);&#10;  } catch (error) {&#10;    console.error(&quot;Error removing member from list:&quot;, error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;// --- Utilità ---&#10;&#10;export const checkGemInList = async (listId: string, gemId: string): Promise&lt;boolean&gt; =&gt; {&#10;  try {&#10;    const itemQuery = query(&#10;      collection(db, 'list_items'),&#10;      where('listId', '==', listId),&#10;      where('gemId', '==', gemId)&#10;    );&#10;    const itemSnapshot = await getDocs(itemQuery);&#10;    return !itemSnapshot.empty;&#10;  } catch (error) {&#10;    console.error(&quot;Error checking gem in list:&quot;, error);&#10;    return false;&#10;  }&#10;};&#10;&#10;// --- Migrazione (per convertire le liste esistenti) ---&#10;&#10;export const migrateUserLists = async (userId: string, oldLists: { id: string; name: string; gemIds: string[] }[]): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const batch = writeBatch(db);&#10;&#10;    for (const oldList of oldLists) {&#10;      // Crea la nuova lista&#10;      const listRef = doc(collection(db, 'lists'));&#10;      const listData: Omit&lt;List, 'id'&gt; = {&#10;        name: oldList.name,&#10;        isPublic: false,&#10;        createdBy: userId,&#10;        createdAt: new Date(),&#10;        updatedAt: new Date()&#10;      };&#10;&#10;      batch.set(listRef, listData);&#10;&#10;      // Aggiungi il creatore come owner&#10;      const memberRef = doc(collection(db, 'list_members'));&#10;      const memberData: Omit&lt;ListMember, 'id'&gt; = {&#10;        listId: listRef.id,&#10;        userId,&#10;        role: 'owner',&#10;        joinedAt: new Date()&#10;      };&#10;&#10;      batch.set(memberRef, memberData);&#10;&#10;      // Aggiungi tutti i gems&#10;      for (const gemId of oldList.gemIds) {&#10;        const itemRef = doc(collection(db, 'list_items'));&#10;        const itemData: Omit&lt;ListItem, 'id'&gt; = {&#10;          listId: listRef.id,&#10;          gemId,&#10;          addedBy: userId,&#10;          addedAt: new Date()&#10;        };&#10;&#10;        batch.set(itemRef, itemData);&#10;      }&#10;    }&#10;&#10;    await batch.commit();&#10;  } catch (error) {&#10;    console.error(&quot;Error migrating user lists:&quot;, error);&#10;    throw error;&#10;  }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/roleService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/roleService.ts" />
              <option name="originalContent" value="import { UserRole, UserPermissions } from '../types';&#10;&#10;/**&#10; * Restituisce i permessi di default per ogni ruolo&#10; */&#10;export const getDefaultPermissions = (role: UserRole): UserPermissions =&gt; {&#10;  switch (role) {&#10;    case UserRole.ADMIN:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: true,&#10;        canManageUsers: true,&#10;        canModerateContent: true,&#10;&#10;    case UserRole.MODERATOR:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: true,&#10;      };&#10;    case UserRole.USER:&#10;    default:&#10;      return {&#10;        canCreateGems: false,&#10;        canEditGems: false,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: false,&#10;      };&#10;  }&#10;&#10;/**&#10; * Verifica se un utente ha un permesso specifico&#10; */&#10;export const hasPermission = (&#10;  userPermissions: UserPermissions,&#10;  permission: keyof UserPermissions&#10;): boolean =&gt; {&#10;  return userPermissions[permission] === true;&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha almeno uno dei ruoli specificati&#10; */&#10;export const hasRole = (userRole: UserRole, allowedRoles: UserRole[]): boolean =&gt; {&#10;  return allowedRoles.includes(userRole);&#10;};&#10;&#10;/**&#10; * Verifica se un utente è admin&#10; */&#10;export const isAdmin = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Verifica se un utente è moderatore o admin&#10; */&#10;export const isModerator = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.MODERATOR || userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Hook personalizzato per verificare i permessi dell'utente corrente&#10; */&#10;export const useUserPermissions = (user: { role: UserRole; permissions: UserPermissions } | null) =&gt; {&#10;  if (!user) {&#10;    return {&#10;      canCreateGems: false,&#10;      canEditGems: false,&#10;      canDeleteGems: false,&#10;      canManageUsers: false,&#10;      canModerateContent: false,&#10;      isAdmin: false,&#10;      isModerator: false,&#10;    };&#10;  }&#10;&#10;  return {&#10;    ...user.permissions,&#10;    isAdmin: isAdmin(user.role),&#10;    isModerator: isModerator(user.role),&#10;  };&#10;};&#10;" />
              <option name="updatedContent" value="import { UserRole, UserPermissions } from '../types.js';&#10;&#10;/**&#10; * Restituisce i permessi di default per ogni ruolo&#10; */&#10;export const getDefaultPermissions = (role: UserRole): UserPermissions =&gt; {&#10;  switch (role) {&#10;    case UserRole.ADMIN:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: true,&#10;        canManageUsers: true,&#10;        canModerateContent: true,&#10;        canViewDashboard: true,&#10;      };&#10;&#10;    case UserRole.MODERATOR:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: true,&#10;        canViewDashboard: true,&#10;      };&#10;&#10;    case UserRole.USER:&#10;    default:&#10;      return {&#10;        canCreateGems: false,&#10;        canEditGems: false,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: false,&#10;        canViewDashboard: false,&#10;      };&#10;  }&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha un permesso specifico&#10; */&#10;export const hasPermission = (&#10;  userPermissions: UserPermissions,&#10;  permission: keyof UserPermissions&#10;): boolean =&gt; {&#10;  return userPermissions[permission] === true;&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha almeno uno dei ruoli specificati&#10; */&#10;export const hasRole = (userRole: UserRole, allowedRoles: UserRole[]): boolean =&gt; {&#10;  return allowedRoles.includes(userRole);&#10;};&#10;&#10;/**&#10; * Verifica se un utente è admin&#10; */&#10;export const isAdmin = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Verifica se un utente è moderatore o admin&#10; */&#10;export const isModerator = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.MODERATOR || userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Hook personalizzato per verificare i permessi dell'utente corrente&#10; */&#10;export const useUserPermissions = (user: { role: UserRole; permissions: UserPermissions } | null) =&gt; {&#10;  if (!user) {&#10;    return {&#10;      canCreateGems: false,&#10;      canEditGems: false,&#10;      canDeleteGems: false,&#10;      canManageUsers: false,&#10;      canModerateContent: false,&#10;      isAdmin: false,&#10;      isModerator: false,&#10;    };&#10;  }&#10;&#10;  return {&#10;    ...user.permissions,&#10;    isAdmin: isAdmin(user.role),&#10;    isModerator: isModerator(user.role),&#10;  };&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types.ts" />
              <option name="originalContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[];&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    emoji: string;&#10;    filterTags: string[];&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;export interface User {&#10;  firstName: string;&#10;  lastName: string;&#10;  email: string;&#10;  role: UserRole;&#10;  permissions: UserPermissions;&#10;  createdAt: Date;&#10;  lastLoginAt?: Date;&#10;}&#10;&#10;export type Filter = &#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;&#10;" />
              <option name="updatedContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;  canViewDashboard: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[];&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    emoji: string;&#10;    filterTags: string[];&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;// Nuovi tipi per la struttura ristrutturata&#10;export interface List {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string; // userId&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string; // Per personalizzazione UI futura&#10;    icon?: string; // Emoji o icona&#10;}&#10;&#10;export interface ListItem {&#10;    id: string;&#10;    listId: string;&#10;    gemId: string;&#10;    addedBy: string; // userId&#10;    addedAt: Date;&#10;    order?: number; // Per ordinamento personalizzato&#10;}&#10;&#10;export interface ListMember {&#10;    id: string;&#10;    listId: string;&#10;    userId: string;&#10;    role: 'owner' | 'editor' | 'viewer';&#10;    joinedAt: Date;&#10;}&#10;&#10;// Tipo per le viste aggregate (per compatibilità con UI esistente)&#10;export interface ListWithItems {&#10;    id: string;&#10;    name: string;&#10;    description?: string;&#10;    isPublic: boolean;&#10;    createdBy: string;&#10;    createdAt: Date;&#10;    updatedAt: Date;&#10;    color?: string;&#10;    icon?: string;&#10;    gemIds: string[];&#10;    itemCount: number;&#10;    userRole?: 'owner' | 'editor' | 'viewer';&#10;}&#10;&#10;export type Filter = &#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  text: string;&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/utils/adminUtils.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/utils/adminUtils.ts" />
              <option name="updatedContent" value="import { doc, updateDoc } from 'firebase/firestore';&#10;import { db } from '../services/firebase';&#10;import { UserRole } from '../types';&#10;import { getDefaultPermissions } from '../services/roleService';&#10;&#10;/**&#10; * Funzione di utilità per promuovere un utente ad admin&#10; * Utilizzare solo in fase di sviluppo o tramite console admin&#10; */&#10;export const promoteUserToAdmin = async (uid: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const adminPermissions = getDefaultPermissions(UserRole.ADMIN);&#10;    &#10;    await updateDoc(userDocRef, {&#10;      role: UserRole.ADMIN,&#10;      permissions: adminPermissions,&#10;      updatedAt: new Date()&#10;    });&#10;    &#10;    console.log(`User ${uid} promoted to admin successfully`);&#10;  } catch (error) {&#10;    console.error('Error promoting user to admin:', error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;/**&#10; * Funzione di utilità per promuovere un utente a moderatore&#10; */&#10;export const promoteUserToModerator = async (uid: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const moderatorPermissions = getDefaultPermissions(UserRole.MODERATOR);&#10;    &#10;    await updateDoc(userDocRef, {&#10;      role: UserRole.MODERATOR,&#10;      permissions: moderatorPermissions,&#10;      updatedAt: new Date()&#10;    });&#10;    &#10;    console.log(`User ${uid} promoted to moderator successfully`);&#10;  } catch (error) {&#10;    console.error('Error promoting user to moderator:', error);&#10;    throw error;&#10;  }&#10;};&#10;&#10;/**&#10; * Funzione di utilità per verificare i permessi di un utente&#10; */&#10;export const checkUserPermissions = async (uid: string): Promise&lt;void&gt; =&gt; {&#10;  try {&#10;    const { fetchUserProfile } = await import('../services/firestoreService');&#10;    const userProfile = await fetchUserProfile(uid);&#10;    &#10;    if (userProfile) {&#10;      console.log('User Profile:', userProfile);&#10;      console.log('Role:', userProfile.role);&#10;      console.log('Permissions:', userProfile.permissions);&#10;    } else {&#10;      console.log('User profile not found');&#10;    }&#10;  } catch (error) {&#10;    console.error('Error checking user permissions:', error);&#10;  }&#10;};&#10;&#10;// Esponi le funzioni globalmente per l'uso in console del browser&#10;declare global {&#10;  interface Window {&#10;    adminUtils: {&#10;      promoteUserToAdmin: typeof promoteUserToAdmin;&#10;      promoteUserToModerator: typeof promoteUserToModerator;&#10;      checkUserPermissions: typeof checkUserPermissions;&#10;    };&#10;  }&#10;}&#10;&#10;if (typeof window !== 'undefined') {&#10;  window.adminUtils = {&#10;    promoteUserToAdmin,&#10;    promoteUserToModerator,&#10;    checkUserPermissions&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>