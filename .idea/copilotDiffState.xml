<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.cjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.cjs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="const { initializeApp } = require('firebase/app');&#10;const { getFirestore, collection, getDocs, updateDoc, doc } = require('firebase/firestore');&#10;const { firebaseConfig } = require('../services/firebase.cjs');&#10;&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.js" />
              <option name="updatedContent" value="const { initializeApp } = require('firebase/app');&#10;const { getFirestore, collection, getDocs, updateDoc, doc } = require('firebase/firestore');&#10;const { firebaseConfig } = require('../services/firebase');&#10;&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/scripts/normalizeStepQuestions.ts" />
              <option name="updatedContent" value="import { initializeApp } from 'firebase/app';&#10;import { getFirestore, collection, getDocs, updateDoc, doc } from 'firebase/firestore';&#10;import { firebaseConfig } from '../services/firebase';&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;const db = getFirestore(app);&#10;&#10;async function normalizeStepQuestions() {&#10;  const questionsRef = collection(db, 'questions');&#10;  const snapshot = await getDocs(questionsRef);&#10;  let updatedCount = 0;&#10;  for (const qDoc of snapshot.docs) {&#10;    const data = qDoc.data();&#10;    if (data.section === 'step' &amp;&amp; (data.index === null || data.index === undefined)) {&#10;      await updateDoc(doc(db, 'questions', qDoc.id), { index: 0 });&#10;      updatedCount++;&#10;      console.log(`Aggiornata question ${qDoc.id}: index -&gt; 0`);&#10;    }&#10;  }&#10;  console.log(`Totale domande normalizzate: ${updatedCount}`);&#10;}&#10;&#10;// Esegui solo se chiamato direttamente&#10;if (require.main === module) {&#10;  normalizeStepQuestions().then(() =&gt; {&#10;    console.log('Normalizzazione completata.');&#10;    process.exit(0);&#10;  }).catch(err =&gt; {&#10;    console.error('Errore durante la normalizzazione:', err);&#10;    process.exit(1);&#10;  });&#10;}&#10;&#10;export default normalizeStepQuestions;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firebase.cjs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firebase.cjs" />
              <option name="updatedContent" value="module.exports = {&#10;  firebaseConfig: {&#10;    apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;    authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;    projectId: &quot;curiow-432ed&quot;,&#10;    storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;    messagingSenderId: &quot;115136967854&quot;,&#10;    appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;    measurementId: &quot;G-LF4YY7HHR3&quot;&#10;  }&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firebase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firebase.ts" />
              <option name="originalContent" value="import { initializeApp } from 'firebase/app';&#10;import { getAuth, GoogleAuthProvider } from 'firebase/auth';&#10;import { getFirestore } from 'firebase/firestore';&#10;// Aggiunta Analytics&#10;import { getAnalytics, isSupported, logEvent, type Analytics } from 'firebase/analytics';&#10;&#10;// ATTENZIONE: Sostituisci questo oggetto con la configurazione del tuo progetto Firebase!&#10;const firebaseConfig = {&#10;  apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;  authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;  projectId: &quot;curiow-432ed&quot;,&#10;  storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;  messagingSenderId: &quot;115136967854&quot;,&#10;  appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;  measurementId: &quot;G-LF4YY7HHR3&quot;&#10;};&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;&#10;// Inizializzazione lazy di Analytics (solo browser + supporto)&#10;let analyticsInstance: Analytics | null = null;&#10;if (typeof window !== 'undefined') {&#10;  isSupported().then(supported =&gt; {&#10;    if (supported) {&#10;      analyticsInstance = getAnalytics(app);&#10;    }&#10;  }).catch(() =&gt; {/* ignore */});&#10;}&#10;&#10;export const getAnalyticsInstance = () =&gt; analyticsInstance;&#10;export const trackEvent = (eventName: string, params?: Record&lt;string, any&gt;) =&gt; {&#10;  if (!analyticsInstance) return;&#10;  try { logEvent(analyticsInstance, eventName as any, params); } catch { /* noop */ }&#10;};&#10;&#10;// Configura Google Auth Provider&#10;export const googleProvider = new GoogleAuthProvider();&#10;googleProvider.setCustomParameters({&#10;  prompt: 'select_account'&#10;});&#10;&#10;// Esporta i servizi che ti servono&#10;export const auth = getAuth(app);&#10;export const db = getFirestore(app);&#10;&#10;export const getIdToken = async (): Promise&lt;string | null&gt; =&gt; {&#10;    const user = auth.currentUser;&#10;    if (user) {&#10;        return await user.getIdToken();&#10;    }&#10;    return null;&#10;    };&#10;" />
              <option name="updatedContent" value="import { initializeApp } from 'firebase/app';&#10;import { getAuth, GoogleAuthProvider } from 'firebase/auth';&#10;import { getFirestore } from 'firebase/firestore';&#10;// Aggiunta Analytics&#10;import { getAnalytics, isSupported, logEvent, type Analytics } from 'firebase/analytics';&#10;&#10;// ATTENZIONE: Sostituisci questo oggetto con la configurazione del tuo progetto Firebase!&#10;const firebaseConfig = {&#10;  apiKey: &quot;AIzaSyDYlR9POLPSqn9yiQtu_WZa4rHOhbEsFDQ&quot;,&#10;  authDomain: &quot;curiow-432ed.firebaseapp.com&quot;,&#10;  projectId: &quot;curiow-432ed&quot;,&#10;  storageBucket: &quot;curiow-432ed.firebasestorage.app&quot;,&#10;  messagingSenderId: &quot;115136967854&quot;,&#10;  appId: &quot;1:115136967854:web:24228c1379993b8c61e93f&quot;,&#10;  measurementId: &quot;G-LF4YY7HHR3&quot;&#10;};&#10;&#10;// Inizializza Firebase&#10;const app = initializeApp(firebaseConfig);&#10;&#10;// Inizializzazione lazy di Analytics (solo browser + supporto)&#10;let analyticsInstance: Analytics | null = null;&#10;if (typeof window !== 'undefined') {&#10;  isSupported().then(supported =&gt; {&#10;    if (supported) {&#10;      analyticsInstance = getAnalytics(app);&#10;    }&#10;  }).catch(() =&gt; {/* ignore */});&#10;}&#10;&#10;export const getAnalyticsInstance = () =&gt; analyticsInstance;&#10;export const trackEvent = (eventName: string, params?: Record&lt;string, any&gt;) =&gt; {&#10;  if (!analyticsInstance) return;&#10;  try { logEvent(analyticsInstance, eventName as any, params); } catch { /* noop */ }&#10;};&#10;&#10;// Configura Google Auth Provider&#10;export const googleProvider = new GoogleAuthProvider();&#10;googleProvider.setCustomParameters({&#10;  prompt: 'select_account'&#10;});&#10;&#10;// Esporta i servizi che ti servono&#10;export const auth = getAuth(app);&#10;export const db = getFirestore(app);&#10;&#10;export const getIdToken = async (): Promise&lt;string | null&gt; =&gt; {&#10;    const user = auth.currentUser;&#10;    if (user) {&#10;        return await user.getIdToken();&#10;    }&#10;    return null;&#10;    };&#10;&#10;export { firebaseConfig };" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>