<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/firestore.rules">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/firestore.rules" />
              <option name="originalContent" value="rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;&#10;    // Helper function per verificare se l'utente è autenticato&#10;    function isAuthenticated() {&#10;      return request.auth != null;&#10;    }&#10;&#10;    // Helper function per ottenere i dati dell'utente&#10;    function getUserData() {&#10;      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;&#10;    }&#10;&#10;    // Helper function per verificare il ruolo&#10;    function hasRole(role) {&#10;      return isAuthenticated() &amp;&amp; getUserData().role == role;&#10;    }&#10;&#10;    // Helper function per verificare se è admin o moderatore&#10;    function isModerator() {&#10;      return hasRole('admin') || hasRole('moderator');&#10;    }&#10;&#10;    // Helper function per verificare permessi specifici&#10;    function hasPermission(permission) {&#10;      return isAuthenticated() &amp;&amp; getUserData().permissions[permission] == true;&#10;    }&#10;&#10;    // --- REGOLE PER GLI UTENTI ---&#10;    match /users/{userId} {&#10;      // Gli utenti possono leggere solo il proprio profilo&#10;      allow read: if isAuthenticated() &amp;&amp; request.auth.uid == userId;&#10;&#10;      // Solo gli admin possono leggere tutti i profili utente&#10;      allow read: if hasRole('admin');&#10;&#10;      // Gli utenti possono aggiornare solo il proprio profilo (esclusi ruolo e permessi)&#10;      allow update: if isAuthenticated() &amp;&amp;&#10;                    request.auth.uid == userId &amp;&amp;&#10;                    !('role' in request.resource.data) &amp;&amp;&#10;                    !('permissions' in request.resource.data);&#10;&#10;      // Solo gli admin possono modificare ruoli e permessi&#10;      allow update: if hasRole('admin');&#10;&#10;      // Gli utenti possono creare il proprio profilo durante la registrazione&#10;      allow create: if isAuthenticated() &amp;&amp; request.auth.uid == userId;&#10;&#10;      // Solo gli admin possono eliminare utenti&#10;      allow delete: if hasRole('admin');&#10;    }&#10;&#10;    // --- REGOLE PER I CANALI ---&#10;    match /channels/{channelId} {&#10;      // Tutti possono leggere i canali&#10;      allow read: if true;&#10;&#10;      // Solo admin e moderatori possono creare/modificare canali&#10;      allow write: if isModerator();&#10;    }&#10;&#10;    // --- REGOLE PER LE GEMME ---&#10;    match /gems/{gemId} {&#10;      // Tutti possono leggere le gemme&#10;      allow read: if true;&#10;&#10;      // Solo utenti con permesso possono creare gemme&#10;      allow create: if hasPermission('canCreateGems');&#10;&#10;      // Solo utenti con permesso possono modificare gemme&#10;      allow update: if hasPermission('canEditGems');&#10;&#10;      // Solo utenti con permesso possono eliminare gemme&#10;      allow delete: if hasPermission('canDeleteGems');&#10;&#10;      // --- REGOLE PER LE DOMANDE DEGLI UTENTI ---&#10;      match /userQuestions/{questionId} {&#10;        // Tutti gli utenti autenticati possono leggere le domande&#10;        allow read: if isAuthenticated();&#10;&#10;        // Tutti gli utenti autenticati possono creare domande&#10;        allow create: if isAuthenticated();&#10;&#10;        // Solo moderatori e admin possono modificare/eliminare domande&#10;        allow update, delete: if isModerator();&#10;      }&#10;    }&#10;&#10;    // --- REGOLE PER COLLEZIONI AMMINISTRATIVE ---&#10;    match /admin/{document=**} {&#10;      allow read, write: if hasRole('admin');&#10;    }&#10;&#10;    // --- REGOLE PER ANALYTICS/LOGS ---&#10;    match /analytics/{document=**} {&#10;      allow read: if isModerator();&#10;      allow write: if isAuthenticated(); // Per tracciare le interazioni utente&#10;    }&#10;" />
              <option name="updatedContent" value="rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;&#10;    // Helper function per verificare se l'utente è autenticato&#10;    function isAuthenticated() {&#10;      return request.auth != null;&#10;    }&#10;&#10;    // Helper function per ottenere i dati dell'utente&#10;    function getUserData() {&#10;      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;&#10;    }&#10;&#10;    // Helper function per verificare il ruolo&#10;    function hasRole(role) {&#10;      return isAuthenticated() &amp;&amp; getUserData().role == role;&#10;    }&#10;&#10;    // Helper function per verificare se è admin o moderatore&#10;    function isModerator() {&#10;      return hasRole('admin') || hasRole('moderator');&#10;    }&#10;&#10;    // Helper function per verificare permessi specifici&#10;    function hasPermission(permission) {&#10;      return isAuthenticated() &amp;&amp; getUserData().permissions[permission] == true;&#10;    }&#10;&#10;    // --- REGOLE PER GLI UTENTI ---&#10;    match /users/{userId} {&#10;      // Gli utenti possono leggere solo il proprio profilo&#10;      allow read: if isAuthenticated() &amp;&amp; request.auth.uid == userId;&#10;&#10;      // Solo gli admin possono leggere tutti i profili utente&#10;      allow read: if hasRole('admin');&#10;&#10;      // Gli utenti possono aggiornare solo il proprio profilo (esclusi ruolo e permessi)&#10;      allow update: if isAuthenticated() &amp;&amp;&#10;                    request.auth.uid == userId &amp;&amp;&#10;                    !('role' in request.resource.data) &amp;&amp;&#10;                    !('permissions' in request.resource.data);&#10;&#10;      // Solo gli admin possono modificare ruoli e permessi&#10;      allow update: if hasRole('admin');&#10;&#10;      // Gli utenti possono creare il proprio profilo durante la registrazione&#10;      allow create: if isAuthenticated() &amp;&amp; request.auth.uid == userId;&#10;&#10;      // Solo gli admin possono eliminare utenti&#10;      allow delete: if hasRole('admin');&#10;    }&#10;&#10;    // --- REGOLE PER I CANALI ---&#10;    match /channels/{channelId} {&#10;      // Tutti possono leggere i canali&#10;      allow read: if true;&#10;&#10;      // Solo admin e moderatori possono creare/modificare canali&#10;      allow write: if isModerator();&#10;    }&#10;&#10;    // --- REGOLE PER LE GEMME ---&#10;    match /gems/{gemId} {&#10;      // Tutti possono leggere le gemme&#10;      allow read: if true;&#10;&#10;      // Solo utenti con permesso possono creare gemme&#10;      allow create: if hasPermission('canCreateGems');&#10;&#10;      // Solo utenti con permesso possono modificare gemme&#10;      allow update: if hasPermission('canEditGems');&#10;&#10;      // Solo utenti con permesso possono eliminare gemme&#10;      allow delete: if hasPermission('canDeleteGems');&#10;&#10;      // --- REGOLE PER LE DOMANDE DEGLI UTENTI ---&#10;      match /userQuestions/{questionId} {&#10;        // Tutti gli utenti autenticati possono leggere le domande&#10;        allow read: if isAuthenticated();&#10;&#10;        // Tutti gli utenti autenticati possono creare domande&#10;        allow create: if isAuthenticated();&#10;&#10;        // Solo moderatori e admin possono modificare/eliminare domande&#10;        allow update, delete: if isModerator();&#10;      }&#10;    }&#10;&#10;    // --- REGOLE PER COLLEZIONI AMMINISTRATIVE ---&#10;    match /admin/{document=**} {&#10;      allow read, write: if hasRole('admin');&#10;    }&#10;&#10;    // --- REGOLE PER ANALYTICS/LOGS ---&#10;    match /analytics/{document=**} {&#10;      allow read: if isModerator();&#10;      allow write: if isAuthenticated(); // Per tracciare le interazioni utente&#10;    }&#10;&#10;    // --- REGOLE PER GLI ARGOMENTI/TOPIC SUGGESTIONS ---&#10;    match /topicSuggestions/{topicId} {&#10;      // Tutti gli admin possono leggere gli argomenti&#10;      allow read: if hasRole('admin');&#10;      &#10;      // Solo gli admin possono creare argomenti&#10;      allow create: if hasRole('admin');&#10;      &#10;      // Solo gli admin possono modificare argomenti&#10;      allow update: if hasRole('admin');&#10;      &#10;      // Solo gli admin possono eliminare argomenti&#10;      allow delete: if hasRole('admin');&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;curiow&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;&#10;  &quot;dependencies&quot;: {&#10;    &quot;@google/genai&quot;: &quot;^1.13.0&quot;,&#10;    &quot;firebase&quot;: &quot;^12.1.0&quot;,&#10;    &quot;react&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.1.1&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^22.14.0&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.2&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.2&quot;,&#10;    &quot;vite&quot;: &quot;^6.2.0&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;curiow&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;,&#10;    &quot;seed&quot;: &quot;node --loader ts-node/esm seed.ts&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@google/genai&quot;: &quot;^1.13.0&quot;,&#10;    &quot;firebase&quot;: &quot;^12.1.0&quot;,&#10;    &quot;react&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.1.1&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^22.14.0&quot;,&#10;    &quot;ts-node&quot;: &quot;^10.9.2&quot;,&#10;    &quot;typescript&quot;: &quot;~5.8.2&quot;,&#10;    &quot;vite&quot;: &quot;^6.2.0&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useCallback, useMemo } from 'react';&#10;import { Gem, User, SavedList, Channel, Filter, Topic } from './types';&#10;import { TOPICS } from './constants';&#10;import { auth } from './services/firebase';&#10;import { onAuthStateChanged, User as FirebaseUser, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';&#10;import * as firestoreService from './services/firestoreService';&#10;import Header from './components/Header';&#10;import GemCard from './components/GemCard';&#10;import GemDetailView from './components/GemDetailView';&#10;import LoginModal from './components/LoginModal';&#10;import SavedView from './components/SavedView';&#10;import ProfileView from './components/ProfileView';&#10;import AdminDashboard from './components/admin/AdminDashboard';&#10;import { SparklesIcon } from './components/icons';&#10;import SaveToListModal from './components/SaveToListModal';&#10;&#10;type View = 'feed' | 'detail' | 'saved' | 'profile' | 'dashboard';&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [gems, setGems] = useState&lt;Gem[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;Channel[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  &#10;  const [firebaseUser, setFirebaseUser] = useState&lt;FirebaseUser | null&gt;(null);&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [savedLists, setSavedLists] = useState&lt;SavedList[]&gt;([]);&#10;  &#10;  const [filter, setFilter] = useState&lt;Filter&gt;({ type: 'all' });&#10;  const [showLoginModal, setShowLoginModal] = useState(false);&#10;  const [currentView, setCurrentView] = useState&lt;View&gt;('feed');&#10;  const [selectedGemId, setSelectedGemId] = useState&lt;string | null&gt;(null);&#10;  &#10;  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);&#10;  const [gemToSaveId, setGemToSaveId] = useState&lt;string | null&gt;(null);&#10;&#10;  // Fetch initial static-like data&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;        setIsLoading(true);&#10;        const [fetchedGems, fetchedChannels] = await Promise.all([&#10;            firestoreService.fetchGems(),&#10;            firestoreService.fetchChannels(),&#10;        ]);&#10;        setGems(fetchedGems);&#10;        setChannels(fetchedChannels);&#10;        setIsLoading(false);&#10;    };&#10;    fetchInitialData();&#10;  }, []);&#10;&#10;  // Auth state listener&#10;  useEffect(() =&gt; {&#10;      const unsubscribe = onAuthStateChanged(auth, async (currentUser) =&gt; {&#10;          setFirebaseUser(currentUser);&#10;          if (currentUser) {&#10;              let userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              // Se il profilo non esiste, creane uno nuovo. Utile per utenti già esistenti in Auth ma non in Firestore.&#10;              if (!userProfile) {&#10;                  console.log(`Creating new profile for user ${currentUser.uid}`);&#10;                  const email = currentUser.email || 'no-email@example.com';&#10;                  const [firstName, lastName] = email.split('@')[0].split('.') || [email, ''];&#10;                  await firestoreService.createUserProfile(currentUser.uid, email, firstName, lastName || '');&#10;                  userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              }&#10;&#10;              const userLists = await firestoreService.fetchUserSavedLists(currentUser.uid);&#10;              setUser(userProfile);&#10;              setSavedLists(userLists);&#10;              setShowLoginModal(false);&#10;          } else {&#10;              // User is signed out&#10;              setUser(null);&#10;              setSavedLists([]);&#10;              setFilter({ type: 'all' });&#10;              setCurrentView('feed');&#10;          }&#10;      });&#10;      return () =&gt; unsubscribe();&#10;  }, []);&#10;  &#10;  // Listener for user questions on selected gem&#10;  useEffect(() =&gt; {&#10;    if (!selectedGemId) return;&#10;&#10;    const unsubscribe = firestoreService.listenToUserQuestions(selectedGemId, (questions) =&gt; {&#10;        setGems(prevGems =&gt; prevGems.map(gem =&gt; &#10;            gem.id === selectedGemId ? { ...gem, userQuestions: questions } : gem&#10;        ));&#10;    });&#10;&#10;    return () =&gt; unsubscribe();&#10;  }, [selectedGemId]);&#10;&#10;  const handleSignUpAttempt = async (email: string, pass: string, firstName: string, lastName: string) =&gt; {&#10;      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);&#10;      await firestoreService.createUserProfile(userCredential.user.uid, email, firstName, lastName);&#10;  };&#10;  &#10;  const handleLoginAttempt = async (email: string, pass: string) =&gt; {&#10;      await signInWithEmailAndPassword(auth, email, pass);&#10;  };&#10;&#10;  const handleLogout = () =&gt; {&#10;    signOut(auth);&#10;  };&#10;&#10;  const handleNavigate = (view: View) =&gt; {&#10;    console.log('Navigating to:', view); // Debug log&#10;    window.scrollTo(0, 0);&#10;    setCurrentView(view);&#10;  };&#10;  &#10;  const handleLoginRequest = () =&gt; {&#10;    if(!firebaseUser) setShowLoginModal(true);&#10;  }&#10;&#10;  const allFavoriteIds = useMemo(() =&gt; {&#10;    return Array.from(new Set(savedLists.flatMap(list =&gt; list.gemIds)));&#10;  }, [savedLists]);&#10;&#10;  const handleSaveRequest = (gemId: string) =&gt; {&#10;    setGemToSaveId(gemId);&#10;    setIsSaveModalOpen(true);&#10;  };&#10;&#10;  const updateSavedLists = async (newLists: SavedList[]) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setSavedLists(newLists);&#10;      await firestoreService.updateUserSavedLists(firebaseUser.uid, newLists);&#10;  }&#10;&#10;  const handleSaveToList = (listId: string) =&gt; {&#10;    if (!gemToSaveId) return;&#10;    const newLists = savedLists.map(list =&gt; {&#10;        if (list.id === listId) {&#10;            if (!list.gemIds.includes(gemToSaveId)) {&#10;                return { ...list, gemIds: [...list.gemIds, gemToSaveId] };&#10;            }&#10;        }&#10;        return list;&#10;    });&#10;    updateSavedLists(newLists);&#10;  };&#10;  &#10;  const handleCreateListAndSave = (listName: string) =&gt; {&#10;      if(!gemToSaveId) return;&#10;      const newList: SavedList = {&#10;          id: self.crypto.randomUUID(),&#10;          name: listName,&#10;          gemIds: [gemToSaveId]&#10;      };&#10;      updateSavedLists([...savedLists, newList]);&#10;  }&#10;  &#10;  const handleToggleFavorite = (gemId: string) =&gt; {&#10;    const isFav = allFavoriteIds.includes(gemId);&#10;    let newLists;&#10;    if(isFav) {&#10;        newLists = savedLists.map(list =&gt; ({&#10;            ...list,&#10;            gemIds: list.gemIds.filter(id =&gt; id !== gemId)&#10;        }));&#10;    } else {&#10;        newLists = savedLists.map(list =&gt; &#10;            list.id === 'default' ? { ...list, gemIds: [...list.gemIds, gemId]} : list&#10;        );&#10;    }&#10;    updateSavedLists(newLists);&#10;  };&#10;  &#10;  const handleAddUserQuestion = async (gemId: string, question: string) =&gt; {&#10;      await firestoreService.addUserQuestion(gemId, question);&#10;  };&#10;&#10;  const handleSelectGem = (gemId: string) =&gt; {&#10;      setSelectedGemId(gemId);&#10;      handleNavigate('detail');&#10;  };&#10;  &#10;  const handleBackToFeed = () =&gt; {&#10;      setSelectedGemId(null);&#10;      handleNavigate('feed');&#10;  };&#10;  &#10;  const handleSelectTag = (tag: string) =&gt; {&#10;      setFilter({ type: 'tag', value: tag });&#10;      handleBackToFeed();&#10;  };&#10;  &#10;  const handleUpdateUser = async (updatedUser: User) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUser(updatedUser);&#10;      await firestoreService.updateUserProfile(firebaseUser.uid, {&#10;          firstName: updatedUser.firstName,&#10;          lastName: updatedUser.lastName,&#10;      });&#10;      alert(&quot;Profilo aggiornato!&quot;);&#10;  }&#10;&#10;  const filteredGems = gems.filter(gem =&gt; {&#10;      if (!gem.tags) return false; // Safety check&#10;      switch (filter.type) {&#10;        case 'all':&#10;            return true;&#10;        case 'favorites':&#10;            return firebaseUser ? allFavoriteIds.includes(gem.id) : false;&#10;        case 'topic':&#10;            return gem.topic === filter.value;&#10;        case 'channel':&#10;            const channel = channels.find(c =&gt; c.id === filter.value);&#10;            if (channel) {&#10;                return gem.tags.some(tag =&gt; channel.filterTags.includes(tag.toLowerCase()));&#10;            }&#10;            return false;&#10;        case 'tag':&#10;            return gem.tags.map(t =&gt; t.toLowerCase()).includes(filter.value.toLowerCase());&#10;        default:&#10;            return true;&#10;      }&#10;  });&#10;  &#10;  const selectedGem = gems.find(gem =&gt; gem.id === selectedGemId);&#10;&#10;  const renderFeed = () =&gt; (&#10;    &lt;&gt;&#10;        &lt;Header&#10;            isLoggedIn={!!firebaseUser}&#10;            onLogin={() =&gt; setShowLoginModal(true)}&#10;            onLogout={handleLogout}&#10;            selectedFilter={filter}&#10;            onSelectFilter={setFilter}&#10;            onNavigate={handleNavigate}&#10;            channels={channels}&#10;        /&gt;&#10;        &lt;main className=&quot;max-w-xl mx-auto py-8 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {isLoading &amp;&amp; gems.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center text-center text-slate-500 dark:text-slate-400 pt-20&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-16 h-16 animate-pulse text-indigo-400&quot;/&gt;&#10;            &lt;p className=&quot;mt-4 text-lg font-semibold&quot;&gt;Stiamo preparando Curiow per te...&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm&quot;&gt;Un momento, stiamo cercando spunti interessanti.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {filteredGems.length &gt; 0 ? (&#10;                filteredGems.map(gem =&gt; (&#10;                    &lt;GemCard&#10;                        key={gem.id}&#10;                        gem={gem}&#10;                        isLoggedIn={!!firebaseUser}&#10;                        isFavorite={allFavoriteIds.includes(gem.id)}&#10;                        onSaveRequest={handleSaveRequest}&#10;                        onSelect={handleSelectGem}&#10;                        onLoginRequest={handleLoginRequest}&#10;                    /&gt;&#10;                ))&#10;            ) : (&#10;                &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma trovata&lt;/h3&gt;&#10;                    &lt;p className=&quot;mt-2&quot;&gt;Prova a selezionare un'altra categoria o filtro.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  const renderContent = () =&gt; {&#10;    switch (currentView) {&#10;        case 'detail':&#10;            return selectedGem ? (&#10;                &lt;GemDetailView&#10;                    gem={selectedGem}&#10;                    isFavorite={allFavoriteIds.includes(selectedGem.id)}&#10;                    onBack={handleBackToFeed}&#10;                    onSaveRequest={handleSaveRequest}&#10;                    onAddUserQuestion={handleAddUserQuestion}&#10;                    onTagSelect={handleSelectTag}&#10;                /&gt;&#10;            ) : renderFeed(); // Fallback to feed if no gem selected&#10;        case 'saved':&#10;            return firebaseUser ? &lt;SavedView &#10;                        allGems={gems} &#10;                        allFavoriteIds={allFavoriteIds}&#10;                        savedLists={savedLists} &#10;                        onUpdateLists={updateSavedLists}&#10;                        onSelectGem={handleSelectGem}&#10;                        onToggleFavorite={handleToggleFavorite}&#10;                        onLoginRequest={handleLoginRequest}&#10;                        onBack={() =&gt; handleNavigate('feed')}&#10;                    /&gt; : renderFeed();&#10;        case 'profile':&#10;            return firebaseUser &amp;&amp; user ? &lt;ProfileView user={user} onUpdateUser={handleUpdateUser} onBack={() =&gt; handleNavigate('feed')} onNavigate={handleNavigate} /&gt; : renderFeed();&#10;        case 'dashboard':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;AdminDashboard&#10;                    currentUser={{ ...user, id: firebaseUser.uid }}&#10;                    onClose={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'feed':&#10;        default:&#10;            return renderFeed();&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;        {renderContent()}&#10;        {showLoginModal &amp;&amp; &lt;LoginModal &#10;            onLoginAttempt={handleLoginAttempt}&#10;            onSignUpAttempt={handleSignUpAttempt}&#10;            onCancel={() =&gt; setShowLoginModal(false)} &#10;        /&gt;}&#10;        {isSaveModalOpen &amp;&amp; gemToSaveId &amp;&amp; (&#10;            &lt;SaveToListModal&#10;                isOpen={isSaveModalOpen}&#10;                onClose={() =&gt; setIsSaveModalOpen(false)}&#10;                lists={savedLists.filter(l =&gt; l.id !== 'default')}&#10;                gemId={gemToSaveId}&#10;                onSaveToList={handleSaveToList}&#10;                onCreateAndSave={handleCreateListAndSave}&#10;                onToggleDefaultFavorite={handleToggleFavorite}&#10;                isSavedToDefault={savedLists.find(l=&gt;l.id==='default')?.gemIds.includes(gemToSaveId) ?? false}&#10;            /&gt;&#10;        )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default App;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useCallback, useMemo } from 'react';&#10;import { Gem, User, SavedList, Channel, Filter, Topic } from './types';&#10;import { TOPICS } from './constants';&#10;import { auth } from './services/firebase';&#10;import { onAuthStateChanged, User as FirebaseUser, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';&#10;import * as firestoreService from './services/firestoreService';&#10;import Header from './components/Header';&#10;import GemCard from './components/GemCard';&#10;import GemDetailView from './components/GemDetailView';&#10;import LoginModal from './components/LoginModal';&#10;import SavedView from './components/SavedView';&#10;import ProfileView from './components/ProfileView';&#10;import AdminDashboard from './components/admin/AdminDashboard';&#10;import TopicManagement from './components/admin/TopicManagement';&#10;import { SparklesIcon } from './components/icons';&#10;import SaveToListModal from './components/SaveToListModal';&#10;&#10;type View = 'feed' | 'detail' | 'saved' | 'profile' | 'dashboard' | 'topics';&#10;&#10;const App: React.FC = () =&gt; {&#10;  const [gems, setGems] = useState&lt;Gem[]&gt;([]);&#10;  const [channels, setChannels] = useState&lt;Channel[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  &#10;  const [firebaseUser, setFirebaseUser] = useState&lt;FirebaseUser | null&gt;(null);&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [savedLists, setSavedLists] = useState&lt;SavedList[]&gt;([]);&#10;  &#10;  const [filter, setFilter] = useState&lt;Filter&gt;({ type: 'all' });&#10;  const [showLoginModal, setShowLoginModal] = useState(false);&#10;  const [currentView, setCurrentView] = useState&lt;View&gt;('feed');&#10;  const [selectedGemId, setSelectedGemId] = useState&lt;string | null&gt;(null);&#10;  &#10;  const [isSaveModalOpen, setIsSaveModalOpen] = useState(false);&#10;  const [gemToSaveId, setGemToSaveId] = useState&lt;string | null&gt;(null);&#10;&#10;  // Fetch initial static-like data&#10;  useEffect(() =&gt; {&#10;    const fetchInitialData = async () =&gt; {&#10;        setIsLoading(true);&#10;        const [fetchedGems, fetchedChannels] = await Promise.all([&#10;            firestoreService.fetchGems(),&#10;            firestoreService.fetchChannels(),&#10;        ]);&#10;        setGems(fetchedGems);&#10;        setChannels(fetchedChannels);&#10;        setIsLoading(false);&#10;    };&#10;    fetchInitialData();&#10;  }, []);&#10;&#10;  // Auth state listener&#10;  useEffect(() =&gt; {&#10;      const unsubscribe = onAuthStateChanged(auth, async (currentUser) =&gt; {&#10;          setFirebaseUser(currentUser);&#10;          if (currentUser) {&#10;              let userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              // Se il profilo non esiste, creane uno nuovo. Utile per utenti già esistenti in Auth ma non in Firestore.&#10;              if (!userProfile) {&#10;                  console.log(`Creating new profile for user ${currentUser.uid}`);&#10;                  const email = currentUser.email || 'no-email@example.com';&#10;                  const [firstName, lastName] = email.split('@')[0].split('.') || [email, ''];&#10;                  await firestoreService.createUserProfile(currentUser.uid, email, firstName, lastName || '');&#10;                  userProfile = await firestoreService.fetchUserProfile(currentUser.uid);&#10;              }&#10;&#10;              const userLists = await firestoreService.fetchUserSavedLists(currentUser.uid);&#10;              setUser(userProfile);&#10;              setSavedLists(userLists);&#10;              setShowLoginModal(false);&#10;          } else {&#10;              // User is signed out&#10;              setUser(null);&#10;              setSavedLists([]);&#10;              setFilter({ type: 'all' });&#10;              setCurrentView('feed');&#10;          }&#10;      });&#10;      return () =&gt; unsubscribe();&#10;  }, []);&#10;  &#10;  // Listener for user questions on selected gem&#10;  useEffect(() =&gt; {&#10;    if (!selectedGemId) return;&#10;&#10;    const unsubscribe = firestoreService.listenToUserQuestions(selectedGemId, (questions) =&gt; {&#10;        setGems(prevGems =&gt; prevGems.map(gem =&gt; &#10;            gem.id === selectedGemId ? { ...gem, userQuestions: questions } : gem&#10;        ));&#10;    });&#10;&#10;    return () =&gt; unsubscribe();&#10;  }, [selectedGemId]);&#10;&#10;  const handleSignUpAttempt = async (email: string, pass: string, firstName: string, lastName: string) =&gt; {&#10;      const userCredential = await createUserWithEmailAndPassword(auth, email, pass);&#10;      await firestoreService.createUserProfile(userCredential.user.uid, email, firstName, lastName);&#10;  };&#10;  &#10;  const handleLoginAttempt = async (email: string, pass: string) =&gt; {&#10;      await signInWithEmailAndPassword(auth, email, pass);&#10;  };&#10;&#10;  const handleLogout = () =&gt; {&#10;    signOut(auth);&#10;  };&#10;&#10;  const handleNavigate = (view: View) =&gt; {&#10;    console.log('Navigating to:', view); // Debug log&#10;    window.scrollTo(0, 0);&#10;    setCurrentView(view);&#10;  };&#10;  &#10;  const handleLoginRequest = () =&gt; {&#10;    if(!firebaseUser) setShowLoginModal(true);&#10;  }&#10;&#10;  const allFavoriteIds = useMemo(() =&gt; {&#10;    return Array.from(new Set(savedLists.flatMap(list =&gt; list.gemIds)));&#10;  }, [savedLists]);&#10;&#10;  const handleSaveRequest = (gemId: string) =&gt; {&#10;    setGemToSaveId(gemId);&#10;    setIsSaveModalOpen(true);&#10;  };&#10;&#10;  const updateSavedLists = async (newLists: SavedList[]) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setSavedLists(newLists);&#10;      await firestoreService.updateUserSavedLists(firebaseUser.uid, newLists);&#10;  }&#10;&#10;  const handleSaveToList = (listId: string) =&gt; {&#10;    if (!gemToSaveId) return;&#10;    const newLists = savedLists.map(list =&gt; {&#10;        if (list.id === listId) {&#10;            if (!list.gemIds.includes(gemToSaveId)) {&#10;                return { ...list, gemIds: [...list.gemIds, gemToSaveId] };&#10;            }&#10;        }&#10;        return list;&#10;    });&#10;    updateSavedLists(newLists);&#10;  };&#10;  &#10;  const handleCreateListAndSave = (listName: string) =&gt; {&#10;      if(!gemToSaveId) return;&#10;      const newList: SavedList = {&#10;          id: self.crypto.randomUUID(),&#10;          name: listName,&#10;          gemIds: [gemToSaveId]&#10;      };&#10;      updateSavedLists([...savedLists, newList]);&#10;  }&#10;  &#10;  const handleToggleFavorite = (gemId: string) =&gt; {&#10;    const isFav = allFavoriteIds.includes(gemId);&#10;    let newLists;&#10;    if(isFav) {&#10;        newLists = savedLists.map(list =&gt; ({&#10;            ...list,&#10;            gemIds: list.gemIds.filter(id =&gt; id !== gemId)&#10;        }));&#10;    } else {&#10;        newLists = savedLists.map(list =&gt; &#10;            list.id === 'default' ? { ...list, gemIds: [...list.gemIds, gemId]} : list&#10;        );&#10;    }&#10;    updateSavedLists(newLists);&#10;  };&#10;  &#10;  const handleAddUserQuestion = async (gemId: string, question: string) =&gt; {&#10;      await firestoreService.addUserQuestion(gemId, question);&#10;  };&#10;&#10;  const handleSelectGem = (gemId: string) =&gt; {&#10;      setSelectedGemId(gemId);&#10;      handleNavigate('detail');&#10;  };&#10;  &#10;  const handleBackToFeed = () =&gt; {&#10;      setSelectedGemId(null);&#10;      handleNavigate('feed');&#10;  };&#10;  &#10;  const handleSelectTag = (tag: string) =&gt; {&#10;      setFilter({ type: 'tag', value: tag });&#10;      handleBackToFeed();&#10;  };&#10;  &#10;  const handleUpdateUser = async (updatedUser: User) =&gt; {&#10;      if (!firebaseUser) return;&#10;      setUser(updatedUser);&#10;      await firestoreService.updateUserProfile(firebaseUser.uid, {&#10;          firstName: updatedUser.firstName,&#10;          lastName: updatedUser.lastName,&#10;      });&#10;      alert(&quot;Profilo aggiornato!&quot;);&#10;  }&#10;&#10;  const filteredGems = gems.filter(gem =&gt; {&#10;      if (!gem.tags) return false; // Safety check&#10;      switch (filter.type) {&#10;        case 'all':&#10;            return true;&#10;        case 'favorites':&#10;            return firebaseUser ? allFavoriteIds.includes(gem.id) : false;&#10;        case 'topic':&#10;            return gem.topic === filter.value;&#10;        case 'channel':&#10;            const channel = channels.find(c =&gt; c.id === filter.value);&#10;            if (channel) {&#10;                return gem.tags.some(tag =&gt; channel.filterTags.includes(tag.toLowerCase()));&#10;            }&#10;            return false;&#10;        case 'tag':&#10;            return gem.tags.map(t =&gt; t.toLowerCase()).includes(filter.value.toLowerCase());&#10;        default:&#10;            return true;&#10;      }&#10;  });&#10;  &#10;  const selectedGem = gems.find(gem =&gt; gem.id === selectedGemId);&#10;&#10;  const renderFeed = () =&gt; (&#10;    &lt;&gt;&#10;        &lt;Header&#10;            isLoggedIn={!!firebaseUser}&#10;            onLogin={() =&gt; setShowLoginModal(true)}&#10;            onLogout={handleLogout}&#10;            selectedFilter={filter}&#10;            onSelectFilter={setFilter}&#10;            onNavigate={handleNavigate}&#10;            channels={channels}&#10;        /&gt;&#10;        &lt;main className=&quot;max-w-xl mx-auto py-8 px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        {isLoading &amp;&amp; gems.length === 0 ? (&#10;          &lt;div className=&quot;flex flex-col items-center justify-center text-center text-slate-500 dark:text-slate-400 pt-20&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-16 h-16 animate-pulse text-indigo-400&quot;/&gt;&#10;            &lt;p className=&quot;mt-4 text-lg font-semibold&quot;&gt;Stiamo preparando Curiow per te...&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm&quot;&gt;Un momento, stiamo cercando spunti interessanti.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-8&quot;&gt;&#10;            {filteredGems.length &gt; 0 ? (&#10;                filteredGems.map(gem =&gt; (&#10;                    &lt;GemCard&#10;                        key={gem.id}&#10;                        gem={gem}&#10;                        isLoggedIn={!!firebaseUser}&#10;                        isFavorite={allFavoriteIds.includes(gem.id)}&#10;                        onSaveRequest={handleSaveRequest}&#10;                        onSelect={handleSelectGem}&#10;                        onLoginRequest={handleLoginRequest}&#10;                    /&gt;&#10;                ))&#10;            ) : (&#10;                &lt;div className=&quot;text-center pt-20 text-slate-500 dark:text-slate-400&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold&quot;&gt;Nessuna gemma trovata&lt;/h3&gt;&#10;                    &lt;p className=&quot;mt-2&quot;&gt;Prova a selezionare un'altra categoria o filtro.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/&gt;&#10;  );&#10;&#10;  const renderContent = () =&gt; {&#10;    switch (currentView) {&#10;        case 'detail':&#10;            return selectedGem ? (&#10;                &lt;GemDetailView&#10;                    gem={selectedGem}&#10;                    isFavorite={allFavoriteIds.includes(selectedGem.id)}&#10;                    onBack={handleBackToFeed}&#10;                    onSaveRequest={handleSaveRequest}&#10;                    onAddUserQuestion={handleAddUserQuestion}&#10;                    onTagSelect={handleSelectTag}&#10;                /&gt;&#10;            ) : renderFeed(); // Fallback to feed if no gem selected&#10;        case 'saved':&#10;            return firebaseUser ? &lt;SavedView &#10;                        allGems={gems} &#10;                        allFavoriteIds={allFavoriteIds}&#10;                        savedLists={savedLists} &#10;                        onUpdateLists={updateSavedLists}&#10;                        onSelectGem={handleSelectGem}&#10;                        onToggleFavorite={handleToggleFavorite}&#10;                        onLoginRequest={handleLoginRequest}&#10;                        onBack={() =&gt; handleNavigate('feed')}&#10;                    /&gt; : renderFeed();&#10;        case 'profile':&#10;            return firebaseUser &amp;&amp; user ? &lt;ProfileView user={user} onUpdateUser={handleUpdateUser} onBack={() =&gt; handleNavigate('feed')} onNavigate={handleNavigate} /&gt; : renderFeed();&#10;        case 'dashboard':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;AdminDashboard&#10;                    currentUser={{ ...user, id: firebaseUser.uid }}&#10;                    onClose={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'topics':&#10;            return firebaseUser &amp;&amp; user ? (&#10;                &lt;TopicManagement &#10;                    currentUser={{ ...user, uid: firebaseUser.uid }}&#10;                    onBack={() =&gt; handleNavigate('feed')}&#10;                /&gt;&#10;            ) : renderFeed();&#10;        case 'feed':&#10;        default:&#10;            return renderFeed();&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;        {renderContent()}&#10;        {showLoginModal &amp;&amp; &lt;LoginModal &#10;            onLoginAttempt={handleLoginAttempt}&#10;            onSignUpAttempt={handleSignUpAttempt}&#10;            onCancel={() =&gt; setShowLoginModal(false)} &#10;        /&gt;}&#10;        {isSaveModalOpen &amp;&amp; gemToSaveId &amp;&amp; (&#10;            &lt;SaveToListModal&#10;                isOpen={isSaveModalOpen}&#10;                onClose={() =&gt; setIsSaveModalOpen(false)}&#10;                lists={savedLists.filter(l =&gt; l.id !== 'default')}&#10;                gemId={gemToSaveId}&#10;                onSaveToList={handleSaveToList}&#10;                onCreateAndSave={handleCreateListAndSave}&#10;                onToggleDefaultFavorite={handleToggleFavorite}&#10;                isSavedToDefault={savedLists.find(l=&gt;l.id==='default')?.gemIds.includes(gemToSaveId) ?? false}&#10;            /&gt;&#10;        )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { TOPICS } from '../constants';&#10;import { Topic, Channel, Filter } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, TagIcon } from './icons';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  selectedFilter: Filter;&#10;  onSelectFilter: (filter: Filter) =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard') =&gt; void;&#10;  channels: Channel[];&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({ isLoggedIn, onLogin, onLogout, selectedFilter, onSelectFilter, onNavigate, channels }) =&gt; {&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;    &#10;    if (selectedFilter.type === filter.type &amp;&amp; ('value' in selectedFilter &amp;&amp; 'value' in filter ? selectedFilter.value === filter.value : true)) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-md`;&#10;    }&#10;    return `${baseClass} bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700`;&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-30 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;      &lt;div className=&quot;max-w-5xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;          &lt;button onClick={() =&gt; { onSelectFilter({ type: 'all' }); onNavigate('feed'); }} className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-7 h-7 text-indigo-500&quot; /&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Curiow&lt;/h1&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 sm:space-x-4&quot;&gt;&#10;             {isLoggedIn &amp;&amp; (&#10;                 &lt;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; {&#10;                            console.log('Saved button clicked');&#10;                            onNavigate('saved');&#10;                        }}&#10;                        title=&quot;Liste Salvate&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={(e) =&gt; {&#10;                            e.preventDefault();&#10;                            e.stopPropagation();&#10;                            console.log('Dashboard button clicked!');&#10;                            console.log('onNavigate function:', onNavigate);&#10;                            onNavigate('dashboard');&#10;                        }}&#10;                        title=&quot;Profilo e Impostazioni&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;Cog6ToothIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                 &lt;/&gt;&#10;             )}&#10;             {isLoggedIn ? (&#10;                &lt;button&#10;                    onClick={onLogout}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Logout&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             ) : (&#10;                &lt;button&#10;                    onClick={onLogin}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Login&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;pb-4 overflow-x-auto&quot;&gt;&#10;            &lt;nav className=&quot;flex items-center space-x-2 sm:space-x-3&quot;&gt;&#10;                &lt;button onClick={() =&gt; onSelectFilter({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                {isLoggedIn &amp;&amp; &lt;button onClick={() =&gt; onSelectFilter({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;Preferiti&lt;/button&gt;}&#10;                {selectedFilter.type === 'tag' &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Tag&lt;/span&gt;&#10;                    &lt;button onClick={() =&gt; {}} className={getButtonClass(selectedFilter)}&gt;&#10;                      &lt;TagIcon className=&quot;w-3 h-3 inline-block mr-1.5&quot;/&gt;{selectedFilter.value}&#10;                    &lt;/button&gt;&#10;                  &lt;/&gt;&#10;                )}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Canali&lt;/span&gt;&#10;                {channels.map(channel =&gt; (&#10;                    &lt;button key={channel.id} onClick={() =&gt; onSelectFilter({type: 'channel', value: channel.id})} className={getButtonClass({type: 'channel', value: channel.id})}&gt;&#10;                        {channel.emoji} {channel.name}&#10;                    &lt;/button&gt;&#10;                ))}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Argomenti&lt;/span&gt;&#10;                {TOPICS.map(topic =&gt; (&#10;                    &lt;button key={topic} onClick={() =&gt; onSelectFilter({type: 'topic', value: topic})} className={getButtonClass({type: 'topic', value: topic})}&gt;&#10;                        {topic.split(' ')[0]}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Header;" />
              <option name="updatedContent" value="import React, { useState, useRef, useEffect } from 'react';&#10;import { TOPICS } from '../constants';&#10;import { Topic, Channel, Filter, User } from '../types';&#10;import { SparklesIcon, UserCircleIcon, BookmarkSquareIcon, Cog6ToothIcon, TagIcon, ChevronDownIcon } from './icons';&#10;import { useUserPermissions } from '../services/roleService';&#10;&#10;interface HeaderProps {&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  selectedFilter: Filter;&#10;  onSelectFilter: (filter: Filter) =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  channels: Channel[];&#10;}&#10;&#10;const Header: React.FC&lt;HeaderProps&gt; = ({ isLoggedIn, onLogin, onLogout, selectedFilter, onSelectFilter, onNavigate, channels }) =&gt; {&#10;  const getButtonClass = (filter: Filter) =&gt; {&#10;    const baseClass = 'px-3 py-1.5 text-sm font-semibold rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-50 dark:focus:ring-offset-slate-900 focus:ring-indigo-500 whitespace-nowrap';&#10;    &#10;    if (selectedFilter.type === filter.type &amp;&amp; ('value' in selectedFilter &amp;&amp; 'value' in filter ? selectedFilter.value === filter.value : true)) {&#10;      return `${baseClass} bg-indigo-600 text-white shadow-md`;&#10;    }&#10;    return `${baseClass} bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700`;&#10;  };&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-30 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;      &lt;div className=&quot;max-w-5xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between h-16&quot;&gt;&#10;          &lt;button onClick={() =&gt; { onSelectFilter({ type: 'all' }); onNavigate('feed'); }} className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;SparklesIcon className=&quot;w-7 h-7 text-indigo-500&quot; /&gt;&#10;            &lt;h1 className=&quot;text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Curiow&lt;/h1&gt;&#10;          &lt;/button&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2 sm:space-x-4&quot;&gt;&#10;             {isLoggedIn &amp;&amp; (&#10;                 &lt;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; {&#10;                            console.log('Saved button clicked');&#10;                            onNavigate('saved');&#10;                        }}&#10;                        title=&quot;Liste Salvate&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;BookmarkSquareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={(e) =&gt; {&#10;                            e.preventDefault();&#10;                            e.stopPropagation();&#10;                            onNavigate('profile');&#10;                        }}&#10;                        title=&quot;Profilo e Impostazioni&quot;&#10;                        className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;Cog6ToothIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                 &lt;/&gt;&#10;             )}&#10;             {isLoggedIn ? (&#10;                &lt;button&#10;                    onClick={onLogout}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Logout&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             ) : (&#10;                &lt;button&#10;                    onClick={onLogin}&#10;                    className=&quot;flex items-center space-x-2 text-sm font-medium text-slate-600 dark:text-slate-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors&quot;&#10;                &gt;&#10;                    &lt;UserCircleIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                    &lt;span className=&quot;hidden sm:inline&quot;&gt;Login&lt;/span&gt;&#10;                &lt;/button&gt;&#10;             )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;pb-4 overflow-x-auto&quot;&gt;&#10;            &lt;nav className=&quot;flex items-center space-x-2 sm:space-x-3&quot;&gt;&#10;                &lt;button onClick={() =&gt; onSelectFilter({ type: 'all' })} className={getButtonClass({ type: 'all' })}&gt;Tutti&lt;/button&gt;&#10;                {isLoggedIn &amp;&amp; &lt;button onClick={() =&gt; onSelectFilter({ type: 'favorites' })} className={getButtonClass({ type: 'favorites' })}&gt;Preferiti&lt;/button&gt;}&#10;                {selectedFilter.type === 'tag' &amp;&amp; (&#10;                  &lt;&gt;&#10;                    &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                    &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Tag&lt;/span&gt;&#10;                    &lt;button onClick={() =&gt; {}} className={getButtonClass(selectedFilter)}&gt;&#10;                      &lt;TagIcon className=&quot;w-3 h-3 inline-block mr-1.5&quot;/&gt;{selectedFilter.value}&#10;                    &lt;/button&gt;&#10;                  &lt;/&gt;&#10;                )}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Canali&lt;/span&gt;&#10;                {channels.map(channel =&gt; (&#10;                    &lt;button key={channel.id} onClick={() =&gt; onSelectFilter({type: 'channel', value: channel.id})} className={getButtonClass({type: 'channel', value: channel.id})}&gt;&#10;                        {channel.emoji} {channel.name}&#10;                    &lt;/button&gt;&#10;                ))}&#10;                &lt;div className=&quot;border-l border-slate-300 dark:border-slate-600 h-6 mx-2&quot;&gt;&lt;/div&gt;&#10;                &lt;span className=&quot;text-xs font-semibold text-slate-500 dark:text-slate-400 uppercase&quot;&gt;Argomenti&lt;/span&gt;&#10;                {TOPICS.map(topic =&gt; (&#10;                    &lt;button key={topic} onClick={() =&gt; onSelectFilter({type: 'topic', value: topic})} className={getButtonClass({type: 'topic', value: topic})}&gt;&#10;                        {topic.split(' ')[0]}&#10;                    &lt;/button&gt;&#10;                ))}&#10;            &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Header;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/ProfileView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/ProfileView.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { ChevronLeftIcon, UserCircleIcon, Cog6ToothIcon } from './icons';&#10;import { User } from '../types';&#10;&#10;interface ProfileViewProps {&#10;    user: User;&#10;    onUpdateUser: (user: User) =&gt; void;&#10;    onBack: () =&gt; void;&#10;}&#10;&#10;const ProfileView: React.FC&lt;ProfileViewProps&gt; = ({ user, onUpdateUser, onBack }) =&gt; {&#10;    const [formData, setFormData] = useState&lt;User&gt;(user);&#10;    const [isDirty, setIsDirty] = useState(false);&#10;&#10;    useEffect(() =&gt; {&#10;        setFormData(user);&#10;    }, [user]);&#10;&#10;    useEffect(() =&gt; {&#10;        setIsDirty(formData.firstName !== user.firstName || formData.lastName !== user.lastName);&#10;    }, [formData, user]);&#10;&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const { name, value } = e.target;&#10;        setFormData(prev =&gt; ({ ...prev, [name]: value }));&#10;    };&#10;&#10;    const handleSubmit = (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        onUpdateUser(formData);&#10;        setIsDirty(false);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;            &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;                &lt;button&#10;                    onClick={onBack}&#10;                    className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Profilo e Impostazioni&lt;/h1&gt;&#10;            &lt;/header&gt;&#10;&#10;            &lt;main className=&quot;p-5 sm:p-8&quot;&gt;&#10;                 &lt;form onSubmit={handleSubmit}&gt;&#10;                    &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#10;                        &lt;UserCircleIcon className=&quot;w-24 h-24 text-slate-400 dark:text-slate-500&quot; /&gt;&#10;                        &lt;h2 className=&quot;mt-4 text-2xl font-bold text-slate-900 dark:text-white&quot;&gt;{user.firstName} {user.lastName}&lt;/h2&gt;&#10;                        &lt;p className=&quot;mt-1 text-sm text-slate-500 dark:text-slate-400&quot;&gt;{user.email}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                        &lt;h3 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                            &lt;Cog6ToothIcon className=&quot;w-6 h-6 mr-2 text-slate-500&quot; /&gt;&#10;                            I tuoi dati&#10;                        &lt;/h3&gt;&#10;                        &lt;div className=&quot;mt-4 space-y-4&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-4&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label htmlFor=&quot;firstName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Nome&lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        name=&quot;firstName&quot;&#10;                                        id=&quot;firstName&quot;&#10;                                        value={formData.firstName}&#10;                                        onChange={handleChange}&#10;                                        className=&quot;mt-1 block w-full bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot;&#10;                                    /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label htmlFor=&quot;lastName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Cognome&lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        name=&quot;lastName&quot;&#10;                                        id=&quot;lastName&quot;&#10;                                        value={formData.lastName}&#10;                                        onChange={handleChange}&#10;                                        className=&quot;mt-1 block w-full bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot;&#10;                                    /&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                             &lt;div&gt;&#10;                                &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Email (Credenziale)&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;email&quot;&#10;                                    name=&quot;email&quot;&#10;                                    id=&quot;email&quot;&#10;                                    value={formData.email}&#10;                                    disabled&#10;                                    className=&quot;mt-1 block w-full bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 sm:text-sm text-slate-500 dark:text-slate-400 cursor-not-allowed&quot;&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                             &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Password&lt;/label&gt;&#10;                                &lt;button type=&quot;button&quot; className=&quot;mt-1 w-full sm:w-auto px-4 py-2 border border-slate-300 dark:border-slate-600 text-sm font-medium rounded-md text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-800 hover:bg-slate-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500&quot;&gt;&#10;                                    Cambia Password&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/section&gt;&#10;                     &lt;div className=&quot;mt-8 pt-5 border-t border-slate-200 dark:border-slate-700 flex justify-end&quot;&gt;&#10;                        &lt;button&#10;                            type=&quot;submit&quot;&#10;                            disabled={!isDirty}&#10;                            className=&quot;px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors&quot;&#10;                        &gt;&#10;                            Salva Modifiche&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default ProfileView;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { ChevronLeftIcon, UserCircleIcon, Cog6ToothIcon, ShieldCheckIcon } from './icons';&#10;import { User, UserRole } from '../types';&#10;&#10;interface ProfileViewProps {&#10;    user: User;&#10;    onUpdateUser: (user: User) =&gt; void;&#10;    onBack: () =&gt; void;&#10;    onNavigate: (view: 'dashboard') =&gt; void;&#10;}&#10;&#10;const ProfileView: React.FC&lt;ProfileViewProps&gt; = ({ user, onUpdateUser, onBack, onNavigate }) =&gt; {&#10;    const [formData, setFormData] = useState&lt;User&gt;(user);&#10;    const [isDirty, setIsDirty] = useState(false);&#10;&#10;    useEffect(() =&gt; {&#10;        setFormData(user);&#10;    }, [user]);&#10;&#10;    useEffect(() =&gt; {&#10;        setIsDirty(formData.firstName !== user.firstName || formData.lastName !== user.lastName);&#10;    }, [formData, user]);&#10;&#10;    const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;        const { name, value } = e.target;&#10;        setFormData(prev =&gt; ({ ...prev, [name]: value }));&#10;    };&#10;&#10;    const handleSubmit = (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        onUpdateUser(formData);&#10;        setIsDirty(false);&#10;    };&#10;&#10;    return (&#10;        &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;            &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;                &lt;button&#10;                    onClick={onBack}&#10;                    className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;                    aria-label=&quot;Torna indietro&quot;&#10;                &gt;&#10;                    &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Profilo e Impostazioni&lt;/h1&gt;&#10;            &lt;/header&gt;&#10;&#10;            &lt;main className=&quot;p-5 sm:p-8&quot;&gt;&#10;                 &lt;form onSubmit={handleSubmit}&gt;&#10;                    &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#10;                        &lt;UserCircleIcon className=&quot;w-24 h-24 text-slate-400 dark:text-slate-500&quot; /&gt;&#10;                        &lt;h2 className=&quot;mt-4 text-2xl font-bold text-slate-900 dark:text-white&quot;&gt;{user.firstName} {user.lastName}&lt;/h2&gt;&#10;                        &lt;p className=&quot;mt-1 text-sm text-slate-500 dark:text-slate-400&quot;&gt;{user.email}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                &#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                        &lt;h3 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                            &lt;Cog6ToothIcon className=&quot;w-6 h-6 mr-2 text-slate-500&quot; /&gt;&#10;                            I tuoi dati&#10;                        &lt;/h3&gt;&#10;                        &lt;div className=&quot;mt-4 space-y-4&quot;&gt;&#10;                            &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-4&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label htmlFor=&quot;firstName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Nome&lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        name=&quot;firstName&quot;&#10;                                        id=&quot;firstName&quot;&#10;                                        value={formData.firstName}&#10;                                        onChange={handleChange}&#10;                                        className=&quot;mt-1 block w-full bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot;&#10;                                    /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;label htmlFor=&quot;lastName&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Cognome&lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        name=&quot;lastName&quot;&#10;                                        id=&quot;lastName&quot;&#10;                                        value={formData.lastName}&#10;                                        onChange={handleChange}&#10;                                        className=&quot;mt-1 block w-full bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-slate-900 dark:text-white&quot;&#10;                                    /&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                             &lt;div&gt;&#10;                                &lt;label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Email (Credenziale)&lt;/label&gt;&#10;                                &lt;input&#10;                                    type=&quot;email&quot;&#10;                                    name=&quot;email&quot;&#10;                                    id=&quot;email&quot;&#10;                                    value={formData.email}&#10;                                    disabled&#10;                                    className=&quot;mt-1 block w-full bg-slate-100 dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm py-2 px-3 sm:text-sm text-slate-500 dark:text-slate-400 cursor-not-allowed&quot;&#10;                                /&gt;&#10;                            &lt;/div&gt;&#10;                             &lt;div&gt;&#10;                                &lt;label className=&quot;block text-sm font-medium text-slate-700 dark:text-slate-300&quot;&gt;Password&lt;/label&gt;&#10;                                &lt;button type=&quot;button&quot; className=&quot;mt-1 w-full sm:w-auto px-4 py-2 border border-slate-300 dark:border-slate-600 text-sm font-medium rounded-md text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-800 hover:bg-slate-50 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500&quot;&gt;&#10;                                    Cambia Password&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/section&gt;&#10;&#10;                    {user.role === UserRole.ADMIN &amp;&amp; (&#10;                        &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                            &lt;h3 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;ShieldCheckIcon className=&quot;w-6 h-6 mr-2 text-slate-500&quot; /&gt;&#10;                                Area Amministrazione&#10;                            &lt;/h3&gt;&#10;                            &lt;div className=&quot;mt-4&quot;&gt;&#10;                                &lt;button&#10;                                    type=&quot;button&quot;&#10;                                    onClick={() =&gt; onNavigate('dashboard')}&#10;                                    className=&quot;w-full sm:w-auto px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500&quot;&#10;                                &gt;&#10;                                    Vai alla Dashboard&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/section&gt;&#10;                    )}&#10;                     &lt;div className=&quot;mt-8 pt-5 border-t border-slate-200 dark:border-slate-700 flex justify-end&quot;&gt;&#10;                        &lt;button&#10;                            type=&quot;submit&quot;&#10;                            disabled={!isDirty}&#10;                            className=&quot;px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors&quot;&#10;                        &gt;&#10;                            Salva Modifiche&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/form&gt;&#10;            &lt;/main&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default ProfileView;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/TopicManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/TopicManagement.tsx" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { TopicSuggestion, UserRole } from '../../types';&#10;import {&#10;  fetchTopicSuggestions,&#10;  createTopicSuggestion,&#10;  updateTopicSuggestion,&#10;  deleteTopicSuggestion&#10;} from '../../services/firestoreService';&#10;import { useUserPermissions } from '../../services/roleService';&#10;import { ChevronLeftIcon } from '../icons';&#10;&#10;interface TopicManagementProps {&#10;  currentUser: { role: UserRole; permissions: any; uid?: string } | null;&#10;  onBack: () =&gt; void;&#10;}&#10;&#10;const TopicManagement: React.FC&lt;TopicManagementProps&gt; = ({ currentUser, onBack }) =&gt; {&#10;  const [topics, setTopics] = useState&lt;TopicSuggestion[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [showCreateModal, setShowCreateModal] = useState(false);&#10;  const [editingTopic, setEditingTopic] = useState&lt;TopicSuggestion | null&gt;(null);&#10;  const [statusFilter, setStatusFilter] = useState&lt;'all' | 'pending' | 'approved' | 'converted'&gt;('all');&#10;  const [searchTerm, setSearchTerm] = useState('');&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [topicsPerPage] = useState(8);&#10;&#10;  // Form state&#10;  const [formData, setFormData] = useState({&#10;    text: '',&#10;    tags: '',&#10;  });&#10;&#10;  const permissions = useUserPermissions(currentUser);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!permissions.isAdmin) {&#10;      return;&#10;    }&#10;    loadTopics();&#10;  }, [statusFilter, permissions.isAdmin]);&#10;&#10;  const loadTopics = async () =&gt; {&#10;    setLoading(true);&#10;    try {&#10;      const fetchedTopics = await fetchTopicSuggestions(&#10;        statusFilter === 'all' ? undefined : statusFilter&#10;      );&#10;      setTopics(fetchedTopics);&#10;    } catch (error) {&#10;      console.error('Errore nel caricamento argomenti:', error);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const handleCreate = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!currentUser?.uid) return;&#10;&#10;    try {&#10;      const tags = formData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag);&#10;      await createTopicSuggestion(formData.text, tags, currentUser.uid);&#10;      setFormData({ text: '', tags: '' });&#10;      setShowCreateModal(false);&#10;      await loadTopics();&#10;      alert('Argomento creato con successo!');&#10;    } catch (error) {&#10;      console.error('Errore nella creazione:', error);&#10;      alert('Errore nella creazione dell\'argomento');&#10;    }&#10;  };&#10;&#10;  const handleUpdate = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!editingTopic) return;&#10;&#10;    try {&#10;      const tags = formData.tags.split(',').map(tag =&gt; tag.trim()).filter(tag =&gt; tag);&#10;      await updateTopicSuggestion(editingTopic.id, {&#10;        text: formData.text,&#10;        tags,&#10;      });&#10;      setFormData({ text: '', tags: '' });&#10;      setEditingTopic(null);&#10;      await loadTopics();&#10;      alert('Argomento aggiornato con successo!');&#10;    } catch (error) {&#10;      console.error('Errore nell\'aggiornamento:', error);&#10;      alert('Errore nell\'aggiornamento dell\'argomento');&#10;    }&#10;  };&#10;&#10;  const handleStatusChange = async (topicId: string, newStatus: 'pending' | 'approved' | 'converted') =&gt; {&#10;    try {&#10;      await updateTopicSuggestion(topicId, { status: newStatus });&#10;      await loadTopics();&#10;      alert(`Status cambiato a ${newStatus} con successo!`);&#10;    } catch (error) {&#10;      console.error('Errore nel cambio status:', error);&#10;      alert('Errore nel cambio status');&#10;    }&#10;  };&#10;&#10;  const handleDelete = async (topicId: string) =&gt; {&#10;    if (window.confirm('Sei sicuro di voler eliminare questo argomento?')) {&#10;      try {&#10;        await deleteTopicSuggestion(topicId);&#10;        await loadTopics();&#10;        alert('Argomento eliminato con successo!');&#10;      } catch (error) {&#10;        console.error('Errore nell\'eliminazione:', error);&#10;        alert('Errore nell\'eliminazione dell\'argomento');&#10;      }&#10;    }&#10;  };&#10;&#10;  const openEditModal = (topic: TopicSuggestion) =&gt; {&#10;    setEditingTopic(topic);&#10;    setFormData({&#10;      text: topic.text,&#10;      tags: topic.tags.join(', '),&#10;    });&#10;  };&#10;&#10;  const resetForm = () =&gt; {&#10;    setFormData({ text: '', tags: '' });&#10;    setEditingTopic(null);&#10;    setShowCreateModal(false);&#10;  };&#10;&#10;  // Filtro per ricerca&#10;  const filteredTopics = topics.filter(topic =&gt;&#10;    topic.text.toLowerCase().includes(searchTerm.toLowerCase()) ||&#10;    topic.tags.some(tag =&gt; tag.toLowerCase().includes(searchTerm.toLowerCase()))&#10;  );&#10;&#10;  // Paginazione&#10;  const indexOfLastTopic = currentPage * topicsPerPage;&#10;  const indexOfFirstTopic = indexOfLastTopic - topicsPerPage;&#10;  const currentTopics = filteredTopics.slice(indexOfFirstTopic, indexOfLastTopic);&#10;  const totalPages = Math.ceil(filteredTopics.length / topicsPerPage);&#10;&#10;  const getStatusBadgeColor = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return 'bg-yellow-100 text-yellow-800';&#10;      case 'approved': return 'bg-green-100 text-green-800';&#10;      case 'converted': return 'bg-blue-100 text-blue-800';&#10;      default: return 'bg-gray-100 text-gray-800';&#10;    }&#10;  };&#10;&#10;  const getStatusEmoji = (status: string) =&gt; {&#10;    switch (status) {&#10;      case 'pending': return '⏳';&#10;      case 'approved': return '✅';&#10;      case 'converted': return '';&#10;      default: return '❓';&#10;    }&#10;  };&#10;&#10;  if (!permissions.isAdmin) {&#10;    return (&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;Accesso Negato&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;Solo gli amministratori possono accedere a questa pagina.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-7xl mx-auto&quot;&gt;&#10;      &lt;header className=&quot;sticky top-0 z-10 flex items-center p-2 sm:p-4 bg-slate-50/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-slate-200 dark:border-slate-700/50&quot;&gt;&#10;        &lt;button&#10;          onClick={onBack}&#10;          className=&quot;p-2 rounded-full text-slate-600 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors&quot;&#10;          aria-label=&quot;Torna indietro&quot;&#10;        &gt;&#10;          &lt;ChevronLeftIcon className=&quot;w-6 h-6&quot; /&gt;&#10;        &lt;/button&gt;&#10;        &lt;h1 className=&quot;ml-4 text-xl font-bold text-slate-900 dark:text-white&quot;&gt;Gestione Argomenti&lt;/h1&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;div className=&quot;px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Crea e gestisci gli argomenti che diventeranno gemme&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filtri e Azioni */}&#10;        &lt;div className=&quot;mb-6 flex flex-col sm:flex-row gap-4&quot;&gt;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Cerca argomenti o tag...&quot;&#10;              value={searchTerm}&#10;              onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;              className=&quot;w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;select&#10;            value={statusFilter}&#10;            onChange={(e) =&gt; setStatusFilter(e.target.value as any)}&#10;            className=&quot;px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500&quot;&#10;          &gt;&#10;            &lt;option value=&quot;all&quot;&gt;Tutti gli stati&lt;/option&gt;&#10;            &lt;option value=&quot;pending&quot;&gt;In attesa&lt;/option&gt;&#10;            &lt;option value=&quot;approved&quot;&gt;Approvati&lt;/option&gt;&#10;            &lt;option value=&quot;converted&quot;&gt;Convertiti&lt;/option&gt;&#10;          &lt;/select&gt;&#10;&#10;          &lt;button&#10;            onClick={() =&gt; setShowCreateModal(true)}&#10;            className=&quot;px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors&quot;&#10;          &gt;&#10;            + Nuovo Argomento&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Statistiche */}&#10;        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-4 mb-6&quot;&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-gray-600&quot;&gt;{topics.length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Totali&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;{topics.filter(t =&gt; t.status === 'pending').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;In attesa&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-green-600&quot;&gt;{topics.filter(t =&gt; t.status === 'approved').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Approvati&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;{topics.filter(t =&gt; t.status === 'converted').length}&lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Convertiti&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Griglia Argomenti */}&#10;        {loading ? (&#10;          &lt;div className=&quot;flex justify-center items-center h-64&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600&quot;&gt;&lt;/div&gt;&#10;            &lt;span className=&quot;ml-3 text-gray-600&quot;&gt;Caricamento argomenti...&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6&quot;&gt;&#10;              {currentTopics.map((topic) =&gt; (&#10;                &lt;div key={topic.id} className=&quot;bg-white rounded-lg shadow border p-6 hover:shadow-lg transition-shadow&quot;&gt;&#10;                  &lt;div className=&quot;flex items-start justify-between mb-3&quot;&gt;&#10;                    &lt;span className={`inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full ${getStatusBadgeColor(topic.status)}`}&gt;&#10;                      {getStatusEmoji(topic.status)} {topic.status}&#10;                    &lt;/span&gt;&#10;                    &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; openEditModal(topic)}&#10;                        className=&quot;text-blue-600 hover:text-blue-800 text-sm&quot;&#10;                      &gt;&#10;                        ✏️&#10;                      &lt;/button&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; handleDelete(topic.id)}&#10;                        className=&quot;text-red-600 hover:text-red-800 text-sm&quot;&#10;                      &gt;&#10;                        ️&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-3 line-clamp-3&quot;&gt;&#10;                    {topic.text}&#10;                  &lt;/h3&gt;&#10;&#10;                  &lt;div className=&quot;flex flex-wrap gap-1 mb-4&quot;&gt;&#10;                    {topic.tags.map((tag, index) =&gt; (&#10;                      &lt;span key={index} className=&quot;inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded&quot;&gt;&#10;                        #{tag}&#10;                      &lt;/span&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;text-xs text-gray-500 mb-4&quot;&gt;&#10;                    Creato il {new Date(topic.createdAt).toLocaleDateString('it-IT')}&#10;                  &lt;/div&gt;&#10;&#10;                  {/* Cambio Status */}&#10;                  &lt;select&#10;                    value={topic.status}&#10;                    onChange={(e) =&gt; handleStatusChange(topic.id, e.target.value as any)}&#10;                    className=&quot;w-full text-xs border border-gray-300 rounded px-2 py-1&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;pending&quot;&gt;⏳ In attesa&lt;/option&gt;&#10;                    &lt;option value=&quot;approved&quot;&gt;✅ Approvato&lt;/option&gt;&#10;                    &lt;option value=&quot;converted&quot;&gt; Convertito&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;&#10;            {/* Paginazione */}&#10;            {totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center space-x-2&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#10;                  disabled={currentPage === 1}&#10;                  className=&quot;px-3 py-2 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#10;                &gt;&#10;                  ← Precedente&#10;                &lt;/button&gt;&#10;&#10;                &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;                  {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map((page) =&gt; (&#10;                    &lt;button&#10;                      key={page}&#10;                      onClick={() =&gt; setCurrentPage(page)}&#10;                      className={`px-3 py-2 rounded-md text-sm ${&#10;                        page === currentPage&#10;                          ? 'bg-blue-600 text-white'&#10;                          : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'&#10;                      }`}&#10;                    &gt;&#10;                      {page}&#10;                    &lt;/button&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#10;                  disabled={currentPage === totalPages}&#10;                  className=&quot;px-3 py-2 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#10;                &gt;&#10;                  Successivo →&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;&#10;        {/* Modal Creazione/Modifica */}&#10;        {(showCreateModal || editingTopic) &amp;&amp; (&#10;          &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;            &lt;div className=&quot;bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto&quot;&gt;&#10;              &lt;div className=&quot;p-6&quot;&gt;&#10;                &lt;h2 className=&quot;text-xl font-bold text-gray-900 mb-4&quot;&gt;&#10;                  {editingTopic ? 'Modifica Argomento' : 'Nuovo Argomento'}&#10;                &lt;/h2&gt;&#10;&#10;                &lt;form onSubmit={editingTopic ? handleUpdate : handleCreate}&gt;&#10;                  &lt;div className=&quot;mb-4&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Testo dell'argomento&#10;                    &lt;/label&gt;&#10;                    &lt;textarea&#10;                      value={formData.text}&#10;                      onChange={(e) =&gt; setFormData({...formData, text: e.target.value})}&#10;                      required&#10;                      rows={4}&#10;                      placeholder=&quot;Descrivi l'argomento che vorresti sviluppare in una gemma...&quot;&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;mb-6&quot;&gt;&#10;                    &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;                      Tag (separati da virgole)&#10;                    &lt;/label&gt;&#10;                    &lt;input&#10;                      type=&quot;text&quot;&#10;                      value={formData.tags}&#10;                      onChange={(e) =&gt; setFormData({...formData, tags: e.target.value})}&#10;                      placeholder=&quot;es: storia, arte, scienza, tecnologia&quot;&#10;                      className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#10;                    /&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                      I tag aiutano a categorizzare l'argomento&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;                    &lt;button&#10;                      type=&quot;button&quot;&#10;                      onClick={resetForm}&#10;                      className=&quot;px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 transition-colors&quot;&#10;                    &gt;&#10;                      Annulla&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      type=&quot;submit&quot;&#10;                      className=&quot;px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors&quot;&#10;                    &gt;&#10;                      {editingTopic ? 'Aggiorna' : 'Crea'}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/form&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default TopicManagement;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/admin/UserManagement.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/admin/UserManagement.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#13;&#10;import { User, UserRole } from '../../types';&#13;&#10;import { fetchAllUsers, searchUsers, promoteUserRole } from '../../services/firestoreService';&#13;&#10;import { useUserPermissions } from '../../services/roleService';&#13;&#10;&#13;&#10;interface UserManagementProps {&#13;&#10;  currentUser: User | null;&#13;&#10;}&#13;&#10;&#13;&#10;const UserManagement: React.FC&lt;UserManagementProps&gt; = ({ currentUser }) =&gt; {&#13;&#10;  const [users, setUsers] = useState&lt;(User &amp; { id: string })[]&gt;([]);&#13;&#10;  const [searchTerm, setSearchTerm] = useState('');&#13;&#10;  const [loading, setLoading] = useState(true);&#13;&#10;  const [currentPage, setCurrentPage] = useState(1);&#13;&#10;  const [usersPerPage] = useState(10);&#13;&#10;  const [selectedRole, setSelectedRole] = useState&lt;UserRole | ''&gt;('');&#13;&#10;&#13;&#10;  const permissions = useUserPermissions(currentUser);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (!permissions.isAdmin) {&#13;&#10;      return; // Solo gli admin possono accedere a questa pagina&#13;&#10;    }&#13;&#10;    loadUsers();&#13;&#10;  }, [permissions.isAdmin]);&#13;&#10;&#13;&#10;  const loadUsers = async () =&gt; {&#13;&#10;    setLoading(true);&#13;&#10;    try {&#13;&#10;      const fetchedUsers = await fetchAllUsers();&#13;&#10;      setUsers(fetchedUsers);&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Errore nel caricamento utenti:', error);&#13;&#10;    }&#13;&#10;    setLoading(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleSearch = async () =&gt; {&#13;&#10;    if (searchTerm.trim()) {&#13;&#10;      setLoading(true);&#13;&#10;      try {&#13;&#10;        const searchResults = await searchUsers(searchTerm);&#13;&#10;        setUsers(searchResults);&#13;&#10;      } catch (error) {&#13;&#10;        console.error('Errore nella ricerca:', error);&#13;&#10;      }&#13;&#10;      setLoading(false);&#13;&#10;    } else {&#13;&#10;      loadUsers();&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handlePromoteUser = async (userId: string, newRole: UserRole) =&gt; {&#13;&#10;    try {&#13;&#10;      await promoteUserRole(userId, newRole);&#13;&#10;      await loadUsers(); // Ricarica la lista&#13;&#10;      alert(`Utente promosso a ${newRole} con successo!`);&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Errore nella promozione:', error);&#13;&#10;      alert('Errore nella promozione utente');&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const filteredUsers = selectedRole&#13;&#10;    ? users.filter(user =&gt; user.role === selectedRole)&#13;&#10;    : users;&#13;&#10;&#13;&#10;  // Paginazione&#13;&#10;  const indexOfLastUser = currentPage * usersPerPage;&#13;&#10;  const indexOfFirstUser = indexOfLastUser - usersPerPage;&#13;&#10;  const currentUsers = filteredUsers.slice(indexOfFirstUser, indexOfLastUser);&#13;&#10;  const totalPages = Math.ceil(filteredUsers.length / usersPerPage);&#13;&#10;&#13;&#10;  const getRoleBadgeColor = (role: UserRole) =&gt; {&#13;&#10;    switch (role) {&#13;&#10;      case UserRole.ADMIN: return 'bg-red-100 text-red-800';&#13;&#10;      case UserRole.MODERATOR: return 'bg-yellow-100 text-yellow-800';&#13;&#10;      case UserRole.USER: return 'bg-green-100 text-green-800';&#13;&#10;      default: return 'bg-gray-100 text-gray-800';&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  if (!permissions.isAdmin) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#13;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-900 mb-2&quot;&gt;Accesso Negato&lt;/h2&gt;&#13;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;Solo gli amministratori possono accedere a questa pagina.&lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#13;&#10;      &lt;div className=&quot;mb-8&quot;&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Gestione Utenti&lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Gestisci i ruoli e i permessi degli utenti&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Filtri e Ricerca */}&#13;&#10;      &lt;div className=&quot;mb-6 flex flex-col sm:flex-row gap-4&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;          &lt;div className=&quot;relative&quot;&gt;&#13;&#10;            &lt;input&#13;&#10;              type=&quot;text&quot;&#13;&#10;              placeholder=&quot;Cerca per email...&quot;&#13;&#10;              value={searchTerm}&#13;&#10;              onChange={(e) =&gt; setSearchTerm(e.target.value)}&#13;&#10;              onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; handleSearch()}&#13;&#10;              className=&quot;w-full pl-4 pr-10 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent&quot;&#13;&#10;            /&gt;&#13;&#10;            &lt;button&#13;&#10;              onClick={handleSearch}&#13;&#10;              className=&quot;absolute right-2 top-2 text-gray-400 hover:text-gray-600&quot;&#13;&#10;            &gt;&#13;&#10;              &#13;&#10;            &lt;/button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;select&#13;&#10;          value={selectedRole}&#13;&#10;          onChange={(e) =&gt; setSelectedRole(e.target.value as UserRole | '')}&#13;&#10;          className=&quot;px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500&quot;&#13;&#10;        &gt;&#13;&#10;          &lt;option value=&quot;&quot;&gt;Tutti i ruoli&lt;/option&gt;&#13;&#10;          &lt;option value={UserRole.USER}&gt;Utenti&lt;/option&gt;&#13;&#10;          &lt;option value={UserRole.MODERATOR}&gt;Moderatori&lt;/option&gt;&#13;&#10;          &lt;option value={UserRole.ADMIN}&gt;Amministratori&lt;/option&gt;&#13;&#10;        &lt;/select&gt;&#13;&#10;&#13;&#10;        &lt;button&#13;&#10;          onClick={loadUsers}&#13;&#10;          className=&quot;px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors&quot;&#13;&#10;        &gt;&#13;&#10;          Aggiorna&#13;&#10;        &lt;/button&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Statistiche */}&#13;&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4 mb-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-2xl font-bold text-blue-600&quot;&gt;{users.filter(u =&gt; u.role === UserRole.USER).length}&lt;/div&gt;&#13;&#10;          &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Utenti&lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-2xl font-bold text-yellow-600&quot;&gt;{users.filter(u =&gt; u.role === UserRole.MODERATOR).length}&lt;/div&gt;&#13;&#10;          &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Moderatori&lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;        &lt;div className=&quot;bg-white p-4 rounded-lg shadow border&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-2xl font-bold text-red-600&quot;&gt;{users.filter(u =&gt; u.role === UserRole.ADMIN).length}&lt;/div&gt;&#13;&#10;          &lt;div className=&quot;text-sm text-gray-600&quot;&gt;Amministratori&lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Tabella Utenti */}&#13;&#10;      &lt;div className=&quot;bg-white shadow rounded-lg overflow-hidden&quot;&gt;&#13;&#10;        {loading ? (&#13;&#10;          &lt;div className=&quot;p-8 text-center&quot;&gt;&#13;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto&quot;&gt;&lt;/div&gt;&#13;&#10;            &lt;p className=&quot;mt-2 text-gray-600&quot;&gt;Caricamento utenti...&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        ) : (&#13;&#10;          &lt;&gt;&#13;&#10;            &lt;table className=&quot;min-w-full divide-y divide-gray-200&quot;&gt;&#13;&#10;              &lt;thead className=&quot;bg-gray-50&quot;&gt;&#13;&#10;                &lt;tr&gt;&#13;&#10;                  &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#13;&#10;                    Utente&#13;&#10;                  &lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#13;&#10;                    Email&#13;&#10;                  &lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#13;&#10;                    Ruolo&#13;&#10;                  &lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#13;&#10;                    Registrato&#13;&#10;                  &lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#13;&#10;                    Azioni&#13;&#10;                  &lt;/th&gt;&#13;&#10;                &lt;/tr&gt;&#13;&#10;              &lt;/thead&gt;&#13;&#10;              &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#13;&#10;                {currentUsers.map((user) =&gt; (&#13;&#10;                  &lt;tr key={user.id} className=&quot;hover:bg-gray-50&quot;&gt;&#13;&#10;                    &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#13;&#10;                      &lt;div className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#13;&#10;                        {user.firstName} {user.lastName}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#13;&#10;                      &lt;div className=&quot;text-sm text-gray-900&quot;&gt;{user.email}&lt;/div&gt;&#13;&#10;                    &lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;px-6 py-4 whitespace-nowrap&quot;&gt;&#13;&#10;                      &lt;span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getRoleBadgeColor(user.role)}`}&gt;&#13;&#10;                        {user.role}&#13;&#10;                      &lt;/span&gt;&#13;&#10;                    &lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-500&quot;&gt;&#13;&#10;                      {new Date(user.createdAt).toLocaleDateString('it-IT')}&#13;&#10;                    &lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm space-x-2&quot;&gt;&#13;&#10;                      {user.role !== UserRole.ADMIN &amp;&amp; (&#13;&#10;                        &lt;select&#13;&#10;                          onChange={(e) =&gt; {&#13;&#10;                            if (e.target.value &amp;&amp; e.target.value !== user.role) {&#13;&#10;                              handlePromoteUser(user.id, e.target.value as UserRole);&#13;&#10;                            }&#13;&#10;                          }}&#13;&#10;                          defaultValue=&quot;&quot;&#13;&#10;                          className=&quot;text-xs border border-gray-300 rounded px-2 py-1&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;option value=&quot;&quot;&gt;Cambia ruolo&lt;/option&gt;&#13;&#10;                          {user.role !== UserRole.USER &amp;&amp; &lt;option value={UserRole.USER}&gt;→ Utente&lt;/option&gt;}&#13;&#10;                          {user.role !== UserRole.MODERATOR &amp;&amp; &lt;option value={UserRole.MODERATOR}&gt;→ Moderatore&lt;/option&gt;}&#13;&#10;                          {user.role !== UserRole.ADMIN &amp;&amp; &lt;option value={UserRole.ADMIN}&gt;→ Admin&lt;/option&gt;}&#13;&#10;                        &lt;/select&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/td&gt;&#13;&#10;                  &lt;/tr&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/tbody&gt;&#13;&#10;            &lt;/table&gt;&#13;&#10;&#13;&#10;            {/* Paginazione */}&#13;&#10;            {totalPages &gt; 1 &amp;&amp; (&#13;&#10;              &lt;div className=&quot;bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200&quot;&gt;&#13;&#10;                &lt;div className=&quot;flex-1 flex justify-between sm:hidden&quot;&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setCurrentPage(Math.max(1, currentPage - 1))}&#13;&#10;                    disabled={currentPage === 1}&#13;&#10;                    className=&quot;relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#13;&#10;                  &gt;&#13;&#10;                    Precedente&#13;&#10;                  &lt;/button&gt;&#13;&#10;                  &lt;button&#13;&#10;                    onClick={() =&gt; setCurrentPage(Math.min(totalPages, currentPage + 1))}&#13;&#10;                    disabled={currentPage === totalPages}&#13;&#10;                    className=&quot;ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50&quot;&#13;&#10;                  &gt;&#13;&#10;                    Successivo&#13;&#10;                  &lt;/button&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className=&quot;hidden sm:flex-1 sm:flex sm:items-center sm:justify-between&quot;&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;p className=&quot;text-sm text-gray-700&quot;&gt;&#13;&#10;                      Mostrando &lt;span className=&quot;font-medium&quot;&gt;{indexOfFirstUser + 1}&lt;/span&gt; a{' '}&#13;&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{Math.min(indexOfLastUser, filteredUsers.length)}&lt;/span&gt; di{' '}&#13;&#10;                      &lt;span className=&quot;font-medium&quot;&gt;{filteredUsers.length}&lt;/span&gt; risultati&#13;&#10;                    &lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;nav className=&quot;relative z-0 inline-flex rounded-md shadow-sm -space-x-px&quot;&gt;&#13;&#10;                      {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map((page) =&gt; (&#13;&#10;                        &lt;button&#13;&#10;                          key={page}&#13;&#10;                          onClick={() =&gt; setCurrentPage(page)}&#13;&#10;                          className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${&#13;&#10;                            page === currentPage&#13;&#10;                              ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'&#13;&#10;                              : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'&#13;&#10;                          }`}&#13;&#10;                        &gt;&#13;&#10;                          {page}&#13;&#10;                        &lt;/button&gt;&#13;&#10;                      ))}&#13;&#10;                    &lt;/nav&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;          &lt;/&gt;&#13;&#10;        )}&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default UserManagement;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/icons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/icons.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/firestoreService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/firestoreService.ts" />
              <option name="originalContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  setDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  query,&#10;  limit,&#10;  onSnapshot,&#10;  Unsubscribe,&#10;  orderBy,&#10;  where,&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { Gem, Channel, User, SavedList, UserQuestion, UserRole } from '../types';&#10;import { getDefaultPermissions } from './roleService';&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchChannels = async (): Promise&lt;Channel[]&gt; =&gt; {&#10;  try {&#10;    const channelsCollection = collection(db, 'channels');&#10;    const channelSnapshot = await getDocs(channelsCollection);&#10;    return channelSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as Channel));&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching channels:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchGems = async (maxCount: number = 20): Promise&lt;Gem[]&gt; =&gt; {&#10;    try {&#10;        const gemsCollection = collection(db, 'gems');&#10;        const q = query(gemsCollection, limit(maxCount));&#10;        const gemSnapshot = await getDocs(q);&#10;        // Ritorniamo gemme con userQuestions vuoto, verrà popolato dal listener se necessario&#10;        return gemSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data(), userQuestions: [] } as Gem));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching gems:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const fetchUserProfile = async (uid: string): Promise&lt;User | null&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        return userDoc.exists() ? (userDoc.data() as User) : null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user profile:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export const fetchUserSavedLists = async (uid: string): Promise&lt;SavedList[]&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        if (userDoc.exists() &amp;&amp; userDoc.data().savedLists) {&#10;            return userDoc.data().savedLists;&#10;        }&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user saved lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;&#10;// --- Write Operations ---&#10;&#10;export const createUserProfile = async (uid: string, email: string, firstName: string, lastName: string, role: UserRole = UserRole.USER): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const defaultLists: SavedList[] = [&#10;        { id: 'default', name: 'Preferiti Generici', gemIds: [] }&#10;    ];&#10;    const permissions = getDefaultPermissions(role);&#10;&#10;    await setDoc(userDocRef, {&#10;        email, &#10;        firstName, &#10;        lastName,&#10;        role,&#10;        permissions,&#10;        createdAt: new Date(),&#10;        lastLoginAt: new Date(),&#10;        savedLists: defaultLists&#10;    });&#10;};&#10;&#10;export const updateUserProfile = async (uid: string, data: Partial&lt;User&gt;): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, data);&#10;};&#10;&#10;export const updateUserSavedLists = async (uid:string, lists: SavedList[]): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, { savedLists: lists });&#10;};&#10;&#10;export const addUserQuestion = async (gemId: string, question: string): Promise&lt;void&gt; =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    await addDoc(questionsCollection, {&#10;        question,&#10;        answer: '',&#10;        isGenerating: true,&#10;        createdAt: new Date(),&#10;    });&#10;};&#10;&#10;&#10;// --- Listeners ---&#10;&#10;export const listenToUserQuestions = (gemId: string, callback: (questions: UserQuestion[]) =&gt; void): Unsubscribe =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    const q = query(questionsCollection, orderBy('createdAt', 'desc'));&#10;    &#10;    return onSnapshot(q, (snapshot) =&gt; {&#10;        const questions = snapshot.docs.map(doc =&gt; ({&#10;            id: doc.id,&#10;            ...doc.data()&#10;        } as UserQuestion));&#10;        callback(questions);&#10;    });&#10;};&#10;&#10;" />
              <option name="updatedContent" value="import {&#10;  collection,&#10;  doc,&#10;  getDocs,&#10;  getDoc,&#10;  setDoc,&#10;  updateDoc,&#10;  addDoc,&#10;  query,&#10;  limit,&#10;  onSnapshot,&#10;  Unsubscribe,&#10;  orderBy,&#10;  where,&#10;} from 'firebase/firestore';&#10;import { db } from './firebase';&#10;import { Gem, Channel, User, SavedList, UserQuestion, UserRole, TopicSuggestion } from '../types';&#10;import { getDefaultPermissions } from './roleService';&#10;&#10;// --- Fetch Operations ---&#10;&#10;export const fetchChannels = async (): Promise&lt;Channel[]&gt; =&gt; {&#10;  try {&#10;    const channelsCollection = collection(db, 'channels');&#10;    const channelSnapshot = await getDocs(channelsCollection);&#10;    return channelSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as Channel));&#10;  } catch (error) {&#10;    console.error(&quot;Error fetching channels:&quot;, error);&#10;    return [];&#10;  }&#10;};&#10;&#10;export const fetchGems = async (maxCount: number = 20): Promise&lt;Gem[]&gt; =&gt; {&#10;    try {&#10;        const gemsCollection = collection(db, 'gems');&#10;        const q = query(gemsCollection, limit(maxCount));&#10;        const gemSnapshot = await getDocs(q);&#10;        // Ritorniamo gemme con userQuestions vuoto, verrà popolato dal listener se necessario&#10;        return gemSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data(), userQuestions: [] } as Gem));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching gems:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const fetchUserProfile = async (uid: string): Promise&lt;User | null&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        return userDoc.exists() ? (userDoc.data() as User) : null;&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user profile:&quot;, error);&#10;        return null;&#10;    }&#10;};&#10;&#10;export const fetchUserSavedLists = async (uid: string): Promise&lt;SavedList[]&gt; =&gt; {&#10;    try {&#10;        const userDocRef = doc(db, 'users', uid);&#10;        const userDoc = await getDoc(userDocRef);&#10;        if (userDoc.exists() &amp;&amp; userDoc.data().savedLists) {&#10;            return userDoc.data().savedLists;&#10;        }&#10;        return [];&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching user saved lists:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;&#10;// --- Write Operations ---&#10;&#10;export const createUserProfile = async (uid: string, email: string, firstName: string, lastName: string, role: UserRole = UserRole.USER): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    const defaultLists: SavedList[] = [&#10;        { id: 'default', name: 'Preferiti Generici', gemIds: [] }&#10;    ];&#10;    const permissions = getDefaultPermissions(role);&#10;&#10;    await setDoc(userDocRef, {&#10;        email, &#10;        firstName, &#10;        lastName,&#10;        role,&#10;        permissions,&#10;        createdAt: new Date(),&#10;        lastLoginAt: new Date(),&#10;        savedLists: defaultLists&#10;    });&#10;};&#10;&#10;export const updateUserProfile = async (uid: string, data: Partial&lt;User&gt;): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, data);&#10;};&#10;&#10;export const updateUserSavedLists = async (uid:string, lists: SavedList[]): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', uid);&#10;    await updateDoc(userDocRef, { savedLists: lists });&#10;};&#10;&#10;export const addUserQuestion = async (gemId: string, question: string): Promise&lt;void&gt; =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    await addDoc(questionsCollection, {&#10;        question,&#10;        answer: '',&#10;        isGenerating: true,&#10;        createdAt: new Date(),&#10;    });&#10;};&#10;&#10;&#10;// --- Listeners ---&#10;&#10;export const listenToUserQuestions = (gemId: string, callback: (questions: UserQuestion[]) =&gt; void): Unsubscribe =&gt; {&#10;    const questionsCollection = collection(db, 'gems', gemId, 'userQuestions');&#10;    const q = query(questionsCollection, orderBy('createdAt', 'desc'));&#10;    &#10;    return onSnapshot(q, (snapshot) =&gt; {&#10;        const questions = snapshot.docs.map(doc =&gt; ({&#10;            id: doc.id,&#10;            ...doc.data()&#10;        } as UserQuestion));&#10;        callback(questions);&#10;    });&#10;};&#10;&#10;// --- Topic Suggestions Operations ---&#10;&#10;export const fetchTopicSuggestions = async (status?: 'pending' | 'approved' | 'converted'): Promise&lt;TopicSuggestion[]&gt; =&gt; {&#10;    try {&#10;        const topicsCollection = collection(db, 'topicSuggestions');&#10;        let q = query(topicsCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (status) {&#10;            q = query(topicsCollection, where('status', '==', status), orderBy('createdAt', 'desc'));&#10;        }&#10;&#10;        const topicSnapshot = await getDocs(q);&#10;        return topicSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as TopicSuggestion));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching topic suggestions:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const createTopicSuggestion = async (text: string, tags: string[], createdBy: string): Promise&lt;void&gt; =&gt; {&#10;    const topicsCollection = collection(db, 'topicSuggestions');&#10;    await addDoc(topicsCollection, {&#10;        text,&#10;        tags,&#10;        createdBy,&#10;        status: 'pending',&#10;        createdAt: new Date(),&#10;        updatedAt: new Date(),&#10;    });&#10;};&#10;&#10;export const updateTopicSuggestion = async (id: string, data: Partial&lt;TopicSuggestion&gt;): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { ...data, updatedAt: new Date() });&#10;};&#10;&#10;export const deleteTopicSuggestion = async (id: string): Promise&lt;void&gt; =&gt; {&#10;    const topicDocRef = doc(db, 'topicSuggestions', id);&#10;    await updateDoc(topicDocRef, { deleted: true, updatedAt: new Date() });&#10;};&#10;&#10;// --- User Management Operations ---&#10;&#10;export const fetchAllUsers = async (limit?: number): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        const usersCollection = collection(db, 'users');&#10;        let q = query(usersCollection, orderBy('createdAt', 'desc'));&#10;&#10;        if (limit) {&#10;            q = query(usersCollection, orderBy('createdAt', 'desc'), limit(limit));&#10;        }&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error fetching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const searchUsers = async (searchTerm: string): Promise&lt;(User &amp; { id: string })[]&gt; =&gt; {&#10;    try {&#10;        // Nota: Firestore non supporta ricerca full-text nativa, quindi facciamo una ricerca per email&#10;        const usersCollection = collection(db, 'users');&#10;        const q = query(&#10;            usersCollection,&#10;            where('email', '&gt;=', searchTerm.toLowerCase()),&#10;            where('email', '&lt;=', searchTerm.toLowerCase() + '\uf8ff')&#10;        );&#10;&#10;        const userSnapshot = await getDocs(q);&#10;        return userSnapshot.docs.map(doc =&gt; ({ id: doc.id, ...doc.data() } as User &amp; { id: string }));&#10;    } catch (error) {&#10;        console.error(&quot;Error searching users:&quot;, error);&#10;        return [];&#10;    }&#10;};&#10;&#10;export const promoteUserRole = async (userId: string, newRole: UserRole): Promise&lt;void&gt; =&gt; {&#10;    const userDocRef = doc(db, 'users', userId);&#10;    const newPermissions = getDefaultPermissions(newRole);&#10;&#10;    await updateDoc(userDocRef, {&#10;        role: newRole,&#10;        permissions: newPermissions,&#10;        updatedAt: new Date()&#10;    });&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/roleService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/roleService.ts" />
              <option name="originalContent" value="import { UserRole, UserPermissions } from '../types';&#10;&#10;/**&#10; * Restituisce i permessi di default per ogni ruolo&#10; */&#10;export const getDefaultPermissions = (role: UserRole): UserPermissions =&gt; {&#10;  switch (role) {&#10;    case UserRole.ADMIN:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: true,&#10;        canManageUsers: true,&#10;        canModerateContent: true,&#10;      };&#10;&#10;    case UserRole.MODERATOR:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: true,&#10;      };&#10;&#10;    case UserRole.USER:&#10;    default:&#10;      return {&#10;        canCreateGems: false,&#10;        canEditGems: false,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: false,&#10;      };&#10;  }&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha un permesso specifico&#10; */&#10;export const hasPermission = (&#10;  userPermissions: UserPermissions,&#10;  permission: keyof UserPermissions&#10;): boolean =&gt; {&#10;  return userPermissions[permission] === true;&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha almeno uno dei ruoli specificati&#10; */&#10;export const hasRole = (userRole: UserRole, allowedRoles: UserRole[]): boolean =&gt; {&#10;  return allowedRoles.includes(userRole);&#10;};&#10;&#10;/**&#10; * Verifica se un utente è admin&#10; */&#10;export const isAdmin = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Verifica se un utente è moderatore o admin&#10; */&#10;export const isModerator = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.MODERATOR || userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Hook personalizzato per verificare i permessi dell'utente corrente&#10; */&#10;export const useUserPermissions = (user: { role: UserRole; permissions: UserPermissions } | null) =&gt; {&#10;  if (!user) {&#10;    return {&#10;      canCreateGems: false,&#10;      canEditGems: false,&#10;      canDeleteGems: false,&#10;      canManageUsers: false,&#10;      canModerateContent: false,&#10;      isAdmin: false,&#10;      isModerator: false,&#10;    };&#10;  }&#10;&#10;  return {&#10;    ...user.permissions,&#10;    isAdmin: isAdmin(user.role),&#10;    isModerator: isModerator(user.role),&#10;  };&#10;};&#10;" />
              <option name="updatedContent" value="import { UserRole, UserPermissions } from '../types.js';&#10;&#10;/**&#10; * Restituisce i permessi di default per ogni ruolo&#10; */&#10;export const getDefaultPermissions = (role: UserRole): UserPermissions =&gt; {&#10;  switch (role) {&#10;    case UserRole.ADMIN:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: true,&#10;        canManageUsers: true,&#10;        canModerateContent: true,&#10;      };&#10;&#10;    case UserRole.MODERATOR:&#10;      return {&#10;        canCreateGems: true,&#10;        canEditGems: true,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: true,&#10;      };&#10;&#10;    case UserRole.USER:&#10;    default:&#10;      return {&#10;        canCreateGems: false,&#10;        canEditGems: false,&#10;        canDeleteGems: false,&#10;        canManageUsers: false,&#10;        canModerateContent: false,&#10;      };&#10;  }&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha un permesso specifico&#10; */&#10;export const hasPermission = (&#10;  userPermissions: UserPermissions,&#10;  permission: keyof UserPermissions&#10;): boolean =&gt; {&#10;  return userPermissions[permission] === true;&#10;};&#10;&#10;/**&#10; * Verifica se un utente ha almeno uno dei ruoli specificati&#10; */&#10;export const hasRole = (userRole: UserRole, allowedRoles: UserRole[]): boolean =&gt; {&#10;  return allowedRoles.includes(userRole);&#10;};&#10;&#10;/**&#10; * Verifica se un utente è admin&#10; */&#10;export const isAdmin = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Verifica se un utente è moderatore o admin&#10; */&#10;export const isModerator = (userRole: UserRole): boolean =&gt; {&#10;  return userRole === UserRole.MODERATOR || userRole === UserRole.ADMIN;&#10;};&#10;&#10;/**&#10; * Hook personalizzato per verificare i permessi dell'utente corrente&#10; */&#10;export const useUserPermissions = (user: { role: UserRole; permissions: UserPermissions } | null) =&gt; {&#10;  if (!user) {&#10;    return {&#10;      canCreateGems: false,&#10;      canEditGems: false,&#10;      canDeleteGems: false,&#10;      canManageUsers: false,&#10;      canModerateContent: false,&#10;      isAdmin: false,&#10;      isModerator: false,&#10;    };&#10;  }&#10;&#10;  return {&#10;    ...user.permissions,&#10;    isAdmin: isAdmin(user.role),&#10;    isModerator: isModerator(user.role),&#10;  };&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/types.ts" />
              <option name="originalContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[];&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    emoji: string;&#10;    filterTags: string[];&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;export interface User {&#10;  firstName: string;&#10;  lastName: string;&#10;  email: string;&#10;  role: UserRole;&#10;  permissions: UserPermissions;&#10;  createdAt: Date;&#10;  lastLoginAt?: Date;&#10;}&#10;&#10;export type Filter = &#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;" />
              <option name="updatedContent" value="export enum Topic {&#10;  GENERAL_CULTURE = &quot;Cultura Generale &amp; Curiosità&quot;,&#10;  SCIENCE_TECH = &quot;Scienza, Tecnologia &amp; Futuro&quot;,&#10;  ART_DESIGN = &quot;Arte, Design &amp; Creatività&quot;,&#10;  WELLBEING = &quot;Benessere &amp; Sviluppo Personale&quot;,&#10;  ECONOMY = &quot;Economia, Finanza &amp; Società&quot;,&#10;}&#10;&#10;export enum UserRole {&#10;  USER = &quot;user&quot;,&#10;  MODERATOR = &quot;moderator&quot;,&#10;  ADMIN = &quot;admin&quot;&#10;}&#10;&#10;export interface UserPermissions {&#10;  canCreateGems: boolean;&#10;  canEditGems: boolean;&#10;  canDeleteGems: boolean;&#10;  canManageUsers: boolean;&#10;  canModerateContent: boolean;&#10;}&#10;&#10;export interface UserQuestion {&#10;  id: string;&#10;  question: string;&#10;  answer: string;&#10;  isGenerating?: boolean;&#10;}&#10;&#10;export interface Source {&#10;    uri: string;&#10;    title: string;&#10;}&#10;&#10;export interface Gem {&#10;  id:string;&#10;  topic: Topic;&#10;  title: string;&#10;  description: string;&#10;  imageUrl: string;&#10;  userQuestions: UserQuestion[];&#10;  tags: string[];&#10;  suggestedQuestions: string[];&#10;  sources: Source[];&#10;}&#10;&#10;export interface Channel {&#10;    id: string;&#10;    name: string;&#10;    description: string;&#10;    emoji: string;&#10;    filterTags: string[];&#10;}&#10;&#10;export interface SavedList {&#10;    id: string;&#10;    name: string;&#10;    gemIds: string[];&#10;}&#10;&#10;export interface User {&#10;  firstName: string;&#10;  lastName: string;&#10;  email: string;&#10;  role: UserRole;&#10;  permissions: UserPermissions;&#10;  createdAt: Date;&#10;  lastLoginAt?: Date;&#10;}&#10;&#10;export type Filter = &#10;  | { type: 'all' }&#10;  | { type: 'favorites' }&#10;  | { type: 'topic', value: Topic }&#10;  | { type: 'channel', value: string }&#10;  | { type: 'tag', value: string };&#10;&#10;export interface TopicSuggestion {&#10;  id: string;&#10;  text: string;&#10;  tags: string[];&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;  createdBy: string; // UID dell'utente che ha creato l'argomento&#10;  status: 'pending' | 'approved' | 'converted'; // Stato dell'argomento&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>