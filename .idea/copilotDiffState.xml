<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;,&#10;    &quot;firebase/&quot;: &quot;https://esm.sh/firebase@^12.1.0/&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;Curiow&lt;/title&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/heroicons/2.1.3/24/outline/heroicons.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;script type=&quot;importmap&quot;&gt;&#10;{&#10;  &quot;imports&quot;: {&#10;    &quot;react-dom/&quot;: &quot;https://esm.sh/react-dom@^19.1.1/&quot;,&#10;    &quot;@google/genai&quot;: &quot;https://esm.sh/@google/genai@^1.13.0&quot;,&#10;    &quot;react/&quot;: &quot;https://esm.sh/react@^19.1.1/&quot;,&#10;    &quot;react&quot;: &quot;https://esm.sh/react@^19.1.1&quot;,&#10;    &quot;firebase/app&quot;: &quot;https://esm.sh/firebase@10.12.2/app&quot;,&#10;    &quot;firebase/auth&quot;: &quot;https://esm.sh/firebase@10.12.2/auth&quot;,&#10;    &quot;firebase/firestore&quot;: &quot;https://esm.sh/firebase@10.12.2/firestore&quot;&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;&#10;&lt;/head&gt;&#10;  &lt;body class=&quot;bg-slate-50 dark:bg-slate-900&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/index.tsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-feed.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-feed.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video showcasing Curiow's feed features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/videos/curiow-intro.mp4">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/videos/curiow-intro.mp4" />
              <option name="updatedContent" value="# Placeholder video file - replace with actual video&#10;# This would be a video showcasing Curiow's main features" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemCard.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon, ChevronDownIcon, SparklesIcon } from './icons';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onRemoveRequest, onSelect, onLoginRequest, onView }) =&gt; {&#10;&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        if (isFavorite) {&#10;          onRemoveRequest(gem.id);&#10;        } else {&#10;          onSaveRequest(gem.id);&#10;        }&#10;    }&#10;  };&#10;&#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;        alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;    }&#10;  };&#10;&#10;  const [showSummary, setShowSummary] = React.useState(false); // controllo manuale (click)&#10;  const [isHovering, setIsHovering] = React.useState(false); // stato hover&#10;  const [canHover, setCanHover] = React.useState(false);&#10;  React.useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const mq = window.matchMedia('(hover: hover) and (pointer: fine)');&#10;      const update = () =&gt; setCanHover(mq.matches);&#10;      update();&#10;      mq.addEventListener('change', update);&#10;      return () =&gt; mq.removeEventListener('change', update);&#10;    }&#10;  }, []);&#10;  const actualOpen = showSummary || (canHover &amp;&amp; isHovering);&#10;  const summary = (gem.content as any)?.summary as string | undefined;&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  return (&#10;    &lt;div&#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;div className=&quot;relative&quot;&gt;&#10;        &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;        {summary &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-x-0 bottom-0&quot; onMouseEnter={() =&gt; setIsHovering(true)} onMouseLeave={() =&gt; setIsHovering(false)}&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={(e) =&gt; { e.stopPropagation(); setShowSummary(s =&gt; !s); }}&#10;              className={`w-full text-left group/summary focus:outline-none`}&#10;              aria-expanded={actualOpen}&#10;              aria-controls={`summary-${gem.id}`}&#10;              aria-label={actualOpen ? 'Chiudi sintesi' : 'Apri sintesi'}&#10;            &gt;&#10;              &lt;div className={`relative overflow-hidden transition-all duration-300 ease-out bg-gradient-to-t from-slate-900/90 via-slate-900/70 to-slate-900/20 backdrop-blur-sm text-white ${actualOpen ? 'max-h-60 sm:max-h-72' : 'max-h-16'}`}&gt;&#10;                &lt;div className=&quot;p-3 pr-10&quot;&gt;&#10;                  &lt;p id={`summary-${gem.id}`} className={`text-xs leading-snug whitespace-pre-line ${actualOpen ? '' : 'line-clamp-2'}`}&gt;{summary}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute right-2 top-2 flex items-center gap-1 text-[10px] uppercase font-semibold opacity-80&quot;&gt;&#10;                  &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${actualOpen ? 'rotate-180' : ''}`} /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute inset-0 ring-1 ring-white/10 rounded-t&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={handleShareClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                title=&quot;Condividi&quot;&#10;                aria-label=&quot;Condividi gemma&quot;&#10;              &gt;&#10;                  &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;              &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                    &lt;/span&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { Gem } from '../types';&#10;import { HeartIcon, ShareIcon, TagIcon, ChevronDownIcon, SparklesIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon } from './icons';&#10;import { trackEvent } from '../services/firebase';&#10;&#10;interface GemCardProps {&#10;  gem: Gem;&#10;  isLoggedIn: boolean;&#10;  isFavorite: boolean;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onSelect: (gemId: string) =&gt; void;&#10;  onLoginRequest: () =&gt; void;&#10;  onView?: () =&gt; void; // Nuova prop per tracciare le visualizzazioni&#10;}&#10;&#10;const GemCard: React.FC&lt;GemCardProps&gt; = ({ gem, isLoggedIn, isFavorite, onSaveRequest, onRemoveRequest, onSelect, onLoginRequest, onView }) =&gt; {&#10;&#10;  const [showShareBar, setShowShareBar] = React.useState(false);&#10;  const handleCardClick = () =&gt; {&#10;    if (!isLoggedIn) {&#10;      onLoginRequest();&#10;    } else {&#10;      onSelect(gem.id);&#10;    }&#10;  };&#10;&#10;  const handleFavoriteClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    if (!isLoggedIn) {&#10;        onLoginRequest();&#10;    } else {&#10;        if (isFavorite) {&#10;          onRemoveRequest(gem.id);&#10;        } else {&#10;          onSaveRequest(gem.id);&#10;        }&#10;    }&#10;  };&#10;&#10;  const handleShareClick = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    setShowShareBar(v =&gt; { const nv = !v; trackEvent('share_bar_toggle', { open: nv, gem_id: gem.id, context: 'card' }); return nv; });&#10;  };&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;&#10;  const handleCopyLink = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    navigator.clipboard.writeText(currentUrl).catch(()=&gt;{});&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id, context: 'card' });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleInstagram = (e: React.MouseEvent) =&gt; {&#10;    e.stopPropagation();&#10;    navigator.clipboard.writeText(currentUrl).catch(()=&gt;{});&#10;    trackEvent('share', { channel: 'instagram_copy', gem_id: gem.id, context: 'card' });&#10;    alert('Link copiato! Apri Instagram e incolla nella tua story/post.');&#10;  };&#10;&#10;  const [showSummary, setShowSummary] = React.useState(false); // controllo manuale (click)&#10;  const [isHovering, setIsHovering] = React.useState(false); // stato hover&#10;  const [canHover, setCanHover] = React.useState(false);&#10;  React.useEffect(() =&gt; {&#10;    if (typeof window !== 'undefined') {&#10;      const mq = window.matchMedia('(hover: hover) and (pointer: fine)');&#10;      const update = () =&gt; setCanHover(mq.matches);&#10;      update();&#10;      mq.addEventListener('change', update);&#10;      return () =&gt; mq.removeEventListener('change', update);&#10;    }&#10;  }, []);&#10;  const actualOpen = showSummary || (canHover &amp;&amp; isHovering);&#10;  const summary = (gem.content as any)?.summary as string | undefined;&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (onView) {&#10;      onView();&#10;    }&#10;  }, [onView]);&#10;&#10;  const [showShareSummary, setShowShareSummary] = React.useState(false); // (non usato, placeholder eventuale)&#10;  const shareWrapperRef = React.useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  React.useEffect(() =&gt; {&#10;    if (!showShareBar) return;&#10;    const handleOutside = (e: MouseEvent | TouchEvent) =&gt; {&#10;      if (!shareWrapperRef.current) return;&#10;      if (shareWrapperRef.current.contains(e.target as Node)) return; // click interno =&gt; ignora&#10;      setShowShareBar(false);&#10;    };&#10;    document.addEventListener('mousedown', handleOutside);&#10;    document.addEventListener('touchstart', handleOutside, { passive: true });&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleOutside);&#10;      document.removeEventListener('touchstart', handleOutside);&#10;    };&#10;  }, [showShareBar]);&#10;&#10;  return (&#10;    &lt;div&#10;        onClick={handleCardClick}&#10;        className=&quot;bg-white dark:bg-slate-800 rounded-xl shadow-lg snap-center group transition-transform duration-200 ease-in-out hover:scale-105 cursor-pointer&quot;&#10;        role=&quot;button&quot;&#10;        tabIndex={0}&#10;        aria-label={`Vedi dettagli per: ${gem.title}`}&#10;        onKeyDown={(e) =&gt; (e.key === 'Enter' || e.key === ' ') &amp;&amp; handleCardClick()}&#10;    &gt;&#10;      &lt;div className=&quot;relative overflow-hidden rounded-t-xl&quot;&gt;&#10;        &lt;img src={gem.imageUrl} alt={gem.title} className=&quot;w-full h-auto object-cover aspect-[3/4]&quot; /&gt;&#10;        {summary &amp;&amp; (&#10;          &lt;div className=&quot;absolute inset-x-0 bottom-0&quot; onMouseEnter={() =&gt; setIsHovering(true)} onMouseLeave={() =&gt; setIsHovering(false)}&gt;&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              onClick={(e) =&gt; { e.stopPropagation(); setShowSummary(s =&gt; !s); }}&#10;              className={`w-full text-left group/summary focus:outline-none`}&#10;              aria-expanded={actualOpen}&#10;              aria-controls={`summary-${gem.id}`}&#10;              aria-label={actualOpen ? 'Chiudi sintesi' : 'Apri sintesi'}&#10;            &gt;&#10;              &lt;div className={`relative overflow-hidden transition-all duration-300 ease-out bg-gradient-to-t from-slate-900/90 via-slate-900/70 to-slate-900/20 backdrop-blur-sm text-white ${actualOpen ? 'max-h-60 sm:max-h-72' : 'max-h-16'}`}&gt;&#10;                &lt;div className=&quot;p-3 pr-10&quot;&gt;&#10;                  &lt;p id={`summary-${gem.id}`} className={`text-xs leading-snug whitespace-pre-line ${actualOpen ? '' : 'line-clamp-2'}`}&gt;{summary}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute right-2 top-2 flex items-center gap-1 text-[10px] uppercase font-semibold opacity-80&quot;&gt;&#10;                  &lt;SparklesIcon className=&quot;w-4 h-4&quot; /&gt;&#10;                  &lt;ChevronDownIcon className={`w-4 h-4 transition-transform ${actualOpen ? 'rotate-180' : ''}`} /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;absolute inset-0 ring-1 ring-white/10 rounded-t&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;p-5&quot;&gt;&#10;        &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;            &lt;div&gt;&#10;                &lt;p className=&quot;text-slate-500 dark:text-slate-400 text-xs font-semibold uppercase tracking-wider&quot;&gt;{gem.topic}&lt;/p&gt;&#10;                &lt;h3 className=&quot;mt-1 text-lg font-bold text-slate-900 dark:text-white leading-tight group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors&quot;&gt;{gem.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 flex-shrink-0 ml-2&quot;&gt;&#10;              &lt;button&#10;                onClick={handleFavoriteClick}&#10;                className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-red-100 dark:hover:bg-slate-700 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                title={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;                aria-label={isFavorite ? 'Modifica salvataggio' : 'Salva come preferito'}&#10;              &gt;&#10;                  &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;              &lt;/button&gt;&#10;              &lt;div className=&quot;relative&quot; ref={shareWrapperRef}&gt;&#10;                &lt;button&#10;                  onClick={handleShareClick}&#10;                  className=&quot;p-2 rounded-full text-slate-500 dark:text-slate-400 hover:bg-indigo-100 dark:hover:bg-slate-700 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                  title=&quot;Condividi&quot;&#10;                  aria-label=&quot;Condividi gemma&quot;&#10;                &gt;&#10;                    &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                &lt;/button&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div&#10;                    className=&quot;absolute -top-2 right-0 -translate-y-full z-30 flex gap-1 p-2 rounded-xl bg-white dark:bg-slate-800 shadow-xl ring-1 ring-slate-200 dark:ring-slate-700&quot;&#10;                    onClick={e=&gt;e.stopPropagation()}&#10;                  &gt;&#10;                    &lt;a&#10;                      href={facebookUrl}&#10;                      target=&quot;_blank&quot;&#10;                      rel=&quot;noopener noreferrer&quot;&#10;                      onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;Facebook&quot;&#10;                      title=&quot;Facebook&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot;&#10;                    &gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button&#10;                      onClick={handleInstagram}&#10;                      aria-label=&quot;Instagram (copia link)&quot;&#10;                      title=&quot;Instagram (copia link)&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a&#10;                      href={whatsappUrl}&#10;                      target=&quot;_blank&quot;&#10;                      rel=&quot;noopener noreferrer&quot;&#10;                      onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;WhatsApp&quot;&#10;                      title=&quot;WhatsApp&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a&#10;                      href={emailUrl}&#10;                      onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id, context:'card'})}&#10;                      aria-label=&quot;Email&quot;&#10;                      title=&quot;Email&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button&#10;                      onClick={handleCopyLink}&#10;                      aria-label=&quot;Copia link&quot;&#10;                      title=&quot;Copia link&quot;&#10;                      className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-300 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                &lt;TagIcon className=&quot;w-4 h-4 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                {gem.tags.map(tag =&gt; (&#10;                    &lt;span key={tag} className=&quot;px-2 py-0.5 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-medium&quot;&gt;&#10;                        {tag}&#10;                    &lt;/span&gt;&#10;                ))}&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemCard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/GemDetailView.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/GemDetailView.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon, LightBulbIcon, BookOpenIcon } from './icons';&#10;import Header from './Header';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;}&#10;&#10;const UserQuestionItem: React.FC&lt;{ userQuestion: UserQuestion }&gt; = ({ userQuestion }) =&gt; (&#10;    &lt;div className=&quot;mt-4 p-4 bg-slate-100 dark:bg-slate-800 rounded-lg&quot;&gt;&#10;        &lt;p className=&quot;font-semibold text-sm text-slate-600 dark:text-slate-300&quot;&gt;Domanda: &lt;span className=&quot;font-normal&quot;&gt;{userQuestion.question}&lt;/span&gt;&lt;/p&gt;&#10;        &lt;div className=&quot;mt-2 text-sm text-slate-800 dark:text-slate-200&quot;&gt;&#10;            {userQuestion.isGenerating ? (&#10;                 &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4 animate-pulse text-indigo-400&quot; /&gt;&#10;                    &lt;span&gt;Generazione risposta...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{userQuestion.answer}&lt;/p&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;  const [hasAutoScrolled, setHasAutoScrolled] = useState(false);&#10;  const imgRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;  // nuovo stato per tab&#10;  const [activeTab, setActiveTab] = useState&lt;'tips' | 'saggio'&gt;('tips');&#10;  // refs per animazione cross-fade&#10;  const tipsRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const saggioRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const [contentHeight, setContentHeight] = useState&lt;number&gt;(0);&#10;&#10;  // funzione misura altezza contenuto attivo&#10;  const measureActiveHeight = () =&gt; {&#10;    const el = activeTab === 'tips' ? tipsRef.current : saggioRef.current;&#10;    if (el) {&#10;      // usa scrollHeight per includere overflow&#10;      const h = el.scrollHeight;&#10;      setContentHeight(h);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    // misura dopo cambio tab / gem&#10;    requestAnimationFrame(() =&gt; measureActiveHeight());&#10;  }, [activeTab, gem.id]);&#10;&#10;  useEffect(() =&gt; {&#10;    // misura al resize per mantenere altezza coerente&#10;    const onResize = () =&gt; measureActiveHeight();&#10;    window.addEventListener('resize', onResize);&#10;    return () =&gt; window.removeEventListener('resize', onResize);&#10;  }, []);&#10;&#10;  // Funzione per scrollare il titolo allineandolo appena sotto l'header sticky&#10;  const scrollTitleIntoView = (smooth = false) =&gt; {&#10;    const titleEl = document.getElementById('gem-title');&#10;    if (!titleEl) return;&#10;    const headerEl = document.querySelector('header');&#10;    const headerHeight = headerEl ? (headerEl as HTMLElement).offsetHeight : 0;&#10;    const buffer = 8; // piccolo margine&#10;    const target = titleEl.getBoundingClientRect().top + window.scrollY - headerHeight - buffer;&#10;    window.scrollTo({ top: target &gt;= 0 ? target : 0, behavior: smooth ? 'smooth' : 'auto' });&#10;    setHasAutoScrolled(true);&#10;  };&#10;&#10;  // Scroll iniziale dopo mount/cambio gem (post layout)&#10;  useEffect(() =&gt; {&#10;    setHasAutoScrolled(false);&#10;    // Usa rAF per attendere layout, poi ulteriore timeout breve per carichi asincroni minimi&#10;    requestAnimationFrame(() =&gt; {&#10;      scrollTitleIntoView(false);&#10;      setTimeout(() =&gt; { if (!hasAutoScrolled) scrollTitleIntoView(false); }, 60);&#10;    });&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [gem.id]);&#10;&#10;  // Se l'immagine carica dopo e non abbiamo ancora auto-scrollato, riallinea&#10;  const handleImageLoad = () =&gt; {&#10;    if (!hasAutoScrolled) scrollTitleIntoView(false);&#10;  };&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  // --- Rendering contenuti template ---&#10;  const renderMiniThread = (content: any) =&gt; {&#10;    const steps = Array.isArray(content.steps) ? content.steps : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {steps.map((s: any, idx: number) =&gt; (&#10;            &lt;div key={idx} className=&quot;relative pl-10&quot;&gt;&#10;              &lt;div className=&quot;absolute left-0 top-0 flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 rounded-full bg-indigo-600 text-white flex items-center justify-center text-sm font-semibold shadow&quot;&gt;{idx+1}&lt;/div&gt;&#10;                {idx &lt; steps.length -1 &amp;&amp; &lt;div className=&quot;flex-1 w-px bg-gradient-to-b from-indigo-400 via-indigo-300 to-transparent mt-1&quot;/&gt;}&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-slate-900 dark:text-white&quot;&gt;{s.title}&lt;/h3&gt;&#10;              &lt;p className=&quot;mt-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{s.body}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        {content.payoff &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-emerald-500/10 via-emerald-500/5 to-indigo-500/10 border border-emerald-400/30 dark:border-emerald-400/20&quot;&gt;&#10;            &lt;div className=&quot;flex items-start&quot;&gt;&#10;              &lt;SparklesIcon className=&quot;w-6 h-6 text-emerald-500 mr-3 mt-0.5&quot;/&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-sm uppercase tracking-wide font-semibold text-emerald-600 dark:text-emerald-400&quot;&gt;Payoff&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1 font-medium text-slate-900 dark:text-slate-100 leading-relaxed&quot;&gt;{content.payoff}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderMythVsReality = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-600 dark:text-rose-300&quot;&gt;Mito&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-rose-800 dark:text-rose-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.myth}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 relative overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;absolute inset-0 pointer-events-none bg-[radial-gradient(circle_at_80%_20%,rgba(16,185,129,0.15),transparent_60%)]&quot;/&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-600 dark:text-emerald-300&quot;&gt;Realtà&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-emerald-800 dark:text-emerald-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.reality}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.evidence &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Evidenze&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.evidence}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.why_it_matters &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-violet-500/10 to-fuchsia-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Perché conta&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 leading-relaxed whitespace-pre-wrap&quot;&gt;{content.why_it_matters}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderFactCard = (content: any) =&gt; {&#10;    const facts: string[] = Array.isArray(content.facts) ? content.facts : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-5&quot;&gt;&#10;        {content.hook &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-br from-indigo-600 to-violet-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-semibold tracking-wide uppercase opacity-90&quot;&gt;Dato Chiave&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-lg leading-snug font-bold whitespace-pre-wrap&quot;&gt;{content.hook}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {facts.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;grid gap-3&quot;&gt;&#10;            {facts.map((f, i) =&gt; (&#10;              &lt;div key={i} className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex&quot;&gt;&#10;                &lt;div className=&quot;mr-3 mt-0.5 text-indigo-500 font-semibold text-xs&quot;&gt;FACT {i+1}&lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{f}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.implication &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-amber-700 dark:text-amber-300&quot;&gt;Implicazione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-amber-900 dark:text-amber-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.implication}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.action &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Azione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm font-medium text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.action}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderProsCons = (content: any) =&gt; {&#10;    const pros: string[] = Array.isArray(content.pros) ? content.pros : [];&#10;    const cons: string[] = Array.isArray(content.cons) ? content.cons : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.scenario &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Scenario&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.scenario}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Pro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-emerald-900 dark:text-emerald-100&quot;&gt;&#10;              {pros.map((p,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-emerald-500 font-semibold&quot;&gt;+&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{p}&lt;/span&gt;&lt;/li&gt;))}&#10;              {pros.length===0 &amp;&amp; &lt;li className=&quot;text-emerald-700/70 dark:text-emerald-300/60 italic&quot;&gt;Nessun pro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Contro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-rose-900 dark:text-rose-100&quot;&gt;&#10;              {cons.map((c,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-rose-500 font-semibold&quot;&gt;-&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{c}&lt;/span&gt;&lt;/li&gt;))}&#10;              {cons.length===0 &amp;&amp; &lt;li className=&quot;text-rose-700/70 dark:text-rose-300/60 italic&quot;&gt;Nessun contro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.advice &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-sky-500/10 to-emerald-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Sintesi / Consiglio&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.advice}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderQuickExplainer = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.analogy &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-indigo-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide opacity-80&quot;&gt;Analogia Guida&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-lg font-bold leading-snug whitespace-pre-wrap&quot;&gt;{content.analogy}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.definition &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Definizione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.definition}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          {content.example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Esempio&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {content.anti_example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Non È Questo&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-rose-900 dark:text-rose-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.anti_example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        {content.takeaway &amp;&amp; (&#10;            &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10 border border-fuchsia-300/30 dark:border-fuchsia-300/20&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-fuchsia-600 dark:text-fuchsia-300&quot;&gt;Takeaway&lt;/p&gt;&#10;              &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.takeaway}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return renderMiniThread(content);&#10;      case 'myth_vs_reality':&#10;        return renderMythVsReality(content);&#10;      case 'fact_card':&#10;        return renderFactCard(content);&#10;      case 'pros_cons':&#10;        return renderProsCons(content);&#10;      case 'quick_explainer':&#10;        return renderQuickExplainer(content);&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  // --- fine rendering contenuti template ---&#10;&#10;  // Testo completo del saggio (nuovo: può essere in gem.content.description)&#10;  const fullDescription: string | undefined = (gem as any)?.content?.description;&#10;&#10;  // Utility: segmentazione in paragrafi leggibili (solo visualizzazione)&#10;  const buildParagraphs = (text?: string): string[] =&gt; {&#10;    if (!text) return [];&#10;    const normalized = text.replace(/\r\n?/g, '\n').trim();&#10;    // Se l'autore ha già usato paragrafi (doppie newline) rispetta quelli&#10;    const explicit = normalized.split(/\n{2,}/).map(p =&gt; p.trim()).filter(Boolean);&#10;    if (explicit.length &gt; 1) return explicit;&#10;    // Altrimenti suddividi per punto + spazio + Maiuscola (mantieni il punto)&#10;    const periodSplit = normalized&#10;      // comprime whitespace multiplo a singolo spazio per consistenza&#10;      .replace(/\n+/g, ' ')&#10;      .replace(/\s{2,}/g, ' ')&#10;      .split(/(?&lt;=\.)\s+(?=[A-ZÀ-ÖØ-Ý])/)&#10;      .map(s =&gt; s.trim())&#10;      .filter(Boolean);&#10;    if (periodSplit.length &gt; 1) return periodSplit;&#10;    // fallback: ritorna intero blocco&#10;    return [normalized];&#10;  };&#10;&#10;  const paragraphs = buildParagraphs(fullDescription);&#10;&#10;  // Calcolo tempo di lettura (200 wpm medio)&#10;  const readingTime = (() =&gt; {&#10;    if (!fullDescription) return null;&#10;    const words = fullDescription.trim().split(/\s+/).filter(Boolean).length;&#10;    const WPM = 200; // media adulti IT&#10;    const minutesFloat = words / WPM;&#10;    const minutes = Math.floor(minutesFloat);&#10;    const seconds = Math.round((minutesFloat - minutes) * 60);&#10;    const display = minutes &lt; 1 ? `${seconds &lt; 10 ? '~15s' : `${seconds}s`}` : `${minutes} min${minutes === 1 ? '' : ''}${seconds &gt;= 30 &amp;&amp; minutes &lt; 10 ? ' +' : ''}`;&#10;    return { words, minutes, seconds, display };&#10;  })();&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={onBack}&#10;        /&gt;&#10;        &lt;article&gt;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                {/* Immagine prima */}&#10;                &lt;img ref={imgRef} src={gem.imageUrl} alt={gem.title} onLoad={handleImageLoad} className=&quot;w-full h-auto object-cover md:rounded-lg&quot; /&gt;&#10;                {/* Titolo sotto immagine (ancora) */}&#10;                &lt;h1 id=&quot;gem-title&quot; className=&quot;mt-4 text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={handleShare}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Tabs Tips / Saggio */}&#10;                &lt;div className=&quot;mt-8 flex justify-end&quot;&gt;&#10;                  &lt;div className=&quot;inline-flex items-center gap-1 rounded-full bg-slate-100 dark:bg-slate-800 p-1 shadow-inner ring-1 ring-slate-200/60 dark:ring-slate-700/60&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('tips')}&#10;                      aria-pressed={activeTab==='tips'}&#10;                      title=&quot;Vista Tips (strutturata)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='tips' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;LightBulbIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='tips' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('saggio')}&#10;                      aria-pressed={activeTab==='saggio'}&#10;                      title=&quot;Vista Saggio (testo completo)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='saggio' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;BookOpenIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='saggio' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;mt-6 relative&quot; style={{ height: contentHeight ? contentHeight : undefined }}&gt;&#10;                  {/* Pannello Tips */}&#10;                  &lt;div&#10;                    ref={tipsRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='tips' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {(() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                      &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription || ''}&lt;/p&gt;&#10;                    ); })()}&#10;                  &lt;/div&gt;&#10;                  {/* Pannello Saggio */}&#10;                  &lt;div&#10;                    ref={saggioRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='saggio' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {fullDescription ? (&#10;                      paragraphs.length &gt; 0 ? (&#10;                        &lt;div className=&quot;prose prose-slate dark:prose-invert max-w-none&quot;&gt;&#10;                          {readingTime &amp;&amp; (&#10;                            &lt;div className=&quot;mb-6 flex items-center text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400 gap-3&quot;&gt;&#10;                              &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 font-semibold&quot;&gt;⏱ {readingTime.display}&lt;/span&gt;&#10;                              &lt;span className=&quot;text-slate-400 dark:text-slate-500&quot;&gt;{readingTime.words} parole&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                          {paragraphs.map((p, i) =&gt; {&#10;                            const isKey = p.includes(':') || /—/.test(p);&#10;                            return (&#10;                              &lt;p&#10;                                key={i}&#10;                                className={`text-base md:text-lg leading-relaxed md:leading-loose tracking-[0.015em] text-slate-700 dark:text-slate-300 text-justify hyphens-auto break-words mb-5 last:mb-0 ${i===0 ? 'first-letter:text-4xl first-letter:font-semibold first-letter:float-left first-letter:mr-2 first-letter:mt-1 first-letter:leading-[0.9]' : ''} ${isKey ? 'border-l-2 border-indigo-300 dark:border-indigo-500 pl-3 bg-indigo-50/40 dark:bg-indigo-500/5 rounded-sm' : ''}`}&#10;                                style={{ hyphens: 'auto' }}&#10;                              &gt;&#10;                                {p}&#10;                              &lt;/p&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription}&lt;/p&gt;&#10;                      )&#10;                    ) : (&#10;                      &lt;p className=&quot;italic text-slate-500 dark:text-slate-400&quot;&gt;Nessun testo disponibile.&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Fonti */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef } from 'react';&#10;import { Gem, UserQuestion, User, Filter, Channel } from '../types';&#10;import { ChevronLeftIcon, HeartIcon, ShareIcon, PaperAirplaneIcon, SparklesIcon, PlusCircleIcon, TagIcon, LinkIcon, ChevronDownIcon, LightBulbIcon, BookOpenIcon, FacebookIcon, InstagramIcon, WhatsappIcon, MailIcon, CopyIcon } from './icons';&#10;import { trackEvent } from '../services/firebase';&#10;import { usePageMeta } from '../hooks/usePageMeta';&#10;import Header from './Header';&#10;&#10;interface GemDetailViewProps {&#10;  gem: Gem;&#10;  isFavorite: boolean;&#10;  isLoggedIn: boolean;&#10;  user?: User | null;&#10;  onBack: () =&gt; void;&#10;  onSaveRequest: (gemId: string) =&gt; void;&#10;  onRemoveRequest: (gemId: string) =&gt; void;&#10;  onAddUserQuestion: (gemId: string, question: string) =&gt; void;&#10;  onTagSelect: (tag: string) =&gt; void;&#10;  onLogin: () =&gt; void;&#10;  onLogout: () =&gt; void;&#10;  onNavigate: (view: 'feed' | 'saved' | 'profile' | 'dashboard' | 'topics') =&gt; void;&#10;  selectedFilter?: Filter;&#10;  onSelectFilter?: (filter: Filter) =&gt; void;&#10;  channels?: Channel[];&#10;}&#10;&#10;const UserQuestionItem: React.FC&lt;{ userQuestion: UserQuestion }&gt; = ({ userQuestion }) =&gt; (&#10;    &lt;div className=&quot;mt-4 p-4 bg-slate-100 dark:bg-slate-800 rounded-lg&quot;&gt;&#10;        &lt;p className=&quot;font-semibold text-sm text-slate-600 dark:text-slate-300&quot;&gt;Domanda: &lt;span className=&quot;font-normal&quot;&gt;{userQuestion.question}&lt;/span&gt;&lt;/p&gt;&#10;        &lt;div className=&quot;mt-2 text-sm text-slate-800 dark:text-slate-200&quot;&gt;&#10;            {userQuestion.isGenerating ? (&#10;                 &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                    &lt;SparklesIcon className=&quot;w-4 h-4 animate-pulse text-indigo-400&quot; /&gt;&#10;                    &lt;span&gt;Generazione risposta...&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            ) : (&#10;                &lt;p className=&quot;whitespace-pre-wrap&quot;&gt;{userQuestion.answer}&lt;/p&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;);&#10;&#10;const GemDetailView: React.FC&lt;GemDetailViewProps&gt; = ({ gem, isFavorite, onBack, onSaveRequest, onRemoveRequest, onAddUserQuestion, onTagSelect, isLoggedIn, user, onLogin, onLogout, onNavigate, selectedFilter, onSelectFilter, channels }) =&gt; {&#10;  const [userQuestion, setUserQuestion] = useState('');&#10;  const [isSourcesOpen, setIsSourcesOpen] = useState(false);&#10;  const [hasAutoScrolled, setHasAutoScrolled] = useState(false);&#10;  const imgRef = useRef&lt;HTMLImageElement | null&gt;(null);&#10;  // nuovo stato per tab&#10;  const [activeTab, setActiveTab] = useState&lt;'tips' | 'saggio'&gt;('tips');&#10;  // refs per animazione cross-fade&#10;  const tipsRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const saggioRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;  const [contentHeight, setContentHeight] = useState&lt;number&gt;(0);&#10;  const [showShareBar, setShowShareBar] = useState(false);&#10;&#10;  const currentUrl = typeof window !== 'undefined' ? `${window.location.origin}/gem/${gem.id}` : '';&#10;  const rawSummary: string = (gem as any)?.content?.summary || '';&#10;  const rawDescription: string = (gem as any)?.content?.description || '';&#10;  const baseText = rawSummary || rawDescription;&#10;  const descriptionSnippet = baseText ? baseText.replace(/\s+/g,' ').slice(0,180) : 'Gemme di conoscenza su Curiow.';&#10;  const shareText = `Scopri questa gemma su Curiow: ${gem.title}`;&#10;&#10;  usePageMeta({&#10;    title: `${gem.title} | Curiow`,&#10;    description: descriptionSnippet,&#10;    image: gem.imageUrl,&#10;    url: currentUrl,&#10;    type: 'article'&#10;  });&#10;&#10;  const handleCopyLink = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(currentUrl);&#10;    } catch {&#10;      const tmp = document.createElement('input');&#10;      tmp.value = currentUrl; document.body.appendChild(tmp); tmp.select(); document.execCommand('copy'); document.body.removeChild(tmp);&#10;    }&#10;    trackEvent('share', { channel: 'copy_link', gem_id: gem.id });&#10;    alert('Link copiato!');&#10;  };&#10;&#10;  const handleNativeShare = async () =&gt; {&#10;    if (navigator.share) {&#10;      trackEvent('share_attempt', { channel: 'web_share', gem_id: gem.id });&#10;      try { &#10;        await navigator.share({ title: gem.title, text: shareText, url: currentUrl }); &#10;        trackEvent('share', { channel: 'web_share', gem_id: gem.id });&#10;      } catch { /* annullato */ }&#10;    } else {&#10;      handleCopyLink();&#10;    }&#10;  };&#10;&#10;  const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;&#10;  const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + currentUrl)}`;&#10;  const emailUrl = `mailto:?subject=${encodeURIComponent('Consiglio: ' + gem.title)}&amp;body=${encodeURIComponent(shareText + '\n' + currentUrl)}`;&#10;  // Instagram non ha share URL web: fallback copia link&#10;&#10;  // funzione misura altezza contenuto attivo&#10;  const measureActiveHeight = () =&gt; {&#10;    const el = activeTab === 'tips' ? tipsRef.current : saggioRef.current;&#10;    if (el) {&#10;      // usa scrollHeight per includere overflow&#10;      const h = el.scrollHeight;&#10;      setContentHeight(h);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    // misura dopo cambio tab / gem&#10;    requestAnimationFrame(() =&gt; measureActiveHeight());&#10;  }, [activeTab, gem.id]);&#10;&#10;  useEffect(() =&gt; {&#10;    // misura al resize per mantenere altezza coerente&#10;    const onResize = () =&gt; measureActiveHeight();&#10;    window.addEventListener('resize', onResize);&#10;    return () =&gt; window.removeEventListener('resize', onResize);&#10;  }, []);&#10;&#10;  // Funzione per scrollare il titolo allineandolo appena sotto l'header sticky&#10;  const scrollTitleIntoView = (smooth = false) =&gt; {&#10;    const titleEl = document.getElementById('gem-title');&#10;    if (!titleEl) return;&#10;    const headerEl = document.querySelector('header');&#10;    const headerHeight = headerEl ? (headerEl as HTMLElement).offsetHeight : 0;&#10;    const buffer = 8; // piccolo margine&#10;    const target = titleEl.getBoundingClientRect().top + window.scrollY - headerHeight - buffer;&#10;    window.scrollTo({ top: target &gt;= 0 ? target : 0, behavior: smooth ? 'smooth' : 'auto' });&#10;    setHasAutoScrolled(true);&#10;  };&#10;&#10;  // Scroll iniziale dopo mount/cambio gem (post layout)&#10;  useEffect(() =&gt; {&#10;    setHasAutoScrolled(false);&#10;    // Usa rAF per attendere layout, poi ulteriore timeout breve per carichi asincroni minimi&#10;    requestAnimationFrame(() =&gt; {&#10;      scrollTitleIntoView(false);&#10;      setTimeout(() =&gt; { if (!hasAutoScrolled) scrollTitleIntoView(false); }, 60);&#10;    });&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [gem.id]);&#10;&#10;  // Se l'immagine carica dopo e non abbiamo ancora auto-scrollato, riallinea&#10;  const handleImageLoad = () =&gt; {&#10;    if (!hasAutoScrolled) scrollTitleIntoView(false);&#10;  };&#10;&#10;  const handleUserQuestionSubmit = (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (userQuestion.trim()) {&#10;      onAddUserQuestion(gem.id, userQuestion.trim());&#10;      setUserQuestion('');&#10;    }&#10;  };&#10;&#10;  const handleShare = () =&gt; {&#10;    navigator.clipboard.writeText(`Scopri questa gemma di conoscenza: &quot;${gem.title}&quot; su Curiow!`);&#10;    alert(&quot;Contenuto copiato negli appunti!&quot;);&#10;  };&#10;&#10;  const handleFilterSelect = (filter: Filter) =&gt; {&#10;    if (onSelectFilter) onSelectFilter(filter);&#10;    if (filter.type === 'channel') {&#10;      onNavigate('feed');&#10;    }&#10;  };&#10;&#10;  // --- Rendering contenuti template ---&#10;  const renderMiniThread = (content: any) =&gt; {&#10;    const steps = Array.isArray(content.steps) ? content.steps : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {steps.map((s: any, idx: number) =&gt; (&#10;            &lt;div key={idx} className=&quot;relative pl-10&quot;&gt;&#10;              &lt;div className=&quot;absolute left-0 top-0 flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 rounded-full bg-indigo-600 text-white flex items-center justify-center text-sm font-semibold shadow&quot;&gt;{idx+1}&lt;/div&gt;&#10;                {idx &lt; steps.length -1 &amp;&amp; &lt;div className=&quot;flex-1 w-px bg-gradient-to-b from-indigo-400 via-indigo-300 to-transparent mt-1&quot;/&gt;}&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-slate-900 dark:text-white&quot;&gt;{s.title}&lt;/h3&gt;&#10;              &lt;p className=&quot;mt-1 text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{s.body}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;        {content.payoff &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-emerald-500/10 via-emerald-500/5 to-indigo-500/10 border border-emerald-400/30 dark:border-emerald-400/20&quot;&gt;&#10;            &lt;div className=&quot;flex items-start&quot;&gt;&#10;              &lt;SparklesIcon className=&quot;w-6 h-6 text-emerald-500 mr-3 mt-0.5&quot;/&gt;&#10;              &lt;div&gt;&#10;                &lt;p className=&quot;text-sm uppercase tracking-wide font-semibold text-emerald-600 dark:text-emerald-400&quot;&gt;Payoff&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1 font-medium text-slate-900 dark:text-slate-100 leading-relaxed&quot;&gt;{content.payoff}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderMythVsReality = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-600 dark:text-rose-300&quot;&gt;Mito&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-rose-800 dark:text-rose-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.myth}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800 relative overflow-hidden&quot;&gt;&#10;            &lt;div className=&quot;absolute inset-0 pointer-events-none bg-[radial-gradient(circle_at_80%_20%,rgba(16,185,129,0.15),transparent_60%)]&quot;/&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-600 dark:text-emerald-300&quot;&gt;Realtà&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-emerald-800 dark:text-emerald-200 font-medium leading-relaxed whitespace-pre-wrap&quot;&gt;{content.reality}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.evidence &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Evidenze&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.evidence}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.why_it_matters &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-violet-500/10 to-fuchsia-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Perché conta&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 leading-relaxed whitespace-pre-wrap&quot;&gt;{content.why_it_matters}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderFactCard = (content: any) =&gt; {&#10;    const facts: string[] = Array.isArray(content.facts) ? content.facts : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-5&quot;&gt;&#10;        {content.hook &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-br from-indigo-600 to-violet-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-sm font-semibold tracking-wide uppercase opacity-90&quot;&gt;Dato Chiave&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-lg leading-snug font-bold whitespace-pre-wrap&quot;&gt;{content.hook}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {facts.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;grid gap-3&quot;&gt;&#10;            {facts.map((f, i) =&gt; (&#10;              &lt;div key={i} className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex&quot;&gt;&#10;                &lt;div className=&quot;mr-3 mt-0.5 text-indigo-500 font-semibold text-xs&quot;&gt;FACT {i+1}&lt;/div&gt;&#10;                &lt;p className=&quot;text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{f}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.implication &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-amber-700 dark:text-amber-300&quot;&gt;Implicazione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-amber-900 dark:text-amber-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.implication}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.action &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Azione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm font-medium text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.action}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderProsCons = (content: any) =&gt; {&#10;    const pros: string[] = Array.isArray(content.pros) ? content.pros : [];&#10;    const cons: string[] = Array.isArray(content.cons) ? content.cons : [];&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.scenario &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Scenario&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.scenario}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Pro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-emerald-900 dark:text-emerald-100&quot;&gt;&#10;              {pros.map((p,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-emerald-500 font-semibold&quot;&gt;+&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{p}&lt;/span&gt;&lt;/li&gt;))}&#10;              {pros.length===0 &amp;&amp; &lt;li className=&quot;text-emerald-700/70 dark:text-emerald-300/60 italic&quot;&gt;Nessun pro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;p-5 rounded-xl bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-bold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Contro&lt;/p&gt;&#10;            &lt;ul className=&quot;mt-2 space-y-2 text-sm text-rose-900 dark:text-rose-100&quot;&gt;&#10;              {cons.map((c,i)=&gt;(&lt;li key={i} className=&quot;flex&quot;&gt;&lt;span className=&quot;mr-2 text-rose-500 font-semibold&quot;&gt;-&lt;/span&gt;&lt;span className=&quot;flex-1 whitespace-pre-wrap leading-relaxed&quot;&gt;{c}&lt;/span&gt;&lt;/li&gt;))}&#10;              {cons.length===0 &amp;&amp; &lt;li className=&quot;text-rose-700/70 dark:text-rose-300/60 italic&quot;&gt;Nessun contro indicato.&lt;/li&gt;}&#10;            &lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {content.advice &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-indigo-500/10 via-sky-500/10 to-emerald-500/10 border border-indigo-300/30 dark:border-indigo-300/20&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-indigo-600 dark:text-indigo-300&quot;&gt;Sintesi / Consiglio&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.advice}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderQuickExplainer = (content: any) =&gt; {&#10;    return (&#10;      &lt;div className=&quot;mt-6 space-y-6&quot;&gt;&#10;        {content.analogy &amp;&amp; (&#10;          &lt;div className=&quot;p-5 rounded-xl bg-indigo-600 text-white shadow&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide opacity-80&quot;&gt;Analogia Guida&lt;/p&gt;&#10;            &lt;p className=&quot;mt-2 text-lg font-bold leading-snug whitespace-pre-wrap&quot;&gt;{content.analogy}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        {content.definition &amp;&amp; (&#10;          &lt;div className=&quot;p-4 rounded-lg bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700&quot;&gt;&#10;            &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400&quot;&gt;Definizione&lt;/p&gt;&#10;            &lt;p className=&quot;mt-1 text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.definition}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &lt;div className=&quot;grid md:grid-cols-2 gap-4&quot;&gt;&#10;          {content.example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-emerald-50 dark:bg-emerald-900/20 border border-emerald-200 dark:border-emerald-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-emerald-700 dark:text-emerald-300&quot;&gt;Esempio&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-emerald-900 dark:text-emerald-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          {content.anti_example &amp;&amp; (&#10;            &lt;div className=&quot;p-4 rounded-lg bg-rose-50 dark:bg-rose-900/20 border border-rose-200 dark:border-rose-800&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-rose-700 dark:text-rose-300&quot;&gt;Non È Questo&lt;/p&gt;&#10;              &lt;p className=&quot;mt-1 text-sm text-rose-900 dark:text-rose-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.anti_example}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        {content.takeaway &amp;&amp; (&#10;            &lt;div className=&quot;p-5 rounded-xl bg-gradient-to-r from-fuchsia-500/10 via-violet-500/10 to-indigo-500/10 border border-fuchsia-300/30 dark:border-fuchsia-300/20&quot;&gt;&#10;              &lt;p className=&quot;text-xs font-semibold uppercase tracking-wide text-fuchsia-600 dark:text-fuchsia-300&quot;&gt;Takeaway&lt;/p&gt;&#10;              &lt;p className=&quot;mt-2 font-medium text-slate-900 dark:text-slate-100 whitespace-pre-wrap leading-relaxed&quot;&gt;{content.takeaway}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  const renderStructuredContent = () =&gt; {&#10;    const content = (gem as any).content;&#10;    if (!content || !content.template) return null;&#10;    switch (content.template) {&#10;      case 'mini_thread':&#10;        return renderMiniThread(content);&#10;      case 'myth_vs_reality':&#10;        return renderMythVsReality(content);&#10;      case 'fact_card':&#10;        return renderFactCard(content);&#10;      case 'pros_cons':&#10;        return renderProsCons(content);&#10;      case 'quick_explainer':&#10;        return renderQuickExplainer(content);&#10;      default:&#10;        return null;&#10;    }&#10;  };&#10;  // --- fine rendering contenuti template ---&#10;&#10;  // Testo completo del saggio (nuovo: può essere in gem.content.description)&#10;  const fullDescription: string | undefined = (gem as any)?.content?.description;&#10;&#10;  // Utility: segmentazione in paragrafi leggibili (solo visualizzazione)&#10;  const buildParagraphs = (text?: string): string[] =&gt; {&#10;    if (!text) return [];&#10;    const normalized = text.replace(/\r\n?/g, '\n').trim();&#10;    // Se l'autore ha già usato paragrafi (doppie newline) rispetta quelli&#10;    const explicit = normalized.split(/\n{2,}/).map(p =&gt; p.trim()).filter(Boolean);&#10;    if (explicit.length &gt; 1) return explicit;&#10;    // Altrimenti suddividi per punto + spazio + Maiuscola (mantieni il punto)&#10;    const periodSplit = normalized&#10;      // comprime whitespace multiplo a singolo spazio per consistenza&#10;      .replace(/\n+/g, ' ')&#10;      .replace(/\s{2,}/g, ' ')&#10;      .split(/(?&lt;=\.)\s+(?=[A-ZÀ-ÖØ-Ý])/)&#10;      .map(s =&gt; s.trim())&#10;      .filter(Boolean);&#10;    if (periodSplit.length &gt; 1) return periodSplit;&#10;    // fallback: ritorna intero blocco&#10;    return [normalized];&#10;  };&#10;&#10;  const paragraphs = buildParagraphs(fullDescription);&#10;&#10;  // Calcolo tempo di lettura (200 wpm medio)&#10;  const readingTime = (() =&gt; {&#10;    if (!fullDescription) return null;&#10;    const words = fullDescription.trim().split(/\s+/).filter(Boolean).length;&#10;    const WPM = 200; // media adulti IT&#10;    const minutesFloat = words / WPM;&#10;    const minutes = Math.floor(minutesFloat);&#10;    const seconds = Math.round((minutesFloat - minutes) * 60);&#10;    const display = minutes &lt; 1 ? `${seconds &lt; 10 ? '~15s' : `${seconds}s`}` : `${minutes} min${minutes === 1 ? '' : ''}${seconds &gt;= 30 &amp;&amp; minutes &lt; 10 ? ' +' : ''}`;&#10;    return { words, minutes, seconds, display };&#10;  })();&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-2xl mx-auto&quot;&gt;&#10;        &lt;Header&#10;          isLoggedIn={isLoggedIn}&#10;          user={user}&#10;          onLogin={onLogin}&#10;          onLogout={onLogout}&#10;          onNavigate={onNavigate}&#10;          showFilters={true}&#10;          selectedFilter={selectedFilter}&#10;          onSelectFilter={handleFilterSelect}&#10;          channels={channels}&#10;          initialFiltersOpen={false}&#10;          onBack={onBack}&#10;        /&gt;&#10;        &lt;article&gt;&#10;            &lt;div className=&quot;p-5 sm:p-8&quot;&gt;&#10;                {/* Immagine prima */}&#10;                &lt;img ref={imgRef} src={gem.imageUrl} alt={gem.title} onLoad={handleImageLoad} className=&quot;w-full h-auto object-cover md:rounded-lg&quot; /&gt;&#10;                {/* Titolo sotto immagine (ancora) */}&#10;                &lt;h1 id=&quot;gem-title&quot; className=&quot;mt-4 text-2xl lg:text-3xl font-bold text-slate-900 dark:text-white leading-tight&quot;&gt;{gem.title}&lt;/h1&gt;&#10;&#10;                &lt;div className=&quot;mt-4 flex flex-wrap gap-x-4 gap-y-2 items-center&quot;&gt;&#10;                    &lt;button&#10;                        onClick={() =&gt; isFavorite ? onRemoveRequest(gem.id) : onSaveRequest(gem.id)}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-red-500 dark:hover:text-red-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;HeartIcon className={`w-6 h-6 ${isFavorite ? 'fill-red-500 text-red-500' : ''}`} /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;{isFavorite ? 'Rimuovi' : 'Salva'}&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                        onClick={()=&gt; setShowShareBar(v=&gt;{const nv=!v; trackEvent('share_bar_toggle',{ open: nv, gem_id: gem.id }); return nv;})}&#10;                        className=&quot;flex items-center space-x-1.5 text-slate-600 dark:text-slate-300 hover:text-indigo-500 dark:hover:text-indigo-400 transition-colors&quot;&#10;                    &gt;&#10;                        &lt;ShareIcon className=&quot;w-6 h-6&quot; /&gt;&#10;                        &lt;span className=&quot;text-sm font-medium&quot;&gt;Condividi&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    {navigator.share &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={handleNativeShare}&#10;                        className=&quot;hidden sm:inline-flex items-center space-x-1.5 text-slate-500 dark:text-slate-400 hover:text-indigo-500 dark:hover:text-indigo-400 text-xs&quot;&#10;                      &gt;&#10;                        &lt;span&gt;Share rapido&lt;/span&gt;&#10;                      &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;                {showShareBar &amp;&amp; (&#10;                  &lt;div className=&quot;mt-3 flex flex-wrap gap-2 items-center animate-fade-in&quot;&gt;&#10;                    &lt;a href={facebookUrl} onClick={()=&gt;trackEvent('share',{channel:'facebook', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Facebook&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-indigo-100 dark:hover:bg-indigo-700 text-[#1877F2] transition-colors&quot; aria-label=&quot;Condividi su Facebook&quot;&gt;&#10;                      &lt;FacebookIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={()=&gt;{handleCopyLink(); trackEvent('share',{channel:'instagram_copy', gem_id: gem.id});}} title=&quot;Instagram (copia link)&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-pink-100 dark:hover:bg-pink-700 text-pink-500 transition-colors&quot; aria-label=&quot;Condividi su Instagram (copia link)&quot;&gt;&#10;                      &lt;InstagramIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;a href={whatsappUrl} onClick={()=&gt;trackEvent('share',{channel:'whatsapp', gem_id: gem.id})} target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;WhatsApp&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-emerald-100 dark:hover:bg-emerald-700 text-emerald-500 transition-colors&quot; aria-label=&quot;Condividi su WhatsApp&quot;&gt;&#10;                      &lt;WhatsappIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;a href={emailUrl} onClick={()=&gt;trackEvent('share',{channel:'email', gem_id: gem.id})} title=&quot;Email&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-blue-100 dark:hover:bg-blue-700 text-indigo-500 transition-colors&quot; aria-label=&quot;Condividi via Email&quot;&gt;&#10;                      &lt;MailIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/a&gt;&#10;                    &lt;button onClick={handleCopyLink} title=&quot;Copia link&quot; className=&quot;p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 text-slate-600 dark:text-slate-300 transition-colors&quot; aria-label=&quot;Copia link&quot;&gt;&#10;                      &lt;CopyIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {gem.tags &amp;&amp; gem.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;mt-4 flex flex-wrap gap-2 items-center&quot;&gt;&#10;                        &lt;TagIcon className=&quot;w-5 h-5 text-slate-400 dark:text-slate-500&quot;/&gt;&#10;                        {gem.tags.map(tag =&gt; (&#10;                            &lt;button &#10;                                key={tag} &#10;                                onClick={() =&gt; onTagSelect(tag)}&#10;                                className=&quot;px-2.5 py-1 bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full text-xs font-semibold hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors&quot;&#10;                            &gt;&#10;                                {tag}&#10;                            &lt;/button&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Tabs Tips / Saggio */}&#10;                &lt;div className=&quot;mt-8 flex justify-end&quot;&gt;&#10;                  &lt;div className=&quot;inline-flex items-center gap-1 rounded-full bg-slate-100 dark:bg-slate-800 p-1 shadow-inner ring-1 ring-slate-200/60 dark:ring-slate-700/60&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('tips')}&#10;                      aria-pressed={activeTab==='tips'}&#10;                      title=&quot;Vista Tips (strutturata)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='tips' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;LightBulbIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='tips' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; setActiveTab('saggio')}&#10;                      aria-pressed={activeTab==='saggio'}&#10;                      title=&quot;Vista Saggio (testo completo)&quot;&#10;                      className={`relative flex items-center justify-center w-9 h-9 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-indigo-400 dark:focus:ring-indigo-500 group ${activeTab==='saggio' ? 'bg-gradient-to-tr from-indigo-500 to-violet-500 text-white shadow-md' : 'text-slate-500 dark:text-slate-400 hover:text-indigo-600 dark:hover:text-indigo-300'}`}&#10;                    &gt;&#10;                      &lt;BookOpenIcon className=&quot;w-5 h-5&quot; /&gt;&#10;                      {activeTab==='saggio' &amp;&amp; &lt;span className=&quot;absolute -bottom-1 h-1 w-4 rounded-full bg-white/70 dark:bg-white/40&quot;/&gt;}&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;mt-6 relative&quot; style={{ height: contentHeight ? contentHeight : undefined }}&gt;&#10;                  {/* Pannello Tips */}&#10;                  &lt;div&#10;                    ref={tipsRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='tips' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {(() =&gt; { const structuredContent = renderStructuredContent(); return structuredContent ? structuredContent : (&#10;                      &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription || ''}&lt;/p&gt;&#10;                    ); })()}&#10;                  &lt;/div&gt;&#10;                  {/* Pannello Saggio */}&#10;                  &lt;div&#10;                    ref={saggioRef}&#10;                    className={`absolute inset-0 transition-opacity duration-400 ease-in-out ${activeTab==='saggio' ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-visible`}&#10;                  &gt;&#10;                    {fullDescription ? (&#10;                      paragraphs.length &gt; 0 ? (&#10;                        &lt;div className=&quot;prose prose-slate dark:prose-invert max-w-none&quot;&gt;&#10;                          {readingTime &amp;&amp; (&#10;                            &lt;div className=&quot;mb-6 flex items-center text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400 gap-3&quot;&gt;&#10;                              &lt;span className=&quot;inline-flex items-center px-2 py-1 rounded-full bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 font-semibold&quot;&gt;⏱ {readingTime.display}&lt;/span&gt;&#10;                              &lt;span className=&quot;text-slate-400 dark:text-slate-500&quot;&gt;{readingTime.words} parole&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          )}&#10;                          {paragraphs.map((p, i) =&gt; {&#10;                            const isKey = p.includes(':') || /—/.test(p);&#10;                            return (&#10;                              &lt;p&#10;                                key={i}&#10;                                className={`text-base md:text-lg leading-relaxed md:leading-loose tracking-[0.015em] text-slate-700 dark:text-slate-300 text-justify hyphens-auto break-words mb-5 last:mb-0 ${i===0 ? 'first-letter:text-4xl first-letter:font-semibold first-letter:float-left first-letter:mr-2 first-letter:mt-1 first-letter:leading-[0.9]' : ''} ${isKey ? 'border-l-2 border-indigo-300 dark:border-indigo-500 pl-3 bg-indigo-50/40 dark:bg-indigo-500/5 rounded-sm' : ''}`}&#10;                                style={{ hyphens: 'auto' }}&#10;                              &gt;&#10;                                {p}&#10;                              &lt;/p&gt;&#10;                            );&#10;                          })}&#10;                        &lt;/div&gt;&#10;                      ) : (&#10;                        &lt;p className=&quot;text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap&quot;&gt;{fullDescription}&lt;/p&gt;&#10;                      )&#10;                    ) : (&#10;                      &lt;p className=&quot;italic text-slate-500 dark:text-slate-400&quot;&gt;Nessun testo disponibile.&lt;/p&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Fonti */}&#10;                {(() =&gt; { const sources = (gem as any).search_results &amp;&amp; (gem as any).search_results.length &gt; 0 ? (gem as any).search_results : gem.sources; return sources &amp;&amp; sources.length &gt; 0 &amp;&amp; (&#10;                    &lt;section className=&quot;mt-10 border-t border-slate-200 dark:border-slate-700 pt-6&quot;&gt;&#10;                         &lt;button&#10;                            onClick={() =&gt; setIsSourcesOpen(!isSourcesOpen)}&#10;                            className=&quot;w-full flex justify-between items-center text-left&quot;&#10;                            aria-expanded={isSourcesOpen}&#10;                         &gt;&#10;                            &lt;h2 className=&quot;text-lg font-bold text-slate-900 dark:text-white flex items-center&quot;&gt;&#10;                                &lt;LinkIcon className=&quot;w-5 h-5 mr-2 text-slate-500&quot;/&gt;&#10;                                Fonti&#10;                            &lt;/h2&gt;&#10;                            &lt;ChevronDownIcon className={`w-5 h-5 text-slate-500 transition-transform ${isSourcesOpen ? 'rotate-180' : ''}`} /&gt;&#10;                        &lt;/button&gt;&#10;                        {isSourcesOpen &amp;&amp; (&#10;                            &lt;ul className=&quot;mt-3 space-y-2&quot;&gt;&#10;                                {sources.map((source: any, index: number) =&gt; (&#10;                                    &lt;li key={index}&gt;&#10;                                        &lt;a &#10;                                            href={source.uri} &#10;                                            target=&quot;_blank&quot; &#10;                                            rel=&quot;noopener noreferrer&quot; &#10;                                            className=&quot;text-sm text-indigo-600 dark:text-indigo-400 hover:underline break-all&quot;&#10;                                        &gt;&#10;                                        {index+1}. {source.title || source.uri}&#10;                                        &lt;/a&gt;&#10;                                    &lt;/li&gt;&#10;                                ))}&#10;                            &lt;/ul&gt;&#10;                        )}&#10;                    &lt;/section&gt;&#10;                ); })()}&#10;            &lt;/div&gt;&#10;        &lt;/article&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default GemDetailView;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/icons.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/icons.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronRightIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m8.25 4.5 7.5 7.5-7.5 7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const XMarkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18 18 6M6 6l12 12&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const LightBulbIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 2.25c-3.728 0-6.75 2.94-6.75 6.563 0 2.278 1.148 4.043 2.505 5.332.516.486.84 1.13.84 1.828v.432c0 .414.336.75.75.75h5.31c.414 0 .75-.336.75-.75v-.432c0-.698.324-1.342.84-1.828 1.357-1.29 2.505-3.054 2.505-5.332C18.75 5.19 15.728 2.25 12 2.25Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 18.75h4.5M10.5 21h3&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const BookOpenIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 6.75c-1.148-.766-2.51-1.5-4.125-1.5S4.898 5.984 3.75 6.75v10.5c1.148-.766 2.51-1.5 4.125-1.5S10.852 16.484 12 17.25m0-10.5c1.148-.766 2.51-1.5 4.125-1.5s2.977.734 4.125 1.5v10.5c-1.148-.766-2.51-1.5-4.125-1.5S13.148 16.484 12 17.25m0-10.5v10.5&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export const HeartIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const ShareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.18.324.283.696.283 1.093s-.103.77-.283 1.093m0-2.186 9.566-5.314m-9.566 7.5 9.566 5.314m0 0a2.25 2.25 0 1 0 3.935 2.186 2.25 2.25 0 0 0-3.935-2.186Zm0-12.814a2.25 2.25 0 1 0 3.933-2.186 2.25 2.25 0 0 0-3.933 2.186Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const SparklesIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PlusCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const PaperAirplaneIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const UserCircleIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronLeftIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M15.75 19.5 8.25 12l7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const BookmarkSquareIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H12m4.5 0H21m-12 0H3.75m12 0a1.5 1.5 0 0 0-1.5-1.5H7.5a1.5 1.5 0 0 0-1.5 1.5m12 0v12.75A1.5 1.5 0 0 1 16.5 18h-9a1.5 1.5 0 0 1-1.5-1.5V3.75m1.5-1.5h9a1.5 1.5 0 0 1 1.5 1.5v12.75&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const Cog6ToothIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.594 3.94c.09-.542.56-1.003 1.11-1.226l.05-.022c.556-.23 1.156-.23 1.712 0l.05.022c.55.223 1.02.684 1.11 1.226l.06.353c.184.992.52 1.95 1.01 2.82l.05.09c.48.85.99 1.64 1.56 2.34l.05.06c.56.69.96 1.45 1.18 2.26l.02.09c.22.8.22 1.64 0 2.44l-.02.09a4.5 4.5 0 0 1-1.18 2.26l-.05.06c-.56.7-1.08 1.49-1.56 2.34l-.05.09c-.49.87-.83 1.83-1.01 2.82l-.06.353c-.09.542-.56 1.003-1.11 1.226l-.05.022c-.556.23-1.156-.23-1.712 0l-.05-.022c-.55-.223-1.02-.684-1.11-1.226l-.06-.353c-.184-.992-.52-1.95-1.01-2.82l-.05-.09c-.48-.85-.99-1.64-1.56-2.34l-.05-.06a4.5 4.5 0 0 1-1.18-2.26l-.02-.09c-.22-.8-.22-1.64 0-2.44l.02-.09c.22-.81.62-1.57 1.18-2.26l.05-.06c.56-.7 1.08-1.49 1.56-2.34l.05-.09c.49-.87.83-1.83 1.01-2.82l.06-.353ZM12 15.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const TagIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 6h.008v.008H6V6Z&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const LinkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronDownIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m19.5 8.25-7.5 7.5-7.5-7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ShieldCheckIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9 12.75 11.25 15 15 9.75m-3-7.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286Zm0 13.036h.008v.008h-.008v-.008Z&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const ChevronRightIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;m8.25 4.5 7.5 7.5-7.5 7.5&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const XMarkIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;        &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18 18 6M6 6l12 12&quot; /&gt;&#10;    &lt;/svg&gt;&#10;);&#10;&#10;export const LightBulbIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 2.25c-3.728 0-6.75 2.94-6.75 6.563 0 2.278 1.148 4.043 2.505 5.332.516.486.84 1.13.84 1.828v.432c0 .414.336.75.75.75h5.31c.414 0 .75-.336.75-.75v-.432c0-.698.324-1.342.84-1.828 1.357-1.29 2.505-3.054 2.505-5.332C18.75 5.19 15.728 2.25 12 2.25Z&quot; /&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M9.75 18.75h4.5M10.5 21h3&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const BookOpenIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; className={className}&gt;&#10;    &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M12 6.75c-1.148-.766-2.51-1.5-4.125-1.5S4.898 5.984 3.75 6.75v10.5c1.148-.766 2.51-1.5 4.125-1.5S10.852 16.484 12 17.25m0-10.5c1.148-.766 2.51-1.5 4.125-1.5s2.977.734 4.125 1.5v10.5c-1.148-.766-2.51-1.5-4.125-1.5S13.148 16.484 12 17.25m0-10.5v10.5&quot; /&gt;&#10;  &lt;/svg&gt;&#10;);&#10;&#10;export const FacebookIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M22 12.06C22 6.48 17.52 2 11.94 2S1.88 6.48 1.88 12.06c0 4.99 3.64 9.13 8.4 9.94v-7.03H7.9v-2.91h2.38v-2.22c0-2.35 1.4-3.65 3.55-3.65 1.03 0 2.1.18 2.1.18v2.31h-1.18c-1.16 0-1.52.72-1.52 1.46v1.92h2.59l-.41 2.91h-2.18V22c4.76-.81 8.4-4.95 8.4-9.94Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const InstagramIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M12 7.35A4.65 4.65 0 1 0 12 16.65 4.65 4.65 0 1 0 12 7.35Zm0 7.65A3 3 0 1 1 12 9a3 3 0 0 1 0 6Zm5.85-7.79a1.09 1.09 0 1 1 0-2.18 1.09 1.09 0 0 1 0 2.18ZM12 2.16c-2.52 0-2.84.01-3.84.06-1 .05-1.68.21-2.28.45a4.6 4.6 0 0 0-1.66 1.08 4.6 4.6 0 0 0-1.08 1.66c-.24.6-.4 1.28-.45 2.28-.05 1-.06 1.32-.06 3.84s.01 2.84.06 3.84c.05 1 .21 1.68.45 2.28.24.6.54 1.11 1.08 1.66.55.54 1.06.84 1.66 1.08.6.24 1.28.4 2.28.45 1 .05 1.32.06 3.84.06s2.84-.01 3.84-.06c1-.05 1.68-.21 2.28-.45a4.6 4.6 0 0 0 1.66-1.08 4.6 4.6 0 0 0 1.08-1.66c.24-.6.4-1.28.45-2.28.05-1 .06-1.32.06-3.84s-.01-2.84-.06-3.84c-.05-1-.21-1.68-.45-2.28a4.6 4.6 0 0 0-1.08-1.66 4.6 4.6 0 0 0-1.66-1.08c-.6-.24-1.28-.4-2.28-.45-1-.05-1.32-.06-3.84-.06Zm0 1.62c2.47 0 2.76.01 3.74.05.9.04 1.39.19 1.72.31.43.17.74.37 1.06.69.32.32.52.63.69 1.06.12.33.27.82.31 1.72.04.98.05 1.27.05 3.74s-.01 2.76-.05 3.74c-.04.9-.19 1.39-.31 1.72a2.98 2.98 0 0 1-.69 1.06c-.32.32-.63.52-1.06.69-.33.12-.82.27-1.72.31-.98.04-1.27.05-3.74.05s-2.76-.01-3.74-.05c-.9-.04-1.39-.19-1.72-.31a2.98 2.98 0 0 1-1.06-.69 2.98 2.98 0 0 1-.69-1.06c-.12-.33-.27-.82-.31-1.72-.04-.98-.05-1.27-.05-3.74s.01-2.76.05-3.74c.04-.9.19-1.39.31-1.72.17-.43.37-.74.69-1.06.32-.32.63-.52 1.06-.69.33-.12.82-.27 1.72-.31.98-.04 1.27-.05 3.74-.05Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const WhatsappIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M12.04 2a9.93 9.93 0 0 0-8.52 15.1L2 22l5.07-1.48A9.94 9.94 0 1 0 12.04 2Zm5.83 14.23c-.25.7-1.45 1.34-2.01 1.42-.52.08-1.18.11-1.9-.12-.44-.14-1-.33-1.72-.65-3.03-1.31-5-4.36-5.15-4.56-.15-.2-1.23-1.64-1.23-3.13 0-1.48.78-2.2 1.06-2.5.27-.29.59-.36.79-.36.2 0 .4 0 .57.01.18.01.43-.07.68.52.25.59.86 2.06.94 2.21.08.15.13.32.02.52-.11.2-.17.32-.31.49-.14.16-.3.37-.13.7.18.32.8 1.32 1.72 2.14 1.18 1.05 2.17 1.37 2.49 1.52.31.15.49.13.67-.08.18-.2.77-.9.97-1.21.2-.32.41-.27.68-.16.27.11 1.72.81 2.01.95.29.14.48.21.55.33.07.12.07.7-.18 1.4Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const MailIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M2.25 6.75A2.25 2.25 0 0 1 4.5 4.5h15a2.25 2.25 0 0 1 2.25 2.25v10.5A2.25 2.25 0 0 1 19.5 19.5h-15a2.25 2.25 0 0 1-2.25-2.25V6.75Zm2.402-.75 7.098 5.213L18.848 6H4.652Zm-.652 1.401v9.099h15v-9.1l-7.35 5.4a.75.75 0 0 1-.9 0L4 7.401Z&quot;/&gt;&lt;/svg&gt;&#10;);&#10;&#10;export const CopyIcon: React.FC&lt;{ className?: string }&gt; = ({ className }) =&gt; (&#10;  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot; className={className}&gt;&lt;path d=&quot;M8.25 3A2.25 2.25 0 0 0 6 5.25v9A2.25 2.25 0 0 0 8.25 16.5h7.5A2.25 2.25 0 0 0 18 14.25v-9A2.25 2.25 0 0 0 15.75 3h-7.5Zm-3 3h-.75A2.25 2.25 0 0 0 2.25 8.25v9A2.25 2.25 0 0 0 4.5 19.5h9a2.25 2.25 0 0 0 2.25-2.25v-.75h-.75a2.25 2.25 0 0 1-2.25-2.25V8.25A2.25 2.25 0 0 0 10.5 6h-5.25Z&quot;/&gt;&lt;/svg&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>