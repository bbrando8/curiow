rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regole per gli utenti
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Permetti agli admin di leggere tutti gli utenti
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regole per le gemme (lettura pubblica, scrittura per admin)
    match /gems/{gemId} {
      allow read: if true; // Lettura pubblica
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.canCreateGems == true;

      // Domande degli utenti sulle gemme
      match /userQuestions/{questionId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }

    // Regole per i canali (lettura pubblica)
    match /channels/{channelId} {
      allow read: if true;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regole per i suggerimenti di argomenti
    match /topicSuggestions/{suggestionId} {
      allow read, write: if request.auth != null;
    }

    // Regole per le sessioni di approfondimento
    match /deep_topic/{sessionId} {
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow get, list: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
    }

    // Regole per le domande generate dall'AI
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regole per i feedback degli utenti
    match /feedback_tester/{feedbackId} {
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow read: if request.auth != null &&
        resource.data.userId == request.auth.uid;
    }

    // ===== REGOLE PER LE NUOVE LISTE =====

    // Regole per le liste
    match /lists/{listId} {
      allow read, write: if request.auth != null &&
        resource.data.createdBy == request.auth.uid;
      allow create: if request.auth != null;
      allow read: if request.auth != null && resource.data.isPublic == true;
    }

    // Regole per i membri delle liste
    match /list_members/{memberId} {
      allow read, write: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &&
        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.createdBy == request.auth.uid;
    }

    // Regole per gli elementi delle liste
    match /list_items/{itemId} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &&
        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.createdBy == request.auth.uid;
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/lists/$(resource.data.listId)) &&
        get(/databases/$(database)/documents/lists/$(resource.data.listId)).data.isPublic == true;
    }

    // Regole per la cronologia delle chat di approfondimento
    match /deep_topic_history/{msgId} {
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow get, list: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
    }
  }
}
